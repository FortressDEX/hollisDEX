{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Swap/WatchList/CurrencyPopover/index.tsx\";\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, TextInput } from '@pangolindex/components';\nimport { useToken } from 'src/hooks/Tokens';\nimport { useTokenComparator } from 'src/components/SearchModal/sorting';\nimport { Token, CAVAX } from '@pangolindex/sdk';\nimport { filterTokens } from 'src/components/SearchModal/filtering';\nimport { AddInputWrapper, PopoverContainer, CurrencyList } from './styled';\nimport CurrencyRow from './CurrencyRow';\nimport usePrevious from 'src/hooks/usePrevious';\nimport { isAddress } from 'src/utils';\nimport { addCurrency } from 'src/state/watchlists/actions';\nimport { FixedSizeList } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { useChainId } from 'src/hooks';\n\nconst currencyKey = (currency, chainId) => {\n  return currency instanceof Token ? currency.address : currency === CAVAX[chainId] ? 'AVAX' : '';\n};\n\nconst CurrencyPopover = _ref => {\n  let {\n    getRef = () => {\n      /* */\n    },\n    coins,\n    isOpen,\n    onSelectCurrency\n  } = _ref;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [invertSearchOrder] = useState(false);\n  const inputRef = useRef(null);\n  const lastOpen = usePrevious(isOpen);\n  useEffect(() => {\n    if (isOpen && !lastOpen) {\n      setSearchQuery('');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isOpen]);\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        var _inputRef$current;\n\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      }, 500);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isOpen]);\n  const isAddressSearch = isAddress(searchQuery);\n  const searchToken = useToken(searchQuery);\n  const tokenComparator = useTokenComparator(invertSearchOrder);\n  const filteredTokens = useMemo(() => {\n    if (isAddressSearch) return searchToken ? [searchToken] : [];\n    return filterTokens(Object.values(coins), searchQuery);\n  }, [isAddressSearch, searchToken, coins, searchQuery]);\n  const filteredSortedTokens = useMemo(() => {\n    if (searchToken) return [searchToken];\n    const sorted = filteredTokens.sort(tokenComparator);\n    const symbolMatch = searchQuery.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    if (symbolMatch.length > 1) return sorted;\n    return [...(searchToken ? [searchToken] : []), // sort any exact symbol matches first\n    ...sorted.filter(token => {\n      var _token$symbol;\n\n      return ((_token$symbol = token.symbol) === null || _token$symbol === void 0 ? void 0 : _token$symbol.toLowerCase()) === symbolMatch[0];\n    }), ...sorted.filter(token => {\n      var _token$symbol2;\n\n      return ((_token$symbol2 = token.symbol) === null || _token$symbol2 === void 0 ? void 0 : _token$symbol2.toLowerCase()) !== symbolMatch[0];\n    })];\n  }, [filteredTokens, searchQuery, searchToken, tokenComparator]);\n  const currencies = filteredSortedTokens;\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback(address => {\n    dispatch(addCurrency(address));\n  }, [dispatch]);\n  const Row = useCallback(_ref2 => {\n    let {\n      data,\n      index,\n      style\n    } = _ref2;\n    const currency = data === null || data === void 0 ? void 0 : data[index];\n    return currency ? /*#__PURE__*/React.createElement(CurrencyRow, {\n      key: index,\n      style: style,\n      currency: currency,\n      onSelect: address => {\n        onSelectCurrency(currency);\n        onCurrencySelection(address);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }) : null;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const chainId = useChainId();\n  return /*#__PURE__*/React.createElement(PopoverContainer, {\n    ref: ref => getRef(ref),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    padding: \"0px 10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddInputWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    placeholder: \"Search\",\n    onChange: value => {\n      setSearchQuery(value);\n    },\n    value: searchQuery,\n    getRef: ref => inputRef.current = ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(CurrencyList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AutoSizer, {\n    disableWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, _ref3 => {\n    let {\n      height\n    } = _ref3;\n    return /*#__PURE__*/React.createElement(FixedSizeList, {\n      height: height,\n      width: \"100%\",\n      itemCount: currencies.length,\n      itemSize: 45,\n      itemData: currencies,\n      itemKey: (index, data) => currencyKey(data[index], chainId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, Row);\n  })));\n};\n\nexport default CurrencyPopover;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Swap/WatchList/CurrencyPopover/index.tsx"],"names":["React","useState","useEffect","useRef","useMemo","useCallback","useDispatch","Box","TextInput","useToken","useTokenComparator","Token","CAVAX","filterTokens","AddInputWrapper","PopoverContainer","CurrencyList","CurrencyRow","usePrevious","isAddress","addCurrency","FixedSizeList","AutoSizer","useChainId","currencyKey","currency","chainId","address","CurrencyPopover","getRef","coins","isOpen","onSelectCurrency","searchQuery","setSearchQuery","invertSearchOrder","inputRef","lastOpen","current","setTimeout","focus","isAddressSearch","searchToken","tokenComparator","filteredTokens","Object","values","filteredSortedTokens","sorted","sort","symbolMatch","toLowerCase","split","filter","s","length","token","symbol","currencies","dispatch","onCurrencySelection","Row","data","index","style","ref","value","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Box, TextInput } from '@pangolindex/components'\nimport { useToken } from 'src/hooks/Tokens'\nimport { useTokenComparator } from 'src/components/SearchModal/sorting'\nimport { Currency, Token, CAVAX, ChainId } from '@pangolindex/sdk'\nimport { filterTokens } from 'src/components/SearchModal/filtering'\nimport { AddInputWrapper, PopoverContainer, CurrencyList } from './styled'\nimport CurrencyRow from './CurrencyRow'\nimport usePrevious from 'src/hooks/usePrevious'\nimport { isAddress } from 'src/utils'\nimport { AppDispatch } from 'src/state'\nimport { addCurrency } from 'src/state/watchlists/actions'\nimport { FixedSizeList } from 'react-window'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { useChainId } from 'src/hooks'\n\ninterface Props {\n  getRef?: (ref: any) => void\n  coins: Array<Token>\n  isOpen: boolean\n  onSelectCurrency: (currency: Token) => void\n}\n\nconst currencyKey = (currency: Currency, chainId: ChainId): string => {\n  return currency instanceof Token ? currency.address : currency === CAVAX[chainId] ? 'AVAX' : ''\n}\n\nconst CurrencyPopover: React.FC<Props> = ({\n  getRef = () => {\n    /* */\n  },\n  coins,\n  isOpen,\n  onSelectCurrency\n}) => {\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [invertSearchOrder] = useState<boolean>(false)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const lastOpen = usePrevious(isOpen)\n\n  useEffect(() => {\n    if (isOpen && !lastOpen) {\n      setSearchQuery('')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => {\n        inputRef.current?.focus()\n      }, 500)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n\n  const isAddressSearch = isAddress(searchQuery)\n  const searchToken = useToken(searchQuery)\n\n  const tokenComparator = useTokenComparator(invertSearchOrder)\n\n  const filteredTokens: Token[] = useMemo(() => {\n    if (isAddressSearch) return searchToken ? [searchToken] : []\n    return filterTokens(Object.values(coins), searchQuery)\n  }, [isAddressSearch, searchToken, coins, searchQuery])\n\n  const filteredSortedTokens: Token[] = useMemo(() => {\n    if (searchToken) return [searchToken]\n    const sorted = filteredTokens.sort(tokenComparator)\n\n    const symbolMatch = searchQuery\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter(s => s.length > 0)\n    if (symbolMatch.length > 1) return sorted\n\n    return [\n      ...(searchToken ? [searchToken] : []),\n      // sort any exact symbol matches first\n      ...sorted.filter(token => token.symbol?.toLowerCase() === symbolMatch[0]),\n      ...sorted.filter(token => token.symbol?.toLowerCase() !== symbolMatch[0])\n    ]\n  }, [filteredTokens, searchQuery, searchToken, tokenComparator])\n\n  const currencies = filteredSortedTokens\n\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onCurrencySelection = useCallback(\n    (address: string) => {\n      dispatch(addCurrency(address))\n    },\n    [dispatch]\n  )\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Token = data?.[index]\n\n      return currency ? (\n        <CurrencyRow\n          key={index}\n          style={style}\n          currency={currency}\n          onSelect={address => {\n            onSelectCurrency(currency)\n            onCurrencySelection(address)\n          }}\n        />\n      ) : null\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const chainId = useChainId()\n\n  return (\n    <PopoverContainer ref={(ref: any) => getRef(ref)}>\n      {/* Render Search Token Input */}\n      <Box padding=\"0px 10px\">\n        <AddInputWrapper>\n          <TextInput\n            placeholder=\"Search\"\n            onChange={(value: any) => {\n              setSearchQuery(value as string)\n            }}\n            value={searchQuery}\n            getRef={(ref: HTMLInputElement) => ((inputRef as any).current = ref)}\n          />\n        </AddInputWrapper>\n      </Box>\n\n      <CurrencyList>\n        {/* {currencies.map((currency, index) => (\n            <CurrencyRow\n              key={index}\n              currency={currency}\n              onSelect={currency => {\n                onCurrencySelection(currency)\n              }}\n            />\n          ))} */}\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <FixedSizeList\n              height={height}\n              width=\"100%\"\n              itemCount={currencies.length}\n              itemSize={45}\n              itemData={currencies}\n              itemKey={(index, data) => currencyKey(data[index], chainId)}\n            >\n              {Row}\n            </FixedSizeList>\n          )}\n        </AutoSizer>\n      </CurrencyList>\n    </PopoverContainer>\n  )\n}\nexport default CurrencyPopover\n"]},"metadata":{},"sourceType":"module"}