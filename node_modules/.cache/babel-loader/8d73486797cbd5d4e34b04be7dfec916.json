{"ast":null,"code":"// TODO: Actually calculate price\nimport { ChainId, currencyEquals, JSBI, Price, WAVAX } from '@pangolindex/sdk';\nimport { useMemo } from 'react';\nimport { USDCe } from '../constants/tokens';\nimport { PairState, usePairs } from '../data/Reserves';\nimport { useChainId } from '../hooks';\nimport { wrappedCurrency } from './wrappedCurrency';\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\n\nexport default function useUSDCPrice(currency) {\n  const chainId = useChainId();\n  const wrapped = wrappedCurrency(currency, chainId);\n  const USDC = USDCe[chainId];\n  const tokenPairs = useMemo(() => [[chainId && wrapped && currencyEquals(WAVAX[chainId], wrapped) ? undefined : currency, chainId ? WAVAX[chainId] : undefined], [(wrapped === null || wrapped === void 0 ? void 0 : wrapped.equals(USDC)) ? undefined : wrapped, chainId === ChainId.AVALANCHE ? USDC : undefined], [chainId ? WAVAX[chainId] : undefined, chainId === ChainId.AVALANCHE ? USDC : undefined]], [chainId, currency, wrapped, USDC]);\n  const [[avaxPairState, avaxPair], [usdcPairState, usdcPair], [usdcAvaxPairState, usdcAvaxPair]] = usePairs(tokenPairs);\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined;\n    } // handle wavax/avax\n\n\n    if (wrapped.equals(WAVAX[chainId])) {\n      if (usdcPair) {\n        const price = usdcPair.priceOf(WAVAX[chainId]);\n        return new Price(currency, USDC, price.denominator, price.numerator);\n      } else {\n        return undefined;\n      }\n    } // handle usdc\n\n\n    if (wrapped.equals(USDC)) {\n      return new Price(USDC, USDC, '1', '1');\n    }\n\n    const avaxPairAVAXAmount = avaxPair === null || avaxPair === void 0 ? void 0 : avaxPair.reserveOf(WAVAX[chainId]);\n    const avaxPairAVAXUSDCValue = avaxPairAVAXAmount && usdcAvaxPair ? usdcAvaxPair.priceOf(WAVAX[chainId]).quote(avaxPairAVAXAmount, chainId).raw : JSBI.BigInt(0); // all other tokens\n    // first try the usdc pair\n\n    if (usdcPairState === PairState.EXISTS && usdcPair && usdcPair.reserveOf(USDC).greaterThan(avaxPairAVAXUSDCValue)) {\n      const price = usdcPair.priceOf(wrapped);\n      return new Price(currency, USDC, price.denominator, price.numerator);\n    }\n\n    if (avaxPairState === PairState.EXISTS && avaxPair && usdcAvaxPairState === PairState.EXISTS && usdcAvaxPair) {\n      if (usdcAvaxPair.reserveOf(USDC).greaterThan('0') && avaxPair.reserveOf(WAVAX[chainId]).greaterThan('0')) {\n        const avaxUsdcPrice = usdcAvaxPair.priceOf(USDC);\n        const currencyAvaxPrice = avaxPair.priceOf(WAVAX[chainId]);\n        const usdcPrice = avaxUsdcPrice.multiply(currencyAvaxPrice).invert();\n        return new Price(currency, USDC, usdcPrice.denominator, usdcPrice.numerator);\n      }\n    }\n\n    return undefined;\n  }, [chainId, currency, avaxPair, avaxPairState, usdcAvaxPair, usdcAvaxPairState, usdcPair, usdcPairState, wrapped, USDC]);\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/utils/useUSDCPrice.ts"],"names":["ChainId","currencyEquals","JSBI","Price","WAVAX","useMemo","USDCe","PairState","usePairs","useChainId","wrappedCurrency","useUSDCPrice","currency","chainId","wrapped","USDC","tokenPairs","undefined","equals","AVALANCHE","avaxPairState","avaxPair","usdcPairState","usdcPair","usdcAvaxPairState","usdcAvaxPair","price","priceOf","denominator","numerator","avaxPairAVAXAmount","reserveOf","avaxPairAVAXUSDCValue","quote","raw","BigInt","EXISTS","greaterThan","avaxUsdcPrice","currencyAvaxPrice","usdcPrice","multiply","invert"],"mappings":"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","sourcesContent":["// TODO: Actually calculate price\n\nimport { ChainId, Currency, currencyEquals, JSBI, Price, WAVAX } from '@pangolindex/sdk'\nimport { useMemo } from 'react'\nimport { USDCe } from '../constants/tokens'\nimport { PairState, usePairs } from '../data/Reserves'\nimport { useChainId } from '../hooks'\nimport { wrappedCurrency } from './wrappedCurrency'\n\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\nexport default function useUSDCPrice(currency?: Currency): Price | undefined {\n  const chainId = useChainId()\n  const wrapped = wrappedCurrency(currency, chainId)\n  const USDC = USDCe[chainId]\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\n    () => [\n      [\n        chainId && wrapped && currencyEquals(WAVAX[chainId], wrapped) ? undefined : currency,\n        chainId ? WAVAX[chainId] : undefined\n      ],\n      [wrapped?.equals(USDC) ? undefined : wrapped, chainId === ChainId.AVALANCHE ? USDC : undefined],\n      [chainId ? WAVAX[chainId] : undefined, chainId === ChainId.AVALANCHE ? USDC : undefined]\n    ],\n    [chainId, currency, wrapped, USDC]\n  )\n  const [[avaxPairState, avaxPair], [usdcPairState, usdcPair], [usdcAvaxPairState, usdcAvaxPair]] = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined\n    }\n    // handle wavax/avax\n    if (wrapped.equals(WAVAX[chainId])) {\n      if (usdcPair) {\n        const price = usdcPair.priceOf(WAVAX[chainId])\n        return new Price(currency, USDC, price.denominator, price.numerator)\n      } else {\n        return undefined\n      }\n    }\n    // handle usdc\n    if (wrapped.equals(USDC)) {\n      return new Price(USDC, USDC, '1', '1')\n    }\n\n    const avaxPairAVAXAmount = avaxPair?.reserveOf(WAVAX[chainId])\n    const avaxPairAVAXUSDCValue: JSBI =\n      avaxPairAVAXAmount && usdcAvaxPair\n        ? usdcAvaxPair.priceOf(WAVAX[chainId]).quote(avaxPairAVAXAmount, chainId).raw\n        : JSBI.BigInt(0)\n\n    // all other tokens\n    // first try the usdc pair\n    if (usdcPairState === PairState.EXISTS && usdcPair && usdcPair.reserveOf(USDC).greaterThan(avaxPairAVAXUSDCValue)) {\n      const price = usdcPair.priceOf(wrapped)\n      return new Price(currency, USDC, price.denominator, price.numerator)\n    }\n    if (avaxPairState === PairState.EXISTS && avaxPair && usdcAvaxPairState === PairState.EXISTS && usdcAvaxPair) {\n      if (usdcAvaxPair.reserveOf(USDC).greaterThan('0') && avaxPair.reserveOf(WAVAX[chainId]).greaterThan('0')) {\n        const avaxUsdcPrice = usdcAvaxPair.priceOf(USDC)\n        const currencyAvaxPrice = avaxPair.priceOf(WAVAX[chainId])\n        const usdcPrice = avaxUsdcPrice.multiply(currencyAvaxPrice).invert()\n        return new Price(currency, USDC, usdcPrice.denominator, usdcPrice.numerator)\n      }\n    }\n    return undefined\n  }, [\n    chainId,\n    currency,\n    avaxPair,\n    avaxPairState,\n    usdcAvaxPair,\n    usdcAvaxPairState,\n    usdcPair,\n    usdcPairState,\n    wrapped,\n    USDC\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}