{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/Withdraw/index.tsx\";\nimport React, { useState } from 'react';\nimport { Box, Button } from '@pangolindex/components';\nimport { WithdrawWrapper, RewardWrapper, Root, StatWrapper } from './styleds';\nimport { useTransactionAdder } from 'src/state/transactions/hooks';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { useMinichefPools, useMinichefPendingRewards } from 'src/state/stake/hooks';\nimport { useStakingContract } from 'src/hooks/useContract';\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted';\nimport Loader from 'src/components/Beta/Loader';\nimport Stat from 'src/components/Stat';\n\nconst Withdraw = _ref => {\n  var _ref2, _stakingInfo$stakedAm2, _stakingInfo$earnedAm, _error2;\n\n  let {\n    stakingInfo,\n    version,\n    onClose\n  } = _ref;\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n  const poolMap = useMinichefPools();\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n  const {\n    rewardTokensAmount\n  } = useMinichefPendingRewards(stakingInfo);\n  const isSuperFarm = ((_ref2 = rewardTokensAmount || []) === null || _ref2 === void 0 ? void 0 : _ref2.length) > 0;\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onClose();\n  }\n\n  async function onWithdraw() {\n    if (stakingContract && poolMap && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      var _stakingInfo$stakedAm;\n\n      setAttempting(true);\n      const method = version < 2 ? 'exit' : 'withdrawAndHarvest';\n      const args = version < 2 ? [] : [poolMap[stakingInfo.stakedAmount.token.address], `0x${(_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.raw.toString(16)}`, account]; // TODO: Support withdrawing partial amounts for v2+\n\n      await stakingContract[method](...args).then(response => {\n        addTransaction(response, {\n          summary: t('earn.withdrawDepositedLiquidity')\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.error(error);\n        }\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(WithdrawWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RewardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount) && /*#__PURE__*/React.createElement(StatWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('earn.unclaimedReward', {\n      symbol: 'PGL'\n    }),\n    stat: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm2 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.toSignificant(4),\n    titlePosition: \"top\",\n    titleFontSize: 12,\n    statFontSize: 24,\n    titleColor: \"text1\",\n    statAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && /*#__PURE__*/React.createElement(StatWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('earn.unclaimedReward', {\n      symbol: 'PNG'\n    }),\n    stat: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(4),\n    titlePosition: \"top\",\n    titleFontSize: 12,\n    statFontSize: 24,\n    titleColor: \"text1\",\n    statAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  })), isSuperFarm && (rewardTokensAmount === null || rewardTokensAmount === void 0 ? void 0 : rewardTokensAmount.map((rewardAmount, i) => {\n    var _rewardAmount$token;\n\n    return /*#__PURE__*/React.createElement(StatWrapper, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Stat, {\n      title: t('earn.unclaimedReward', {\n        symbol: rewardAmount === null || rewardAmount === void 0 ? void 0 : (_rewardAmount$token = rewardAmount.token) === null || _rewardAmount$token === void 0 ? void 0 : _rewardAmount$token.symbol\n      }),\n      stat: rewardAmount === null || rewardAmount === void 0 ? void 0 : rewardAmount.toSignificant(6),\n      titlePosition: \"top\",\n      titleFontSize: 12,\n      statFontSize: 24,\n      titleColor: \"text1\",\n      statAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }));\n  })))), /*#__PURE__*/React.createElement(Box, {\n    my: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: onWithdraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.withdrawAndClaim')))), attempting && !hash && /*#__PURE__*/React.createElement(Loader, {\n    size: 100,\n    label: \"Withdrawing & Claiming...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 31\n    }\n  }), hash && /*#__PURE__*/React.createElement(TransactionCompleted, {\n    onClose: wrappedOnDismiss,\n    submitText: `${t('earn.withdrewStakingToken', {\n      symbol: 'PGL'\n    })} & ${t('earn.claimedReward', {\n      symbol: 'PNG'\n    })}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Withdraw;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/Withdraw/index.tsx"],"names":["React","useState","Box","Button","WithdrawWrapper","RewardWrapper","Root","StatWrapper","useTransactionAdder","useActiveWeb3React","useTranslation","useMinichefPools","useMinichefPendingRewards","useStakingContract","TransactionCompleted","Loader","Stat","Withdraw","stakingInfo","version","onClose","account","t","addTransaction","hash","setHash","attempting","setAttempting","poolMap","stakingContract","stakingRewardAddress","rewardTokensAmount","isSuperFarm","length","wrappedOnDismiss","undefined","onWithdraw","stakedAmount","method","args","token","address","raw","toString","then","response","summary","catch","error","code","console","symbol","toSignificant","earnedAmount","map","rewardAmount","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,yBAA5B;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,IAAzC,EAA+CC,WAA/C,QAAkE,WAAlE;AAGA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,QAA4D,uBAA5D;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAOA,MAAMC,QAAQ,GAAG,QAAsD;AAAA;;AAAA,MAArD;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,GAAqD;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAcZ,kBAAkB,EAAtC;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAQZ,cAAc,EAA5B,CAHqE,CAKrE;;AACA,QAAMa,cAAc,GAAGf,mBAAmB,EAA1C;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,EAAhC;AACA,QAAM,CAACyB,UAAD,EAAaC,aAAb,IAA8B1B,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM2B,OAAO,GAAGjB,gBAAgB,EAAhC;AACA,QAAMkB,eAAe,GAAGhB,kBAAkB,CAACK,WAAW,CAACY,oBAAb,CAA1C;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAyBnB,yBAAyB,CAACM,WAAD,CAAxD;AAEA,QAAMc,WAAW,GAAG,UAACD,kBAAkB,IAAI,EAAvB,gDAA4BE,MAA5B,IAAqC,CAAzD;;AAEA,WAASC,gBAAT,GAA4B;AAC1BT,IAAAA,OAAO,CAACU,SAAD,CAAP;AACAR,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAP,IAAAA,OAAO;AACR;;AAED,iBAAegB,UAAf,GAA4B;AAC1B,QAAIP,eAAe,IAAID,OAAnB,KAA8BV,WAA9B,aAA8BA,WAA9B,uBAA8BA,WAAW,CAAEmB,YAA3C,CAAJ,EAA6D;AAAA;;AAC3DV,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAMW,MAAM,GAAGnB,OAAO,GAAG,CAAV,GAAc,MAAd,GAAuB,oBAAtC;AACA,YAAMoB,IAAI,GACRpB,OAAO,GAAG,CAAV,GACI,EADJ,GAEI,CACES,OAAO,CAACV,WAAW,CAACmB,YAAZ,CAAyBG,KAAzB,CAA+BC,OAAhC,CADT,EAEG,KAAD,yBAAKvB,WAAW,CAACmB,YAAjB,0DAAK,sBAA0BK,GAA1B,CAA8BC,QAA9B,CAAuC,EAAvC,CAA2C,EAFlD,EAGEtB,OAHF,CAHN,CAH2D,CAY3D;;AACA,YAAMQ,eAAe,CAACS,MAAD,CAAf,CAAwB,GAAGC,IAA3B,EACHK,IADG,CACGC,QAAD,IAAmC;AACvCtB,QAAAA,cAAc,CAACsB,QAAD,EAAW;AACvBC,UAAAA,OAAO,EAAExB,CAAC,CAAC,iCAAD;AADa,SAAX,CAAd;AAGAG,QAAAA,OAAO,CAACoB,QAAQ,CAACrB,IAAV,CAAP;AACD,OANG,EAOHuB,KAPG,CAOIC,KAAD,IAAgB;AACrBrB,QAAAA,aAAa,CAAC,KAAD,CAAb,CADqB,CAErB;;AACA,YAAI,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,MAAgB,IAApB,EAA0B;AACxBC,UAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,OAbG,CAAN;AAcD;AACF;;AAED,MAAIA,KAAJ;;AACA,MAAI,CAAC3B,OAAL,EAAc;AACZ2B,IAAAA,KAAK,GAAG1B,CAAC,CAAC,oBAAD,CAAT;AACD;;AACD,MAAI,EAACJ,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEmB,YAAd,CAAJ,EAAgC;AAAA;;AAC9BW,IAAAA,KAAK,aAAGA,KAAH,2CAAY1B,CAAC,CAAC,kBAAD,CAAlB;AACD;;AAED,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACI,UAAD,IAAe,CAACF,IAAhB,iBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAN,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEmB,YAAb,kBACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEf,CAAC,CAAC,sBAAD,EAAyB;AAAE6B,MAAAA,MAAM,EAAE;AAAV,KAAzB,CADV;AAEE,IAAA,IAAI,EAAEjC,WAAF,aAAEA,WAAF,iDAAEA,WAAW,CAAEmB,YAAf,2DAAE,uBAA2Be,aAA3B,CAAyC,CAAzC,CAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAOE,IAAA,SAAS,EAAC,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,EAcG,CAAAlC,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEmC,YAAb,kBACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE/B,CAAC,CAAC,sBAAD,EAAyB;AAAE6B,MAAAA,MAAM,EAAE;AAAV,KAAzB,CADV;AAEE,IAAA,IAAI,EAAEjC,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAEmC,YAAf,0DAAE,sBAA2BD,aAA3B,CAAyC,CAAzC,CAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAOE,IAAA,SAAS,EAAC,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAfJ,EA4BGpB,WAAW,KACVD,kBADU,aACVA,kBADU,uBACVA,kBAAkB,CAAEuB,GAApB,CAAwB,CAACC,YAAD,EAAeC,CAAf;AAAA;;AAAA,wBACtB,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAElC,CAAC,CAAC,sBAAD,EAAyB;AAAE6B,QAAAA,MAAM,EAAEI,YAAF,aAAEA,YAAF,8CAAEA,YAAY,CAAEf,KAAhB,wDAAE,oBAAqBW;AAA/B,OAAzB,CADV;AAEE,MAAA,IAAI,EAAEI,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEH,aAAd,CAA4B,CAA5B,CAFR;AAGE,MAAA,aAAa,EAAC,KAHhB;AAIE,MAAA,aAAa,EAAE,EAJjB;AAKE,MAAA,YAAY,EAAE,EALhB;AAME,MAAA,UAAU,EAAC,OANb;AAOE,MAAA,SAAS,EAAC,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADsB;AAAA,GAAxB,CADU,CA5Bd,CADF,CADF,eA+CE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAEhB,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACGY,KADH,6CACY1B,CAAC,CAAC,uBAAD,CADb,CADF,CA/CF,CAFJ,EAyDGI,UAAU,IAAI,CAACF,IAAf,iBAAuB,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,GAAd;AAAmB,IAAA,KAAK,EAAC,2BAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzD1B,EA2DGA,IAAI,iBACH,oBAAC,oBAAD;AACE,IAAA,OAAO,EAAEU,gBADX;AAEE,IAAA,UAAU,EAAG,GAAEZ,CAAC,CAAC,2BAAD,EAA8B;AAAE6B,MAAAA,MAAM,EAAE;AAAV,KAA9B,CAAiD,MAAK7B,CAAC,CAAC,oBAAD,EAAuB;AAC5F6B,MAAAA,MAAM,EAAE;AADoF,KAAvB,CAEpE,EAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5DJ,CADF;AAsED,CApID;;AAqIA,eAAelC,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Box, Button } from '@pangolindex/components'\nimport { WithdrawWrapper, RewardWrapper, Root, StatWrapper } from './styleds'\nimport { StakingInfo } from 'src/state/stake/hooks'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from 'src/state/transactions/hooks'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useTranslation } from 'react-i18next'\nimport { useMinichefPools, useMinichefPendingRewards } from 'src/state/stake/hooks'\nimport { useStakingContract } from 'src/hooks/useContract'\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted'\nimport Loader from 'src/components/Beta/Loader'\nimport Stat from 'src/components/Stat'\n\ninterface WithdrawProps {\n  stakingInfo: StakingInfo\n  version: number\n  onClose: () => void\n}\nconst Withdraw = ({ stakingInfo, version, onClose }: WithdrawProps) => {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  const poolMap = useMinichefPools()\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  const { rewardTokensAmount } = useMinichefPendingRewards(stakingInfo)\n\n  const isSuperFarm = (rewardTokensAmount || [])?.length > 0\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onClose()\n  }\n\n  async function onWithdraw() {\n    if (stakingContract && poolMap && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      const method = version < 2 ? 'exit' : 'withdrawAndHarvest'\n      const args =\n        version < 2\n          ? []\n          : [\n              poolMap[stakingInfo.stakedAmount.token.address],\n              `0x${stakingInfo.stakedAmount?.raw.toString(16)}`,\n              account\n            ]\n\n      // TODO: Support withdrawing partial amounts for v2+\n      await stakingContract[method](...args)\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.withdrawDepositedLiquidity')\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <WithdrawWrapper>\n      {!attempting && !hash && (\n        <Root>\n          <Box flex=\"1\">\n            <RewardWrapper>\n              {stakingInfo?.stakedAmount && (\n                <StatWrapper>\n                  <Stat\n                    title={t('earn.unclaimedReward', { symbol: 'PGL' })}\n                    stat={stakingInfo?.stakedAmount?.toSignificant(4)}\n                    titlePosition=\"top\"\n                    titleFontSize={12}\n                    statFontSize={24}\n                    titleColor=\"text1\"\n                    statAlign=\"center\"\n                  />\n                </StatWrapper>\n              )}\n              {stakingInfo?.earnedAmount && (\n                <StatWrapper>\n                  <Stat\n                    title={t('earn.unclaimedReward', { symbol: 'PNG' })}\n                    stat={stakingInfo?.earnedAmount?.toSignificant(4)}\n                    titlePosition=\"top\"\n                    titleFontSize={12}\n                    statFontSize={24}\n                    titleColor=\"text1\"\n                    statAlign=\"center\"\n                  />\n                </StatWrapper>\n              )}\n\n              {isSuperFarm &&\n                rewardTokensAmount?.map((rewardAmount, i) => (\n                  <StatWrapper key={i}>\n                    <Stat\n                      title={t('earn.unclaimedReward', { symbol: rewardAmount?.token?.symbol })}\n                      stat={rewardAmount?.toSignificant(6)}\n                      titlePosition=\"top\"\n                      titleFontSize={12}\n                      statFontSize={24}\n                      titleColor=\"text1\"\n                      statAlign=\"center\"\n                    />\n                  </StatWrapper>\n                ))}\n            </RewardWrapper>\n          </Box>\n\n          <Box my={'10px'}>\n            <Button variant=\"primary\" onClick={onWithdraw}>\n              {error ?? t('earn.withdrawAndClaim')}\n            </Button>\n          </Box>\n        </Root>\n      )}\n\n      {attempting && !hash && <Loader size={100} label=\"Withdrawing & Claiming...\" />}\n\n      {hash && (\n        <TransactionCompleted\n          onClose={wrappedOnDismiss}\n          submitText={`${t('earn.withdrewStakingToken', { symbol: 'PGL' })} & ${t('earn.claimedReward', {\n            symbol: 'PNG'\n          })}`}\n        />\n      )}\n    </WithdrawWrapper>\n  )\n}\nexport default Withdraw\n"]},"metadata":{},"sourceType":"module"}