{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global'; // TODO: Implement different loggers for different environments\n\nvar global = getGlobalObject();\n/** Prefix for logging strings */\n\nvar PREFIX = 'Sentry Logger ';\nexport var CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\n\nexport function consoleSandbox(callback) {\n  var global = getGlobalObject();\n\n  if (!('console' in global)) {\n    return callback();\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n  var originalConsole = global.console;\n  var wrappedLevels = {}; // Restore all wrapped console methods\n\n  CONSOLE_LEVELS.forEach(function (level) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in global.console && originalConsole[level].__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalConsole[level].__sentry_original__;\n    }\n  }); // Perform callback manipulations\n\n  var result = callback(); // Revert restoration to wrapped state\n\n  Object.keys(wrappedLevels).forEach(function (level) {\n    originalConsole[level] = wrappedLevels[level];\n  });\n  return result;\n}\n/** JSDoc */\n\nvar Logger =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n\n\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      var _a;\n\n      (_a = global.console).log.apply(_a, __spread([PREFIX + \"[Log]:\"], args));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      var _a;\n\n      (_a = global.console).warn.apply(_a, __spread([PREFIX + \"[Warn]:\"], args));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      var _a;\n\n      (_a = global.console).error.apply(_a, __spread([PREFIX + \"[Error]:\"], args));\n    });\n  };\n\n  return Logger;\n}();\n\nvar sentryGlobal = global.__SENTRY__ || {};\nvar logger = sentryGlobal.logger || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]:`, ...args);\n    });\n  }\n}\n\nconst sentryGlobal = global.__SENTRY__ || {};\nconst logger = (sentryGlobal.logger as Logger) || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}