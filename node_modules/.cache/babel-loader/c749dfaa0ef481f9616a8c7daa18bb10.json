{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/index.tsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport { PageWrapper, PageTitle, PoolsWrapper, PoolCards } from './styleds';\nimport { useChainId } from 'src/hooks';\nimport Loader from 'src/components/Loader';\nimport { SINGLE_SIDE_STAKING_REWARDS_INFO } from 'src/state/stake/singleSideConfig';\nimport { useSingleSideStakingInfo } from 'src/state/stake/hooks';\nimport { BIG_INT_ZERO } from 'src/constants';\nimport PoolCard from './PoolCard';\nimport { useModalOpen, useSingleSideStakingDetailnModalToggle } from 'src/state/application/hooks';\nimport DetailModal from './DetailModal';\nimport { ApplicationModal } from 'src/state/application/actions';\n\nconst StakeUI = () => {\n  var _SINGLE_SIDE_STAKING_, _SINGLE_SIDE_STAKING_2;\n\n  const params = useParams();\n  const {\n    t\n  } = useTranslation();\n  const chainId = useChainId();\n  const stakingInfos = useSingleSideStakingInfo(Number(params.version));\n  const [stakingInfoResults, setStakingInfoResults] = useState();\n  const [selectedStakingInfoIndex, setSelectedStakingInfoIndex] = useState(-1);\n  const toggleDetailModal = useSingleSideStakingDetailnModalToggle();\n  const isDetailModalOpen = useModalOpen(ApplicationModal.SINGLE_SIDE_STAKE_DETAIL);\n  useEffect(() => {\n    const sorted = stakingInfos === null || stakingInfos === void 0 ? void 0 : stakingInfos.filter(function (info) {\n      // Only include pools that are live or require a migration\n      return !info.isPeriodFinished || info.stakedAmount.greaterThan(BIG_INT_ZERO);\n    }).sort(function (info_a, info_b) {\n      var _info_a$totalStakedIn, _info_b$totalStakedIn;\n\n      // greater stake in png comes first\n      return ((_info_a$totalStakedIn = info_a.totalStakedInPng) === null || _info_a$totalStakedIn === void 0 ? void 0 : _info_a$totalStakedIn.greaterThan((_info_b$totalStakedIn = info_b.totalStakedInPng) !== null && _info_b$totalStakedIn !== void 0 ? _info_b$totalStakedIn : BIG_INT_ZERO)) ? -1 : 1;\n    }).sort(function (info_a, info_b) {\n      if (info_a.stakedAmount.greaterThan(BIG_INT_ZERO)) {\n        if (info_b.stakedAmount.greaterThan(BIG_INT_ZERO)) // both are being staked, so we keep the previous sorting\n          return 0; // the second is actually not at stake, so we should bring the first up\n        else return -1;\n      } else {\n        if (info_b.stakedAmount.greaterThan(BIG_INT_ZERO)) // first is not being staked, but second is, so we should bring the first down\n          return 1; // none are being staked, let's keep the  previous sorting\n        else return 0;\n      }\n    });\n    setStakingInfoResults(sorted); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stakingInfos]);\n  const stakingRewardsExist = Boolean(typeof chainId === 'number' && ((_SINGLE_SIDE_STAKING_ = (_SINGLE_SIDE_STAKING_2 = SINGLE_SIDE_STAKING_REWARDS_INFO[chainId]) === null || _SINGLE_SIDE_STAKING_2 === void 0 ? void 0 : _SINGLE_SIDE_STAKING_2.length) !== null && _SINGLE_SIDE_STAKING_ !== void 0 ? _SINGLE_SIDE_STAKING_ : 0) > 0);\n  const onViewDetailClick = useCallback(index => {\n    setSelectedStakingInfoIndex(index);\n    toggleDetailModal();\n  }, [toggleDetailModal, setSelectedStakingInfoIndex]);\n  const selectedStakingInfo = useMemo(() => stakingInfoResults === null || stakingInfoResults === void 0 ? void 0 : stakingInfoResults[selectedStakingInfoIndex], [stakingInfoResults, selectedStakingInfoIndex]);\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, t('stakePage.stakeAndEarn')), /*#__PURE__*/React.createElement(PoolsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, stakingRewardsExist && (stakingInfos === null || stakingInfos === void 0 ? void 0 : stakingInfos.length) === 0 ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }) : !stakingRewardsExist ? t('earnPage.noActiveRewards') : /*#__PURE__*/React.createElement(PoolCards, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, stakingInfoResults === null || stakingInfoResults === void 0 ? void 0 : stakingInfoResults.map((stakingInfo, index) => /*#__PURE__*/React.createElement(PoolCard, {\n    key: stakingInfo.stakingRewardAddress,\n    stakingInfo: stakingInfo,\n    onViewDetailsClick: () => onViewDetailClick(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  })))), selectedStakingInfo && isDetailModalOpen && /*#__PURE__*/React.createElement(DetailModal, {\n    stakingInfo: selectedStakingInfo,\n    onClose: toggleDetailModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default StakeUI;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","useTranslation","useParams","PageWrapper","PageTitle","PoolsWrapper","PoolCards","useChainId","Loader","SINGLE_SIDE_STAKING_REWARDS_INFO","useSingleSideStakingInfo","BIG_INT_ZERO","PoolCard","useModalOpen","useSingleSideStakingDetailnModalToggle","DetailModal","ApplicationModal","StakeUI","params","t","chainId","stakingInfos","Number","version","stakingInfoResults","setStakingInfoResults","selectedStakingInfoIndex","setSelectedStakingInfoIndex","toggleDetailModal","isDetailModalOpen","SINGLE_SIDE_STAKE_DETAIL","sorted","filter","info","isPeriodFinished","stakedAmount","greaterThan","sort","info_a","info_b","totalStakedInPng","stakingRewardsExist","Boolean","length","onViewDetailClick","index","selectedStakingInfo","margin","map","stakingInfo","stakingRewardAddress"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useParams } from 'react-router-dom'\nimport { PageWrapper, PageTitle, PoolsWrapper, PoolCards } from './styleds'\nimport { useChainId } from 'src/hooks'\nimport Loader from 'src/components/Loader'\nimport { SINGLE_SIDE_STAKING_REWARDS_INFO } from 'src/state/stake/singleSideConfig'\nimport { SingleSideStakingInfo, useSingleSideStakingInfo } from 'src/state/stake/hooks'\nimport { BIG_INT_ZERO } from 'src/constants'\nimport PoolCard from './PoolCard'\nimport { useModalOpen, useSingleSideStakingDetailnModalToggle } from 'src/state/application/hooks'\nimport DetailModal from './DetailModal'\nimport { ApplicationModal } from 'src/state/application/actions'\n\ninterface RouteParams {\n  version: string\n}\n\nconst StakeUI = () => {\n  const params = useParams<RouteParams>()\n  const { t } = useTranslation()\n  const chainId = useChainId()\n  const stakingInfos = useSingleSideStakingInfo(Number(params.version))\n  const [stakingInfoResults, setStakingInfoResults] = useState<SingleSideStakingInfo[]>()\n  const [selectedStakingInfoIndex, setSelectedStakingInfoIndex] = useState<number>(-1)\n\n  const toggleDetailModal = useSingleSideStakingDetailnModalToggle()\n  const isDetailModalOpen = useModalOpen(ApplicationModal.SINGLE_SIDE_STAKE_DETAIL)\n\n  useEffect(() => {\n    const sorted = stakingInfos\n      ?.filter(function(info) {\n        // Only include pools that are live or require a migration\n        return !info.isPeriodFinished || info.stakedAmount.greaterThan(BIG_INT_ZERO)\n      })\n      .sort(function(info_a, info_b) {\n        // greater stake in png comes first\n        return info_a.totalStakedInPng?.greaterThan(info_b.totalStakedInPng ?? BIG_INT_ZERO) ? -1 : 1\n      })\n      .sort(function(info_a, info_b) {\n        if (info_a.stakedAmount.greaterThan(BIG_INT_ZERO)) {\n          if (info_b.stakedAmount.greaterThan(BIG_INT_ZERO))\n            // both are being staked, so we keep the previous sorting\n            return 0\n          // the second is actually not at stake, so we should bring the first up\n          else return -1\n        } else {\n          if (info_b.stakedAmount.greaterThan(BIG_INT_ZERO))\n            // first is not being staked, but second is, so we should bring the first down\n            return 1\n          // none are being staked, let's keep the  previous sorting\n          else return 0\n        }\n      })\n    setStakingInfoResults(sorted)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stakingInfos])\n\n  const stakingRewardsExist = Boolean(\n    typeof chainId === 'number' && (SINGLE_SIDE_STAKING_REWARDS_INFO[chainId]?.length ?? 0) > 0\n  )\n\n  const onViewDetailClick = useCallback(\n    (index: number) => {\n      setSelectedStakingInfoIndex(index)\n      toggleDetailModal()\n    },\n    [toggleDetailModal, setSelectedStakingInfoIndex]\n  )\n\n  const selectedStakingInfo = useMemo(() => stakingInfoResults?.[selectedStakingInfoIndex], [\n    stakingInfoResults,\n    selectedStakingInfoIndex\n  ])\n\n  return (\n    <PageWrapper>\n      <PageTitle>{t('stakePage.stakeAndEarn')}</PageTitle>\n      <PoolsWrapper>\n        {stakingRewardsExist && stakingInfos?.length === 0 ? (\n          <Loader style={{ margin: 'auto' }} />\n        ) : !stakingRewardsExist ? (\n          t('earnPage.noActiveRewards')\n        ) : (\n          <PoolCards>\n            {stakingInfoResults?.map((stakingInfo, index) => (\n              <PoolCard\n                key={stakingInfo.stakingRewardAddress}\n                stakingInfo={stakingInfo}\n                onViewDetailsClick={() => onViewDetailClick(index)}\n              />\n            ))}\n          </PoolCards>\n        )}\n      </PoolsWrapper>\n\n      {selectedStakingInfo && isDetailModalOpen && (\n        <DetailModal stakingInfo={selectedStakingInfo} onClose={toggleDetailModal} />\n      )}\n    </PageWrapper>\n  )\n}\nexport default StakeUI\n"]},"metadata":{},"sourceType":"module"}