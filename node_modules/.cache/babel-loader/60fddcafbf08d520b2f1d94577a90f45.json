{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryCancelledOrders = exports.queryExecutedOrders = exports.queryPastOrders = exports.queryOpenOrders = exports.queryOrders = exports.queryOrder = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst graphql_request_1 = require(\"graphql-request\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst constants_2 = require(\"./constants\");\n\nconst stopLimitModule = chainId => constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase();\n\nconst queryOrder = (orderId, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  var _a;\n\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n      id: orderId.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n      id: orderId.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return (_a = _getUniqueOrdersWithExpiry(allOrders, chainId).pop()) !== null && _a !== void 0 ? _a : null;\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n});\n\nexports.queryOrder = queryOrder;\n\nconst queryOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return _getUniqueOrdersWithExpiry(allOrders, chainId);\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n});\n\nexports.queryOrders = queryOrders;\n\nconst queryOpenOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return _getUniqueOrdersWithExpiry(allOrders, chainId).filter(order => order.status === \"open\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for open orders\");\n  }\n});\n\nexports.queryOpenOrders = queryOpenOrders;\n\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return _getUniqueOrdersWithExpiry(allOrders, chainId).filter(order => order.status !== \"open\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for past orders\");\n  }\n});\n\nexports.queryPastOrders = queryPastOrders;\n\nconst queryExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return _getUniqueOrdersWithExpiry(allOrders, chainId).filter(order => order.status === \"executed\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for executed orders\");\n  }\n});\n\nexports.queryExecutedOrders = queryExecutedOrders;\n\nconst queryCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase()\n    }) : {\n      orders: []\n    };\n    const allOrders = [...dataFromOldSubgraph.orders, ...dataFromNewSubgraph.orders];\n    return _getUniqueOrdersWithExpiry(allOrders, chainId).filter(order => order.status === \"cancelled\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for cancelled orders\");\n  }\n});\n\nexports.queryCancelledOrders = queryCancelledOrders;\n\nconst _getUniqueOrdersWithExpiry = (allOrders, chainId) => // create Map and asign order id to order (key:value) to avoid having duplicated orders form multiple subgraphs\n[...new Map(allOrders.map(order => [order.id, order])).values()] // sort by `updatedAt` asc so that the most recent one will be used\n.sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt)) // filter out stop limit module\n.filter(order => order.module !== stopLimitModule(chainId)) // add expiry to order obj\n.map(order => {\n  const isExpired = Date.now() > (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n  return Object.assign(Object.assign({}, order), {\n    isExpired\n  });\n});","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/node_modules/@gelatonetwork/limit-orders-lib/dist/utils/queries/index.js"],"names":["Object","defineProperty","exports","value","queryCancelledOrders","queryExecutedOrders","queryPastOrders","queryOpenOrders","queryOrders","queryOrder","tslib_1","require","graphql_request_1","constants_1","constants_2","stopLimitModule","chainId","GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS","toLowerCase","orderId","__awaiter","_a","dataFromOldSubgraph","OLD_SUBGRAPH_URL","request","GET_ORDER_BY_ID","id","orders","dataFromNewSubgraph","SUBGRAPH_URL","allOrders","_getUniqueOrdersWithExpiry","pop","error","Error","owner","GET_ALL_ORDERS_BY_OWNER","filter","order","status","Map","map","values","sort","a","b","parseFloat","updatedAt","module","isExpired","Date","now","parseInt","createdAt","MAX_LIFETIME_IN_SECONDS","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryCancelledOrders = exports.queryExecutedOrders = exports.queryPastOrders = exports.queryOpenOrders = exports.queryOrders = exports.queryOrder = void 0;\nconst tslib_1 = require(\"tslib\");\nconst graphql_request_1 = require(\"graphql-request\");\nconst constants_1 = require(\"../../constants\");\nconst constants_2 = require(\"./constants\");\nconst stopLimitModule = (chainId) => constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase();\nconst queryOrder = (orderId, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    var _a;\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return (_a = _getUniqueOrdersWithExpiry(allOrders, chainId).pop()) !== null && _a !== void 0 ? _a : null;\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrder = queryOrder;\nconst queryOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId);\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrders = queryOrders;\nconst queryOpenOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenOrders = queryOpenOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst queryExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryExecutedOrders = queryExecutedOrders;\nconst queryCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryCancelledOrders = queryCancelledOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders, chainId) => \n// create Map and asign order id to order (key:value) to avoid having duplicated orders form multiple subgraphs\n[...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // filter out stop limit module\n    .filter((order) => order.module !== stopLimitModule(chainId))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\n"]},"metadata":{},"sourceType":"script"}