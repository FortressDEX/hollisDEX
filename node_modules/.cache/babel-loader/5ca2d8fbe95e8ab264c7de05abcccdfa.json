{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getUniqueOrdersWithExpiry = exports.queryPastOrders = exports.queryStopLimitCancelledOrders = exports.queryStopLimitExecutedOrders = exports.queryOpenStopLimitOrders = exports.queryStopLimitOrders = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst graphql_request_1 = require(\"graphql-request\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst constants_2 = require(\"./constants\");\n\nconst queryStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase(),\n      module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase()\n    }) : {\n      orders: []\n    };\n    const orders = dataStopLimitSubgraph.orders;\n    return (0, exports._getUniqueOrdersWithExpiry)(orders);\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n});\n\nexports.queryStopLimitOrders = queryStopLimitOrders;\n\nconst queryOpenStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase(),\n      module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase()\n    }) : {\n      orders: []\n    };\n    const orders = dataStopLimitSubgraph.orders;\n    return (0, exports._getUniqueOrdersWithExpiry)(orders).filter(order => order.status === \"open\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for open orders\");\n  }\n});\n\nexports.queryOpenStopLimitOrders = queryOpenStopLimitOrders;\n\nconst queryStopLimitExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase(),\n      module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase()\n    }) : {\n      orders: []\n    };\n    const orders = dataStopLimitSubgraph.orders;\n    return (0, exports._getUniqueOrdersWithExpiry)(orders).filter(order => order.status === \"executed\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for executed orders\");\n  }\n});\n\nexports.queryStopLimitExecutedOrders = queryStopLimitExecutedOrders;\n\nconst queryStopLimitCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase(),\n      module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase()\n    }) : {\n      orders: []\n    };\n    const orders = dataStopLimitSubgraph.orders;\n    return (0, exports._getUniqueOrdersWithExpiry)(orders).filter(order => order.status === \"cancelled\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for cancelled orders\");\n  }\n});\n\nexports.queryStopLimitCancelledOrders = queryStopLimitCancelledOrders;\n\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  try {\n    const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId] ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n      owner: owner.toLowerCase(),\n      module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase()\n    }) : {\n      orders: []\n    };\n    const orders = dataStopLimitSubgraph.orders;\n    return (0, exports._getUniqueOrdersWithExpiry)(orders).filter(order => order.status !== \"open\");\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for past orders\");\n  }\n});\n\nexports.queryPastOrders = queryPastOrders;\n\nconst _getUniqueOrdersWithExpiry = allOrders => [...new Map(allOrders.map(order => [order.id, order])).values()] // sort by `updatedAt` asc so that the most recent one will be used\n.sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt)) // add expiry to order obj\n.map(order => {\n  const isExpired = Date.now() > (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n  return Object.assign(Object.assign({}, order), {\n    isExpired\n  });\n});\n\nexports._getUniqueOrdersWithExpiry = _getUniqueOrdersWithExpiry;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/node_modules/@gelatonetwork/limit-orders-lib/dist/utils/queries/stoplimit.js"],"names":["Object","defineProperty","exports","value","_getUniqueOrdersWithExpiry","queryPastOrders","queryStopLimitCancelledOrders","queryStopLimitExecutedOrders","queryOpenStopLimitOrders","queryStopLimitOrders","tslib_1","require","graphql_request_1","constants_1","constants_2","owner","chainId","__awaiter","dataStopLimitSubgraph","SUBGRAPH_URL","request","GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER","toLowerCase","module","GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS","orders","error","console","Error","filter","order","status","allOrders","Map","map","id","values","sort","a","b","parseFloat","updatedAt","isExpired","Date","now","parseInt","createdAt","MAX_LIFETIME_IN_SECONDS","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._getUniqueOrdersWithExpiry = exports.queryPastOrders = exports.queryStopLimitCancelledOrders = exports.queryStopLimitExecutedOrders = exports.queryOpenStopLimitOrders = exports.queryStopLimitOrders = void 0;\nconst tslib_1 = require(\"tslib\");\nconst graphql_request_1 = require(\"graphql-request\");\nconst constants_1 = require(\"../../constants\");\nconst constants_2 = require(\"./constants\");\nconst queryStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders);\n    }\n    catch (error) {\n        console.error(error);\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryStopLimitOrders = queryStopLimitOrders;\nconst queryOpenStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenStopLimitOrders = queryOpenStopLimitOrders;\nconst queryStopLimitExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryStopLimitExecutedOrders = queryStopLimitExecutedOrders;\nconst queryStopLimitCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryStopLimitCancelledOrders = queryStopLimitCancelledOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders) => [...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\nexports._getUniqueOrdersWithExpiry = _getUniqueOrdersWithExpiry;\n"]},"metadata":{},"sourceType":"script"}