{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/DetailModal/EarnedWidget/index.tsx\";\nimport { Box, Button, Text } from '@pangolindex/components';\nimport { JSBI } from '@pangolindex/sdk';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport numeral from 'numeral';\nimport Stat from 'src/components/Stat';\nimport useUSDCPrice from 'src/utils/useUSDCPrice';\nimport { Root, StatWrapper } from './styled';\nimport ClaimDrawer from '../../ClaimDrawer';\nimport UnstakeDrawer from '../UnstakeDrawer';\nimport { CHAINS } from 'src/constants/chains';\nimport { useChainId } from 'src/hooks';\n\nconst EarnedWidget = _ref => {\n  var _stakingInfo$stakedAm, _stakingInfo$earnedAm;\n\n  let {\n    stakingInfo\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const chainId = useChainId();\n  const [isClaimDrawerVisible, setShowClaimDrawer] = useState(false);\n  const [isUnstakeDrawerVisible, setShowUnstakeDrawer] = useState(false);\n  const rewardToken = stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.rewardToken;\n  const usdcPriceTmp = useUSDCPrice(rewardToken);\n  const usdcPrice = CHAINS[chainId].is_mainnet ? usdcPriceTmp : undefined;\n  const weeklyRewardInToken = stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.rewardRatePerWeek.toSignificant(4);\n  const unclaimedAmountInToken = stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount.toSignificant(4);\n  const weeklyRewardUSD = CHAINS[chainId].is_mainnet ? Number(weeklyRewardInToken) * Number(usdcPrice === null || usdcPrice === void 0 ? void 0 : usdcPrice.toSignificant(6)) : undefined;\n  const unclaimedAmountInUSD = CHAINS[chainId].is_mainnet ? Number(unclaimedAmountInToken) * Number(usdcPrice === null || usdcPrice === void 0 ? void 0 : usdcPrice.toSignificant(6)) : undefined;\n  return /*#__PURE__*/React.createElement(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    color: \"text10\",\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Earned\"), (stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.greaterThan('0')) && /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    backgroundColor: \"color9\",\n    color: \"color4\",\n    width: \"100px\",\n    height: \"30px\",\n    onClick: () => setShowUnstakeDrawer(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, t('earnPage.unstake'))), /*#__PURE__*/React.createElement(StatWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('dashboardPage.earned_weeklyIncome'),\n    stat: numeral(weeklyRewardUSD).format('$0.00a'),\n    titlePosition: \"top\",\n    titleFontSize: 16,\n    statFontSize: 24,\n    titleColor: \"text2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('dashboardPage.earned_weeklyIncome'),\n    stat: weeklyRewardInToken,\n    titlePosition: \"top\",\n    titleFontSize: 16,\n    statFontSize: 24,\n    titleColor: \"text2\",\n    currency: rewardToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(StatWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('dashboardPage.earned_totalEarned'),\n    stat: numeral(unclaimedAmountInUSD).format('$0.00a'),\n    titlePosition: \"top\",\n    titleFontSize: 16,\n    statFontSize: 24,\n    titleColor: \"text2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('dashboardPage.earned_totalEarned'),\n    stat: unclaimedAmountInToken,\n    titlePosition: \"top\",\n    titleFontSize: 16,\n    statFontSize: 24,\n    titleColor: \"text2\",\n    currency: rewardToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Box, {\n    mt: 15,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    padding: \"15px 18px\",\n    isDisabled: !(stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.greaterThan(JSBI.BigInt(0))),\n    variant: \"primary\",\n    onClick: () => setShowClaimDrawer(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, t('earnPage.claim'))), /*#__PURE__*/React.createElement(ClaimDrawer, {\n    isOpen: isClaimDrawerVisible,\n    onClose: () => {\n      setShowClaimDrawer(false);\n    },\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(UnstakeDrawer, {\n    isOpen: isUnstakeDrawerVisible,\n    onClose: () => {\n      setShowUnstakeDrawer(false);\n    },\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EarnedWidget;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/DetailModal/EarnedWidget/index.tsx"],"names":["Box","Button","Text","JSBI","React","useState","useTranslation","numeral","Stat","useUSDCPrice","Root","StatWrapper","ClaimDrawer","UnstakeDrawer","CHAINS","useChainId","EarnedWidget","stakingInfo","t","chainId","isClaimDrawerVisible","setShowClaimDrawer","isUnstakeDrawerVisible","setShowUnstakeDrawer","rewardToken","usdcPriceTmp","usdcPrice","is_mainnet","undefined","weeklyRewardInToken","rewardRatePerWeek","toSignificant","unclaimedAmountInToken","earnedAmount","weeklyRewardUSD","Number","unclaimedAmountInUSD","stakedAmount","greaterThan","format","BigInt"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,QAAkC,yBAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,UAAlC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;;AAMA,MAAMC,YAA6B,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAQZ,cAAc,EAA5B;AAEA,QAAMa,OAAO,GAAGJ,UAAU,EAA1B;AAEA,QAAM,CAACK,oBAAD,EAAuBC,kBAAvB,IAA6ChB,QAAQ,CAAC,KAAD,CAA3D;AACA,QAAM,CAACiB,sBAAD,EAAyBC,oBAAzB,IAAiDlB,QAAQ,CAAC,KAAD,CAA/D;AAEA,QAAMmB,WAAW,GAAGP,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEO,WAAjC;AACA,QAAMC,YAAY,GAAGhB,YAAY,CAACe,WAAD,CAAjC;AACA,QAAME,SAAS,GAAGZ,MAAM,CAACK,OAAD,CAAN,CAAgBQ,UAAhB,GAA6BF,YAA7B,GAA4CG,SAA9D;AAEA,QAAMC,mBAAmB,GAAGZ,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEa,iBAAb,CAA+BC,aAA/B,CAA6C,CAA7C,CAA5B;AACA,QAAMC,sBAAsB,GAAGf,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEgB,YAAb,CAA0BF,aAA1B,CAAwC,CAAxC,CAA/B;AAEA,QAAMG,eAAe,GAAGpB,MAAM,CAACK,OAAD,CAAN,CAAgBQ,UAAhB,GACpBQ,MAAM,CAACN,mBAAD,CAAN,GAA8BM,MAAM,CAACT,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,aAAX,CAAyB,CAAzB,CAAD,CADhB,GAEpBH,SAFJ;AAGA,QAAMQ,oBAAoB,GAAGtB,MAAM,CAACK,OAAD,CAAN,CAAgBQ,UAAhB,GACzBQ,MAAM,CAACH,sBAAD,CAAN,GAAiCG,MAAM,CAACT,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEK,aAAX,CAAyB,CAAzB,CAAD,CADd,GAEzBH,SAFJ;AAIA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,cAAc,EAAC,eAAnC;AAAmD,IAAA,UAAU,EAAC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,QAAZ;AAAqB,IAAA,QAAQ,EAAE,EAA/B;AAAmC,IAAA,UAAU,EAAE,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAMG,CAAAX,WAAW,SAAX,IAAAA,WAAW,WAAX,qCAAAA,WAAW,CAAEoB,YAAb,gFAA2BC,WAA3B,CAAuC,GAAvC,mBACC,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,SADV;AAEE,IAAA,eAAe,EAAC,QAFlB;AAGE,IAAA,KAAK,EAAC,QAHR;AAIE,IAAA,KAAK,EAAC,OAJR;AAKE,IAAA,MAAM,EAAC,MALT;AAME,IAAA,OAAO,EAAE,MAAMf,oBAAoB,CAAC,IAAD,CANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGL,CAAC,CAAC,kBAAD,CARJ,CAPJ,CADF,eAqBE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEA,CAAC,CAAC,mCAAD,CADV;AAEE,IAAA,IAAI,EAAEX,OAAO,CAAC2B,eAAD,CAAP,CAAyBK,MAAzB,CAAgC,QAAhC,CAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAYE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAErB,CAAC,CAAC,mCAAD,CADV;AAEE,IAAA,IAAI,EAAEW,mBAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAOE,IAAA,QAAQ,EAAEL,WAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,CArBF,eA8CE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEN,CAAC,CAAC,kCAAD,CADV;AAEE,IAAA,IAAI,EAAEX,OAAO,CAAC6B,oBAAD,CAAP,CAA8BG,MAA9B,CAAqC,QAArC,CAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAYE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAErB,CAAC,CAAC,kCAAD,CADV;AAEE,IAAA,IAAI,EAAEc,sBAFR;AAGE,IAAA,aAAa,EAAC,KAHhB;AAIE,IAAA,aAAa,EAAE,EAJjB;AAKE,IAAA,YAAY,EAAE,EALhB;AAME,IAAA,UAAU,EAAC,OANb;AAOE,IAAA,QAAQ,EAAER,WAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,CA9CF,eAuEE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,UAAU,EAAE,EAACP,WAAD,aAACA,WAAD,gDAACA,WAAW,CAAEgB,YAAd,0DAAC,sBAA2BK,WAA3B,CAAuCnC,IAAI,CAACqC,MAAL,CAAY,CAAZ,CAAvC,CAAD,CAFd;AAGE,IAAA,OAAO,EAAC,SAHV;AAIE,IAAA,OAAO,EAAE,MAAMnB,kBAAkB,CAAC,IAAD,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGH,CAAC,CAAC,gBAAD,CANJ,CADF,CAvEF,eAkFE,oBAAC,WAAD;AACE,IAAA,MAAM,EAAEE,oBADV;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KAJH;AAKE,IAAA,WAAW,EAAEJ,WALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlFF,eA0FE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAEK,sBADV;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,KAJH;AAKE,IAAA,WAAW,EAAEN,WALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1FF,CADF;AAoGD,CA1HD;;AA4HA,eAAeD,YAAf","sourcesContent":["import { Box, Button, Text } from '@pangolindex/components'\nimport { JSBI } from '@pangolindex/sdk'\nimport React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport numeral from 'numeral'\nimport Stat from 'src/components/Stat'\nimport { SingleSideStakingInfo } from 'src/state/stake/hooks'\nimport useUSDCPrice from 'src/utils/useUSDCPrice'\nimport { Root, StatWrapper } from './styled'\nimport ClaimDrawer from '../../ClaimDrawer'\nimport UnstakeDrawer from '../UnstakeDrawer'\nimport { CHAINS } from 'src/constants/chains'\nimport { useChainId } from 'src/hooks'\n\ntype Props = {\n  stakingInfo: SingleSideStakingInfo\n}\n\nconst EarnedWidget: React.FC<Props> = ({ stakingInfo }) => {\n  const { t } = useTranslation()\n\n  const chainId = useChainId()\n\n  const [isClaimDrawerVisible, setShowClaimDrawer] = useState(false)\n  const [isUnstakeDrawerVisible, setShowUnstakeDrawer] = useState(false)\n\n  const rewardToken = stakingInfo?.rewardToken\n  const usdcPriceTmp = useUSDCPrice(rewardToken)\n  const usdcPrice = CHAINS[chainId].is_mainnet ? usdcPriceTmp : undefined\n\n  const weeklyRewardInToken = stakingInfo?.rewardRatePerWeek.toSignificant(4)\n  const unclaimedAmountInToken = stakingInfo?.earnedAmount.toSignificant(4)\n\n  const weeklyRewardUSD = CHAINS[chainId].is_mainnet\n    ? Number(weeklyRewardInToken) * Number(usdcPrice?.toSignificant(6))\n    : undefined\n  const unclaimedAmountInUSD = CHAINS[chainId].is_mainnet\n    ? Number(unclaimedAmountInToken) * Number(usdcPrice?.toSignificant(6))\n    : undefined\n\n  return (\n    <Root>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text color=\"text10\" fontSize={24} fontWeight={500}>\n          Earned\n        </Text>\n\n        {/* show unstak button */}\n        {stakingInfo?.stakedAmount?.greaterThan('0') && (\n          <Button\n            variant=\"primary\"\n            backgroundColor=\"color9\"\n            color=\"color4\"\n            width=\"100px\"\n            height=\"30px\"\n            onClick={() => setShowUnstakeDrawer(true)}\n          >\n            {t('earnPage.unstake')}\n          </Button>\n        )}\n      </Box>\n\n      <StatWrapper>\n        <Box>\n          <Stat\n            title={t('dashboardPage.earned_weeklyIncome')}\n            stat={numeral(weeklyRewardUSD).format('$0.00a')}\n            titlePosition=\"top\"\n            titleFontSize={16}\n            statFontSize={24}\n            titleColor=\"text2\"\n          />\n        </Box>\n\n        <Box>\n          <Stat\n            title={t('dashboardPage.earned_weeklyIncome')}\n            stat={weeklyRewardInToken}\n            titlePosition=\"top\"\n            titleFontSize={16}\n            statFontSize={24}\n            titleColor=\"text2\"\n            currency={rewardToken}\n          />\n        </Box>\n      </StatWrapper>\n\n      <StatWrapper>\n        <Box>\n          <Stat\n            title={t('dashboardPage.earned_totalEarned')}\n            stat={numeral(unclaimedAmountInUSD).format('$0.00a')}\n            titlePosition=\"top\"\n            titleFontSize={16}\n            statFontSize={24}\n            titleColor=\"text2\"\n          />\n        </Box>\n\n        <Box>\n          <Stat\n            title={t('dashboardPage.earned_totalEarned')}\n            stat={unclaimedAmountInToken}\n            titlePosition=\"top\"\n            titleFontSize={16}\n            statFontSize={24}\n            titleColor=\"text2\"\n            currency={rewardToken}\n          />\n        </Box>\n      </StatWrapper>\n\n      <Box mt={15}>\n        <Button\n          padding=\"15px 18px\"\n          isDisabled={!stakingInfo?.earnedAmount?.greaterThan(JSBI.BigInt(0))}\n          variant=\"primary\"\n          onClick={() => setShowClaimDrawer(true)}\n        >\n          {t('earnPage.claim')}\n        </Button>\n      </Box>\n\n      <ClaimDrawer\n        isOpen={isClaimDrawerVisible}\n        onClose={() => {\n          setShowClaimDrawer(false)\n        }}\n        stakingInfo={stakingInfo}\n      />\n\n      <UnstakeDrawer\n        isOpen={isUnstakeDrawerVisible}\n        onClose={() => {\n          setShowUnstakeDrawer(false)\n        }}\n        stakingInfo={stakingInfo}\n      />\n    </Root>\n  )\n}\n\nexport default EarnedWidget\n"]},"metadata":{},"sourceType":"module"}