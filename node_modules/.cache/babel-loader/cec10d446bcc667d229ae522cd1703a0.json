{"ast":null,"code":"import { useSelector } from 'react-redux';\nimport { ChainId } from '@pangolindex/sdk';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useAllTokens } from 'src/hooks/Tokens';\nimport { PNG } from 'src/constants/tokens';\nexport function useSelectedCurrencyLists() {\n  var _PNG$chainId;\n\n  const {\n    chainId = ChainId.AVALANCHE\n  } = useActiveWeb3React();\n  const allTokens = useAllTokens();\n  const coins = Object.values(allTokens || {});\n  let addresses = useSelector(state => {\n    var _state$watchlists;\n\n    return [].concat((state === null || state === void 0 ? void 0 : (_state$watchlists = state.watchlists) === null || _state$watchlists === void 0 ? void 0 : _state$watchlists.currencies) || []);\n  });\n  addresses = [(_PNG$chainId = PNG[chainId]) === null || _PNG$chainId === void 0 ? void 0 : _PNG$chainId.address, ...addresses];\n  let allSelectedToken = [];\n  addresses.forEach(address => {\n    const filterTokens = coins.filter(coin => address.toLowerCase() === coin.address.toLowerCase());\n    allSelectedToken = [...allSelectedToken, ...filterTokens];\n  });\n  return allSelectedToken;\n}\nexport function useIsSelectedCurrency(address) {\n  var _PNG$chainId2;\n\n  const {\n    chainId = ChainId.AVALANCHE\n  } = useActiveWeb3React();\n  let addresses = useSelector(state => {\n    var _state$watchlists2;\n\n    return [].concat((state === null || state === void 0 ? void 0 : (_state$watchlists2 = state.watchlists) === null || _state$watchlists2 === void 0 ? void 0 : _state$watchlists2.currencies) || []);\n  });\n  addresses = [(_PNG$chainId2 = PNG[chainId]) === null || _PNG$chainId2 === void 0 ? void 0 : _PNG$chainId2.address, ...addresses];\n  const isSelected = (addresses || []).includes(address);\n  return isSelected;\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/watchlists/hooks.ts"],"names":["useSelector","ChainId","useActiveWeb3React","useAllTokens","PNG","useSelectedCurrencyLists","chainId","AVALANCHE","allTokens","coins","Object","values","addresses","state","concat","watchlists","currencies","address","allSelectedToken","forEach","filterTokens","filter","coin","toLowerCase","useIsSelectedCurrency","isSelected","includes"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAA+B,kBAA/B;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,OAAO,SAASC,wBAAT,GAAyD;AAAA;;AAC9D,QAAM;AAAEC,IAAAA,OAAO,GAAGL,OAAO,CAACM;AAApB,MAAkCL,kBAAkB,EAA1D;AACA,QAAMM,SAAS,GAAGL,YAAY,EAA9B;AACA,QAAMM,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAS,IAAI,EAA3B,CAAd;AAEA,MAAII,SAAS,GAAGZ,WAAW,CAAiDa,KAAK;AAAA;;AAAA,WAC9E,EAAD,CAAiBC,MAAjB,CAAwB,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,iCAAAA,KAAK,CAAEE,UAAP,wEAAmBC,UAAnB,KAAiC,EAAzD,CAD+E;AAAA,GAAtD,CAA3B;AAIAJ,EAAAA,SAAS,GAAG,iBAACR,GAAG,CAACE,OAAD,CAAJ,iDAAC,aAAcW,OAAf,EAAwB,GAAGL,SAA3B,CAAZ;AAEA,MAAIM,gBAAgB,GAAG,EAAvB;AAEAN,EAAAA,SAAS,CAACO,OAAV,CAAkBF,OAAO,IAAI;AAC3B,UAAMG,YAAY,GAAGX,KAAK,CAACY,MAAN,CAAaC,IAAI,IAAIL,OAAO,CAACM,WAAR,OAA0BD,IAAI,CAACL,OAAL,CAAaM,WAAb,EAA/C,CAArB;AAEAL,IAAAA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsB,GAAGE,YAAzB,CAAnB;AACD,GAJD;AAMA,SAAOF,gBAAP;AACD;AAED,OAAO,SAASM,qBAAT,CAA+BP,OAA/B,EAAyD;AAAA;;AAC9D,QAAM;AAAEX,IAAAA,OAAO,GAAGL,OAAO,CAACM;AAApB,MAAkCL,kBAAkB,EAA1D;AAEA,MAAIU,SAAS,GAAGZ,WAAW,CAAiDa,KAAK;AAAA;;AAAA,WAC9E,EAAD,CAAiBC,MAAjB,CAAwB,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,kCAAAA,KAAK,CAAEE,UAAP,0EAAmBC,UAAnB,KAAiC,EAAzD,CAD+E;AAAA,GAAtD,CAA3B;AAIAJ,EAAAA,SAAS,GAAG,kBAACR,GAAG,CAACE,OAAD,CAAJ,kDAAC,cAAcW,OAAf,EAAwB,GAAGL,SAA3B,CAAZ;AAEA,QAAMa,UAAU,GAAG,CAACb,SAAS,IAAI,EAAd,EAAkBc,QAAlB,CAA2BT,OAA3B,CAAnB;AACA,SAAOQ,UAAP;AACD","sourcesContent":["import { useSelector } from 'react-redux'\nimport { ChainId, Token } from '@pangolindex/sdk'\nimport { AppState } from '../index'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useAllTokens } from 'src/hooks/Tokens'\nimport { PNG } from 'src/constants/tokens'\n\nexport function useSelectedCurrencyLists(): Token[] | undefined {\n  const { chainId = ChainId.AVALANCHE } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const coins = Object.values(allTokens || {})\n\n  let addresses = useSelector<AppState, AppState['watchlists']['currencies']>(state =>\n    ([] as string[]).concat(state?.watchlists?.currencies || [])\n  )\n\n  addresses = [PNG[chainId]?.address, ...addresses]\n\n  let allSelectedToken = [] as Token[]\n\n  addresses.forEach(address => {\n    const filterTokens = coins.filter(coin => address.toLowerCase() === coin.address.toLowerCase())\n\n    allSelectedToken = [...allSelectedToken, ...filterTokens]\n  })\n\n  return allSelectedToken\n}\n\nexport function useIsSelectedCurrency(address: string): boolean {\n  const { chainId = ChainId.AVALANCHE } = useActiveWeb3React()\n\n  let addresses = useSelector<AppState, AppState['watchlists']['currencies']>(state =>\n    ([] as string[]).concat(state?.watchlists?.currencies || [])\n  )\n\n  addresses = [PNG[chainId]?.address, ...addresses]\n\n  const isSelected = (addresses || []).includes(address)\n  return isSelected\n}\n"]},"metadata":{},"sourceType":"module"}