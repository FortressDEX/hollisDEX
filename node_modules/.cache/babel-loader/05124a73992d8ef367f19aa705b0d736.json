{"ast":null,"code":"import gql from 'graphql-tag';\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`;\nexport const GET_BLOCKS = timestamps => {\n  let queryString = 'query blocks {';\n  queryString += timestamps.map(timestamp => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp + 60 * 60 * 24 * 7} }) {\n      number\n    }`;\n  });\n  queryString += '}';\n  return gql(queryString);\n};\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedETH\n      }\n    `);\n  queryString += ',';\n  queryString += blocks.map(block => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/apollo/block.js"],"names":["gql","GET_BLOCK","GET_BLOCKS","timestamps","queryString","map","timestamp","PRICES_BY_BLOCK","tokenAddress","blocks","block","number"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,MAAMC,SAAS,GAAGD,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAME,UAAU,GAAGC,UAAU,IAAI;AACtC,MAAIC,WAAW,GAAG,gBAAlB;AACAA,EAAAA,WAAW,IAAID,UAAU,CAACE,GAAX,CAAeC,SAAS,IAAI;AACzC,WAAQ,IAAGA,SAAU,qFAAoFA,SAAU,mBAAkBA,SAAS,GAC5I,KAAK,EAAL,GAAU,EAAV,GAAe,CAAE;AACvB;AACA,MAHI;AAID,GALc,CAAf;AAMAF,EAAAA,WAAW,IAAI,GAAf;AACA,SAAOJ,GAAG,CAACI,WAAD,CAAV;AACD,CAVM;AAYP,OAAO,MAAMG,eAAe,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AACvD,MAAIL,WAAW,GAAG,gBAAlB;AACAA,EAAAA,WAAW,IAAIK,MAAM,CAACJ,GAAP,CACbK,KAAK,IAAK;AACd,SAASA,KAAK,CAACJ,SAAU,cAAaE,YAAa,uBAAsBE,KAAK,CAACC,MAAO;AACtF;AACA;AACA,KALiB,CAAf;AAOAP,EAAAA,WAAW,IAAI,GAAf;AACAA,EAAAA,WAAW,IAAIK,MAAM,CAACJ,GAAP,CACbK,KAAK,IAAK;AACd,SAASA,KAAK,CAACJ,SAAU,qCAAoCI,KAAK,CAACC,MAAO;AAC1E;AACA;AACA,KALiB,CAAf;AAQAP,EAAAA,WAAW,IAAI,GAAf;AACA,SAAOJ,GAAG,CAACI,WAAD,CAAV;AACD,CApBM","sourcesContent":["import gql from 'graphql-tag'\n\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`\n\nexport const GET_BLOCKS = timestamps => {\n  let queryString = 'query blocks {'\n  queryString += timestamps.map(timestamp => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp +\n      60 * 60 * 24 * 7} }) {\n      number\n    }`\n  })\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\n  let queryString = 'query blocks {'\n  queryString += blocks.map(\n    block => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedETH\n      }\n    `\n  )\n  queryString += ','\n  queryString += blocks.map(\n    block => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `\n  )\n\n  queryString += '}'\n  return gql(queryString)\n}\n"]},"metadata":{},"sourceType":"module"}