{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nvar STACKTRACE_LIMIT = 50;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\n\nexport function createStackParser() {\n  var parsers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    parsers[_i] = arguments[_i];\n  }\n\n  var sortedParsers = parsers.sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (p) {\n    return p[1];\n  });\n  return function (stack, skipFirst) {\n    var e_1, _a, e_2, _b;\n\n    if (skipFirst === void 0) {\n      skipFirst = 0;\n    }\n\n    var frames = [];\n\n    try {\n      for (var _c = __values(stack.split('\\n').slice(skipFirst)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var line = _d.value;\n\n        try {\n          for (var sortedParsers_1 = (e_2 = void 0, __values(sortedParsers)), sortedParsers_1_1 = sortedParsers_1.next(); !sortedParsers_1_1.done; sortedParsers_1_1 = sortedParsers_1.next()) {\n            var parser = sortedParsers_1_1.value;\n            var frame = parser(line);\n\n            if (frame) {\n              frames.push(frame);\n              break;\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (sortedParsers_1_1 && !sortedParsers_1_1.done && (_b = sortedParsers_1.return)) _b.call(sortedParsers_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n/**\n * @hidden\n */\n\nexport function stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n\n  var localStack = stack;\n  var firstFrameFunction = localStack[0].function || '';\n  var lastFrameFunction = localStack[localStack.length - 1].function || ''; // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  } // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n\n\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  } // The frame where the crash happened, should be the last entry in the array\n\n\n  return localStack.slice(0, STACKTRACE_LIMIT).map(function (frame) {\n    return __assign(__assign({}, frame), {\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?'\n    });\n  }).reverse();\n}\nvar defaultFunctionName = '<anonymous>';\n/**\n * Safely extract function name from itself\n */\n\nexport function getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}","map":{"version":3,"sources":["../src/stacktrace.ts"],"names":[],"mappings":"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","sourcesContent":["import { StackFrame } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\nexport type StackParser = (stack: string, skipFirst?: number) => StackFrame[];\nexport type StackLineParserFn = (line: string) => StackFrame | undefined;\nexport type StackLineParser = [number, StackLineParserFn];\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      for (const parser of sortedParsers) {\n        const frame = parser(line);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}