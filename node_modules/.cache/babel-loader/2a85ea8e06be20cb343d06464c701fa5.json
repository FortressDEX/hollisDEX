{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/PoolCard/index.tsx\";\nimport React, { useState } from 'react';\nimport { Text, CurrencyLogo } from '@pangolindex/components';\nimport { JSBI } from '@pangolindex/sdk';\nimport numeral from 'numeral';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardHeader, Stats, CardStats, TokenName, DetailButton, StakeButton, StatValue } from './styleds';\nimport ClaimDrawer from '../ClaimDrawer';\nimport StakeDrawer from './StakeDrawer';\n\nconst PoolCard = _ref => {\n  var _stakingInfo$earnedAm, _Number, _Number2;\n\n  let {\n    stakingInfo,\n    onViewDetailsClick\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React();\n  const [isClaimDrawerVisible, setShowClaimDrawer] = useState(false);\n  const [isStakeDrawerVisible, setShowtakeDrawer] = useState(false);\n  const showClaimButton = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.greaterThan('0');\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TokenName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, t('stakePage.earn', {\n    symbol: stakingInfo.rewardToken.symbol\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyLogo, {\n    size: 48,\n    currency: stakingInfo.rewardToken,\n    imageSize: 48,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(CardStats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, stakingInfo.stakedAmount.greaterThan('0') ? /*#__PURE__*/React.createElement(Stats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    lineHeight: \"19px\",\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Your staked\"), /*#__PURE__*/React.createElement(StatValue, {\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, numeral((_Number = Number(stakingInfo.stakedAmount.toExact())) === null || _Number === void 0 ? void 0 : _Number.toFixed(2)).format('0.00a'), \" PNG\")) : /*#__PURE__*/React.createElement(Stats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    lineHeight: \"19px\",\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, t('stakePage.totalStaked')), /*#__PURE__*/React.createElement(StatValue, {\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, numeral((_Number2 = Number(stakingInfo.totalStakedInPng.toExact())) === null || _Number2 === void 0 ? void 0 : _Number2.toFixed(2)).format('0.00a'), \" PNG\")), /*#__PURE__*/React.createElement(Stats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    lineHeight: \"19px\",\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"APR\"), /*#__PURE__*/React.createElement(StatValue, {\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, JSBI.greaterThan(stakingInfo.apr, JSBI.BigInt(0)) && !stakingInfo.isPeriodFinished ? `${stakingInfo.apr.toLocaleString()}%` : ' - '))), /*#__PURE__*/React.createElement(CardStats, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DetailButton, {\n    variant: \"outline\",\n    color: \"color4\",\n    backgroundColor: \"color2\",\n    onClick: onViewDetailsClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, t('stakePage.seeDetails')), !!account && /*#__PURE__*/React.createElement(React.Fragment, null, showClaimButton ? /*#__PURE__*/React.createElement(StakeButton, {\n    variant: \"primary\" // color=\"color4\"\n    ,\n    onClick: () => {\n      setShowClaimDrawer(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, t('earnPage.claim')) : /*#__PURE__*/React.createElement(StakeButton, {\n    variant: \"primary\" // color=\"color4\"\n    ,\n    onClick: () => {\n      setShowtakeDrawer(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, t('earnPage.stake')))), /*#__PURE__*/React.createElement(ClaimDrawer, {\n    isOpen: isClaimDrawerVisible,\n    onClose: () => {\n      setShowClaimDrawer(false);\n    },\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StakeDrawer, {\n    isOpen: isStakeDrawerVisible,\n    onClose: () => setShowtakeDrawer(false),\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PoolCard;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/PoolCard/index.tsx"],"names":["React","useState","Text","CurrencyLogo","JSBI","numeral","useActiveWeb3React","useTranslation","Card","CardHeader","Stats","CardStats","TokenName","DetailButton","StakeButton","StatValue","ClaimDrawer","StakeDrawer","PoolCard","stakingInfo","onViewDetailsClick","t","account","isClaimDrawerVisible","setShowClaimDrawer","isStakeDrawerVisible","setShowtakeDrawer","showClaimButton","earnedAmount","greaterThan","symbol","rewardToken","stakedAmount","Number","toExact","toFixed","format","totalStakedInPng","apr","BigInt","isPeriodFinished","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Text, CurrencyLogo } from '@pangolindex/components'\nimport { JSBI } from '@pangolindex/sdk'\nimport numeral from 'numeral'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useTranslation } from 'react-i18next'\nimport { Card, CardHeader, Stats, CardStats, TokenName, DetailButton, StakeButton, StatValue } from './styleds'\nimport { SingleSideStakingInfo } from 'src/state/stake/hooks'\nimport ClaimDrawer from '../ClaimDrawer'\nimport StakeDrawer from './StakeDrawer'\n\nexport interface PoolCardProps {\n  stakingInfo: SingleSideStakingInfo\n  onViewDetailsClick: () => void\n}\n\nconst PoolCard = ({ stakingInfo, onViewDetailsClick }: PoolCardProps) => {\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const [isClaimDrawerVisible, setShowClaimDrawer] = useState(false)\n\n  const [isStakeDrawerVisible, setShowtakeDrawer] = useState(false)\n\n  const showClaimButton = stakingInfo?.earnedAmount?.greaterThan('0')\n\n  return (\n    <Card>\n      <CardHeader>\n        <TokenName>{t('stakePage.earn', { symbol: stakingInfo.rewardToken.symbol })}</TokenName>\n        <div>\n          <CurrencyLogo size={48} currency={stakingInfo.rewardToken} imageSize={48} />\n        </div>\n      </CardHeader>\n      <CardStats>\n        {stakingInfo.stakedAmount.greaterThan('0') ? (\n          <Stats>\n            <Text fontSize={16} fontWeight={500} lineHeight=\"19px\" color=\"text1\">\n              Your staked\n            </Text>\n            <StatValue color=\"text1\">\n              {numeral(Number(stakingInfo.stakedAmount.toExact())?.toFixed(2)).format('0.00a')} PNG\n            </StatValue>\n          </Stats>\n        ) : (\n          <Stats>\n            <Text fontSize={16} fontWeight={500} lineHeight=\"19px\" color=\"text1\">\n              {t('stakePage.totalStaked')}\n            </Text>\n            <StatValue color=\"text1\">\n              {numeral(Number(stakingInfo.totalStakedInPng.toExact())?.toFixed(2)).format('0.00a')} PNG\n            </StatValue>\n          </Stats>\n        )}\n        <Stats>\n          <Text fontSize={16} fontWeight={500} lineHeight=\"19px\" color=\"text1\">\n            APR\n          </Text>\n          <StatValue color=\"text1\">\n            {JSBI.greaterThan(stakingInfo.apr, JSBI.BigInt(0)) && !stakingInfo.isPeriodFinished\n              ? `${stakingInfo.apr.toLocaleString()}%`\n              : ' - '}\n          </StatValue>\n        </Stats>\n      </CardStats>\n      <CardStats>\n        <DetailButton variant=\"outline\" color=\"color4\" backgroundColor=\"color2\" onClick={onViewDetailsClick}>\n          {t('stakePage.seeDetails')}\n        </DetailButton>\n        {!!account && (\n          <>\n            {showClaimButton ? (\n              <StakeButton\n                variant=\"primary\"\n                // color=\"color4\"\n                onClick={() => {\n                  setShowClaimDrawer(true)\n                }}\n              >\n                {t('earnPage.claim')}\n              </StakeButton>\n            ) : (\n              <StakeButton\n                variant=\"primary\"\n                // color=\"color4\"\n                onClick={() => {\n                  setShowtakeDrawer(true)\n                }}\n              >\n                {t('earnPage.stake')}\n              </StakeButton>\n            )}\n          </>\n        )}\n      </CardStats>\n\n      <ClaimDrawer\n        isOpen={isClaimDrawerVisible}\n        onClose={() => {\n          setShowClaimDrawer(false)\n        }}\n        stakingInfo={stakingInfo}\n      />\n\n      <StakeDrawer isOpen={isStakeDrawerVisible} onClose={() => setShowtakeDrawer(false)} stakingInfo={stakingInfo} />\n    </Card>\n  )\n}\nexport default PoolCard\n"]},"metadata":{},"sourceType":"module"}