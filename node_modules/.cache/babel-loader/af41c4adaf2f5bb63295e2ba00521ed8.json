{"ast":null,"code":"import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport Numeral from 'numeral';\ndayjs.extend(utc);\nexport const toK = num => {\n  return Numeral(num).format('0.[00]a');\n}; // using a currency library here in case we want to add more in future\n\nconst priceFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2\n});\nexport const toNiceDateYear = date => {\n  return dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY');\n};\nexport const formattedNum = function (number) {\n  let usd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isNaN(number) || number === '' || number === undefined) {\n    return usd ? '$0' : 0;\n  }\n\n  const num = parseFloat(number);\n\n  if (num > 500000000) {\n    return (usd ? '$' : '') + toK(num.toFixed(0));\n  }\n\n  if (num === 0) {\n    if (usd) {\n      return '$0';\n    }\n\n    return 0;\n  }\n\n  if (num < 0.0001 && num > 0) {\n    return usd ? '< $0.0001' : '< 0.0001';\n  }\n\n  if (num > 1000) {\n    return usd ? '$' + Number(parseFloat(num).toFixed(0)).toLocaleString() : '' + Number(parseFloat(num).toFixed(0)).toLocaleString();\n  }\n\n  if (usd) {\n    if (num < 0.1) {\n      return '$' + Number(parseFloat(num).toFixed(4));\n    } else {\n      const usdString = priceFormatter.format(num);\n      return '$' + usdString.slice(1, usdString.length);\n    }\n  }\n\n  return Number(parseFloat(num).toFixed(5));\n};","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/utils/charts.ts"],"names":["dayjs","utc","Numeral","extend","toK","num","format","priceFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","toNiceDateYear","date","unix","formattedNum","number","usd","isNaN","undefined","parseFloat","toFixed","Number","toLocaleString","usdString","slice","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEAF,KAAK,CAACG,MAAN,CAAaF,GAAb;AAEA,OAAO,MAAMG,GAAG,GAAIC,GAAD,IAAiB;AAClC,SAAOH,OAAO,CAACG,GAAD,CAAP,CAAaC,MAAb,CAAoB,SAApB,CAAP;AACD,CAFM,C,CAIP;;AACA,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpDC,EAAAA,KAAK,EAAE,UAD6C;AAEpDC,EAAAA,QAAQ,EAAE,KAF0C;AAGpDC,EAAAA,qBAAqB,EAAE;AAH6B,CAA/B,CAAvB;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAkB;AAC9C,SAAOd,KAAK,CAACC,GAAN,CAAUD,KAAK,CAACe,IAAN,CAAWD,IAAX,CAAV,EAA4BR,MAA5B,CAAmC,eAAnC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMU,YAAY,GAAG,UAACC,MAAD,EAA8B;AAAA,MAAhBC,GAAgB,uEAAV,KAAU;;AACxD,MAAIC,KAAK,CAACF,MAAD,CAAL,IAAiBA,MAAM,KAAK,EAA5B,IAAkCA,MAAM,KAAKG,SAAjD,EAA4D;AAC1D,WAAOF,GAAG,GAAG,IAAH,GAAU,CAApB;AACD;;AACD,QAAMb,GAAG,GAAGgB,UAAU,CAACJ,MAAD,CAAtB;;AAEA,MAAIZ,GAAG,GAAG,SAAV,EAAqB;AACnB,WAAO,CAACa,GAAG,GAAG,GAAH,GAAS,EAAb,IAAmBd,GAAG,CAACC,GAAG,CAACiB,OAAJ,CAAY,CAAZ,CAAD,CAA7B;AACD;;AAED,MAAIjB,GAAG,KAAK,CAAZ,EAAe;AACb,QAAIa,GAAJ,EAAS;AACP,aAAO,IAAP;AACD;;AACD,WAAO,CAAP;AACD;;AAED,MAAIb,GAAG,GAAG,MAAN,IAAgBA,GAAG,GAAG,CAA1B,EAA6B;AAC3B,WAAOa,GAAG,GAAG,WAAH,GAAiB,UAA3B;AACD;;AAED,MAAIb,GAAG,GAAG,IAAV,EAAgB;AACd,WAAOa,GAAG,GACN,MAAMK,MAAM,CAACF,UAAU,CAAChB,GAAD,CAAV,CAAgBiB,OAAhB,CAAwB,CAAxB,CAAD,CAAN,CAAmCE,cAAnC,EADA,GAEN,KAAKD,MAAM,CAACF,UAAU,CAAChB,GAAD,CAAV,CAAgBiB,OAAhB,CAAwB,CAAxB,CAAD,CAAN,CAAmCE,cAAnC,EAFT;AAGD;;AAED,MAAIN,GAAJ,EAAS;AACP,QAAIb,GAAG,GAAG,GAAV,EAAe;AACb,aAAO,MAAMkB,MAAM,CAACF,UAAU,CAAChB,GAAD,CAAV,CAAgBiB,OAAhB,CAAwB,CAAxB,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,YAAMG,SAAS,GAAGlB,cAAc,CAACD,MAAf,CAAsBD,GAAtB,CAAlB;AACA,aAAO,MAAMoB,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmBD,SAAS,CAACE,MAA7B,CAAb;AACD;AACF;;AAED,SAAOJ,MAAM,CAACF,UAAU,CAAChB,GAAD,CAAV,CAAgBiB,OAAhB,CAAwB,CAAxB,CAAD,CAAb;AACD,CArCM","sourcesContent":["import dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport Numeral from 'numeral'\n\ndayjs.extend(utc)\n\nexport const toK = (num: number) => {\n  return Numeral(num).format('0.[00]a')\n}\n\n// using a currency library here in case we want to add more in future\nconst priceFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2\n})\n\nexport const toNiceDateYear = (date: number) => {\n  return dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY')\n}\n\nexport const formattedNum = (number: any, usd = false) => {\n  if (isNaN(number) || number === '' || number === undefined) {\n    return usd ? '$0' : 0\n  }\n  const num = parseFloat(number) as any\n\n  if (num > 500000000) {\n    return (usd ? '$' : '') + toK(num.toFixed(0))\n  }\n\n  if (num === 0) {\n    if (usd) {\n      return '$0'\n    }\n    return 0\n  }\n\n  if (num < 0.0001 && num > 0) {\n    return usd ? '< $0.0001' : '< 0.0001'\n  }\n\n  if (num > 1000) {\n    return usd\n      ? '$' + Number(parseFloat(num).toFixed(0)).toLocaleString()\n      : '' + Number(parseFloat(num).toFixed(0)).toLocaleString()\n  }\n\n  if (usd) {\n    if (num < 0.1) {\n      return '$' + Number(parseFloat(num).toFixed(4))\n    } else {\n      const usdString = priceFormatter.format(num)\n      return '$' + usdString.slice(1, usdString.length)\n    }\n  }\n\n  return Number(parseFloat(num).toFixed(5))\n}\n"]},"metadata":{},"sourceType":"module"}