{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/ClaimWidget/index.tsx\";\nimport React, { useState } from 'react';\nimport { Box, Text, Button } from '@pangolindex/components';\nimport { WidgetWrapper, Root } from './styled';\nimport { useTransactionAdder } from 'src/state/transactions/hooks';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { useStakingContract } from 'src/hooks/useContract';\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted';\nimport Loader from 'src/components/Beta/Loader';\n\nconst ClaimWidget = _ref => {\n  var _stakingInfo$earnedAm, _stakingInfo$rewardTo2, _error2;\n\n  let {\n    stakingInfo,\n    onClose,\n    onClickRewardStake\n  } = _ref;\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onClose();\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onClaimReward() {\n    if (stakingContract && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      await stakingContract.getReward({\n        gasLimit: 350000\n      }).then(response => {\n        var _stakingInfo$rewardTo;\n\n        addTransaction(response, {\n          summary: t('earn.claimAccumulated', {\n            symbol: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardTo = stakingInfo.rewardToken) === null || _stakingInfo$rewardTo === void 0 ? void 0 : _stakingInfo$rewardTo.symbol\n          })\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.error(error);\n        }\n\n        console.log(error);\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(WidgetWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"26px\",\n    fontWeight: 500,\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(6)), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"16px\",\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, t('earn.unclaimedReward', {\n    symbol: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardTo2 = stakingInfo.rewardToken) === null || _stakingInfo$rewardTo2 === void 0 ? void 0 : _stakingInfo$rewardTo2.symbol\n  })), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"14px\",\n    color: \"text2\",\n    textAlign: \"center\",\n    mt: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Claim your rewards\")), /*#__PURE__*/React.createElement(Box, {\n    mt: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    isDisabled: !!error,\n    onClick: onClaimReward,\n    padding: \"15px 18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earnPage.claim')))), attempting && !hash && /*#__PURE__*/React.createElement(Loader, {\n    size: 100,\n    label: \"Claiming...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 31\n    }\n  }), hash && /*#__PURE__*/React.createElement(TransactionCompleted, {\n    onClose: wrappedOnDismiss,\n    submitText: \"Your rewards claimed\",\n    isShowButtton: true,\n    onButtonClick: () => onClickRewardStake && onClickRewardStake(),\n    buttonText: \"Stake\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default ClaimWidget;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/ClaimWidget/index.tsx"],"names":["React","useState","Box","Text","Button","WidgetWrapper","Root","useTransactionAdder","useActiveWeb3React","useTranslation","useStakingContract","TransactionCompleted","Loader","ClaimWidget","stakingInfo","onClose","onClickRewardStake","account","t","addTransaction","hash","setHash","attempting","setAttempting","wrappedOnDismiss","undefined","stakingContract","stakingRewardAddress","onClaimReward","stakedAmount","getReward","gasLimit","then","response","summary","symbol","rewardToken","catch","error","code","console","log","earnedAmount","toSignificant"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Box, Text, Button } from '@pangolindex/components'\nimport { WidgetWrapper, Root } from './styled'\nimport { SingleSideStakingInfo } from 'src/state/stake/hooks'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from 'src/state/transactions/hooks'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useTranslation } from 'react-i18next'\nimport { useStakingContract } from 'src/hooks/useContract'\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted'\nimport Loader from 'src/components/Beta/Loader'\n\ninterface ClaimProps {\n  stakingInfo: SingleSideStakingInfo\n  onClose: () => void\n  onClickRewardStake?: () => void\n}\n\nconst ClaimWidget = ({ stakingInfo, onClose, onClickRewardStake }: ClaimProps) => {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onClose()\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onClaimReward() {\n    if (stakingContract && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      await stakingContract\n        .getReward({ gasLimit: 350000 })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.claimAccumulated', { symbol: stakingInfo?.rewardToken?.symbol })\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n          console.log(error)\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <WidgetWrapper>\n      {!attempting && !hash && (\n        <Root>\n          <Box textAlign=\"center\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n            <Text fontSize=\"26px\" fontWeight={500} color=\"text1\">\n              {stakingInfo?.earnedAmount?.toSignificant(6)}\n            </Text>\n\n            <Text fontSize=\"16px\" color=\"text1\">\n              {t('earn.unclaimedReward', { symbol: stakingInfo?.rewardToken?.symbol })}\n            </Text>\n\n            <Text fontSize=\"14px\" color=\"text2\" textAlign=\"center\" mt={20}>\n              Claim your rewards\n            </Text>\n          </Box>\n          <Box mt={'10px'}>\n            <Button variant=\"primary\" isDisabled={!!error} onClick={onClaimReward} padding=\"15px 18px\">\n              {error ?? t('earnPage.claim')}\n            </Button>\n          </Box>\n        </Root>\n      )}\n\n      {attempting && !hash && <Loader size={100} label=\"Claiming...\" />}\n\n      {hash && (\n        <TransactionCompleted\n          onClose={wrappedOnDismiss}\n          submitText=\"Your rewards claimed\"\n          isShowButtton={true}\n          onButtonClick={() => onClickRewardStake && onClickRewardStake()}\n          buttonText=\"Stake\"\n        />\n      )}\n    </WidgetWrapper>\n  )\n}\nexport default ClaimWidget\n"]},"metadata":{},"sourceType":"module"}