{"ast":null,"code":"export var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nexport function extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled = void 0;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../src/tracing.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,kBAAkB,GAAG,IAAI,MAAJ,CAChC,aAAa;AACX,iBADF,GACsB;AACpB,mBAFF,GAEwB;AACtB,WAHF,GAGgB;AACd,UAL8B,CAA3B;AAQP;;;;;;AAMG;;AACH,OAAM,SAAU,sBAAV,CAAiC,WAAjC,EAAoD;AACxD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAZ,CAAkB,kBAAlB,CAAhB;;AACA,MAAI,OAAJ,EAAa;AACX,QAAI,aAAa,GAAA,KAAA,CAAjB;;AACA,QAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AACtB,MAAA,aAAa,GAAG,IAAhB;AACD,KAFD,MAEO,IAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AAC7B,MAAA,aAAa,GAAG,KAAhB;AACD;;AACD,WAAO;AACL,MAAA,OAAO,EAAE,OAAO,CAAC,CAAD,CADX;AAEL,MAAA,aAAa,EAAA,aAFR;AAGL,MAAA,YAAY,EAAE,OAAO,CAAC,CAAD;AAHhB,KAAP;AAKD;;AACD,SAAO,SAAP;AACD","sourcesContent":["import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}