{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { isPrimitive } from './is';\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\n\nexport function createEnvelope(headers, items) {\n  if (items === void 0) {\n    items = [];\n  }\n\n  return [headers, items];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\n\nexport function addItemToEnvelope(envelope, newItem) {\n  var _a = __read(envelope, 2),\n      headers = _a[0],\n      items = _a[1];\n\n  return [headers, __spread(items, [newItem])];\n}\n/**\n * Serializes an envelope into a string.\n */\n\nexport function serializeEnvelope(envelope) {\n  var _a = __read(envelope, 2),\n      headers = _a[0],\n      items = _a[1];\n\n  var serializedHeaders = JSON.stringify(headers); // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return items.reduce(function (acc, item) {\n    var _a = __read(item, 2),\n        itemHeaders = _a[0],\n        payload = _a[1]; // We do not serialize payloads that are primitives\n\n\n    var serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return acc + \"\\n\" + JSON.stringify(itemHeaders) + \"\\n\" + serializedPayload;\n  }, serializedHeaders);\n}","map":{"version":3,"sources":["../src/envelope.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,MAA5B;AAEA;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CAA6C,OAA7C,EAA4D,KAA5D,EAA4E;AAAhB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAAgB;;AAChF,SAAO,CAAC,OAAD,EAAU,KAAV,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAAgD,QAAhD,EAA6D,OAA7D,EAAkF;AAChF,MAAA,EAAA,GAAA,MAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,MAAC,OAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAU,KAAA,GAAA,EAAA,CAAA,CAAA,CAAV;;AACN,SAAO,CAAC,OAAD,EAAQ,QAAA,CAAM,KAAN,EAAW,CAAE,OAAF,CAAX,CAAR,CAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,QAA5B,EAA8C;AAC5C,MAAA,EAAA,GAAA,MAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,MAAC,OAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAU,KAAA,GAAA,EAAA,CAAA,CAAA,CAAV;;AACN,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,CAFkD,CAIlD;AACA;AACA;AACA;AACA;;AACA,SAAQ,KAAe,CAAC,MAAhB,CAAuB,UAAC,GAAD,EAAM,IAAN,EAAgC;AACvD,QAAA,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,QAAC,WAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAc,OAAA,GAAA,EAAA,CAAA,CAAA,CAAd,CADuD,CAE7D;;;AACA,QAAM,iBAAiB,GAAG,WAAW,CAAC,OAAD,CAAX,GAAuB,MAAM,CAAC,OAAD,CAA7B,GAAyC,IAAI,CAAC,SAAL,CAAe,OAAf,CAAnE;AACA,WAAU,GAAG,GAAA,IAAH,GAAQ,IAAI,CAAC,SAAL,CAAe,WAAf,CAAR,GAAmC,IAAnC,GAAwC,iBAAlD;AACD,GALO,EAKL,iBALK,CAAR;AAMD","sourcesContent":["import { Envelope } from '@sentry/types';\n\nimport { isPrimitive } from './is';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Serializes an envelope into a string.\n */\nexport function serializeEnvelope(envelope: Envelope): string {\n  const [headers, items] = envelope;\n  const serializedHeaders = JSON.stringify(headers);\n\n  // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (items as any[]).reduce((acc, item: typeof items[number]) => {\n    const [itemHeaders, payload] = item;\n    // We do not serialize payloads that are primitives\n    const serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return `${acc}\\n${JSON.stringify(itemHeaders)}\\n${serializedPayload}`;\n  }, serializedHeaders);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}