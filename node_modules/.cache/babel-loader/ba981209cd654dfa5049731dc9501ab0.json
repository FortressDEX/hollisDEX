{"ast":null,"code":"import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@pangolindex/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport ReactGA from 'react-ga';\nimport { addPopup } from '../application/actions';\nimport { acceptListUpdate } from './actions';\nimport { DEFAULT_TOKEN_LISTS } from '../../constants/lists';\nexport default function Updater() {\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.byUrl);\n  const isWindowVisible = useIsWindowVisible();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        const isDefaultList = DEFAULT_TOKEN_LISTS.includes(listUrl);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens); // automatically update minor/patch as long as bump matches the min update\n\n            if (bump >= min) {\n              if (isDefaultList) {\n                // if its pangolin hosted token list then we will autoupdate it\n                ReactGA.event({\n                  category: 'Lists',\n                  action: 'Update List from Popup',\n                  label: listUrl\n                });\n                dispatch(acceptListUpdate(listUrl));\n              } else {\n                // show prompts for user added token list\n                dispatch(addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true\n                    }\n                  }\n                }));\n              }\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n\n            break;\n\n          case VersionUpgrade.MAJOR:\n            if (isDefaultList) {\n              // if its pangolin hosted token list then we will autoupdate it\n              ReactGA.event({\n                category: 'Lists',\n                action: 'Update List from Popup',\n                label: listUrl\n              });\n              dispatch(acceptListUpdate(listUrl));\n            } else {\n              // show prompts for user added token list\n              dispatch(addPopup({\n                key: listUrl,\n                content: {\n                  listUpdate: {\n                    listUrl,\n                    auto: false,\n                    oldList: list.current,\n                    newList: list.pendingUpdate\n                  }\n                },\n                removeAfterMs: null\n              }));\n            }\n\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","ReactGA","addPopup","acceptListUpdate","DEFAULT_TOKEN_LISTS","Updater","library","dispatch","lists","state","byUrl","isWindowVisible","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","isDefaultList","includes","NONE","Error","PATCH","MINOR","min","tokens","event","category","action","label","key","content","listUpdate","oldList","newList","auto","MAJOR","removeAfterMs"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@pangolindex/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport ReactGA from 'react-ga'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate } from './actions'\nimport { DEFAULT_TOKEN_LISTS } from '../../constants/lists'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n\n  const isWindowVisible = useIsWindowVisible()\n\n  const fetchList = useFetchListCallback()\n\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        const isDefaultList = DEFAULT_TOKEN_LISTS.includes(listUrl)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              if (isDefaultList) {\n                // if its pangolin hosted token list then we will autoupdate it\n                ReactGA.event({\n                  category: 'Lists',\n                  action: 'Update List from Popup',\n                  label: listUrl\n                })\n                dispatch(acceptListUpdate(listUrl))\n              } else {\n                // show prompts for user added token list\n                dispatch(\n                  addPopup({\n                    key: listUrl,\n                    content: {\n                      listUpdate: {\n                        listUrl,\n                        oldList: list.current,\n                        newList: list.pendingUpdate,\n                        auto: true\n                      }\n                    }\n                  })\n                )\n              }\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          case VersionUpgrade.MAJOR:\n            if (isDefaultList) {\n              // if its pangolin hosted token list then we will autoupdate it\n              ReactGA.event({\n                category: 'Lists',\n                action: 'Update List from Popup',\n                label: listUrl\n              })\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              // show prompts for user added token list\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      auto: false,\n                      oldList: list.current,\n                      newList: list.pendingUpdate\n                    }\n                  },\n                  removeAfterMs: null\n                })\n              )\n            }\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}