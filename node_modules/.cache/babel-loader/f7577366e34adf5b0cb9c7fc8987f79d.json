{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n/** Extract sdk info from from the API metadata */\n\nfunction getSdkMetadataForEnvelopeHeader(api) {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n\n  var _a = api.metadata.sdk,\n      name = _a.name,\n      version = _a.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\n\n\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = __spread(event.sdk.integrations || [], sdkInfo.integrations || []);\n  event.sdk.packages = __spread(event.sdk.packages || [], sdkInfo.packages || []);\n  return event;\n}\n/** Creates a SentryRequest from a Session. */\n\n\nexport function sessionToSentryRequest(session, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n\n  var envelopeHeaders = __assign(__assign({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  }); // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n\n\n  var type = 'aggregates' in session ? 'sessions' : 'session'; // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n\n  var envelopeItem = [{\n    type: type\n  }, session];\n  var envelope = createEnvelope(envelopeHeaders, [envelopeItem]);\n  return {\n    body: serializeEnvelope(envelope),\n    type: type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n  };\n}\n/** Creates a SentryRequest from an event. */\n\nexport function eventToSentryRequest(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var useEnvelope = eventType === 'transaction' || !!api.tunnel;\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n\n  var _a = transactionSampling || {},\n      samplingMethod = _a.method,\n      sampleRate = _a.rate; // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n\n\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {}; // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  } // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n\n\n  delete event.sdkProcessingMetadata;\n  var body;\n\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      var innerErr = newErr;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: {\n          message: innerErr.message,\n          stack: innerErr.stack\n        }\n      });\n    }\n  }\n\n  var req = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body: body,\n    type: eventType,\n    url: useEnvelope ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel) : getStoreEndpointWithUrlEncodedAuth(api.dsn)\n  }; // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n\n  if (useEnvelope) {\n    var envelopeHeaders = __assign(__assign({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    }, sdkInfo && {\n      sdk: sdkInfo\n    }), !!api.tunnel && {\n      dsn: dsnToString(api.dsn)\n    });\n\n    var eventItem = [{\n      type: eventType,\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    }, req.body];\n    var envelope = createEnvelope(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}","map":{"version":3,"sources":["../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}