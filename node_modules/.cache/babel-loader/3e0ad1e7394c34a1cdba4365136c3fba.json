{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TXs = void 0;\n\nconst methods_1 = require(\"../communication/methods\");\n\nclass TXs {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash) {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send(methods_1.Methods.getTxBySafeTxHash, {\n      safeTxHash\n    });\n    return response.data;\n  }\n\n  async signMessage(message) {\n    const messagePayload = {\n      message\n    };\n    const response = await this.communicator.send(methods_1.Methods.signMessage, messagePayload);\n    return response.data;\n  }\n\n  async send(_ref) {\n    let {\n      txs,\n      params\n    } = _ref;\n\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params\n    };\n    const response = await this.communicator.send(methods_1.Methods.sendTransactions, messagePayload);\n    return response.data;\n  }\n\n}\n\nexports.TXs = TXs;","map":{"version":3,"sources":["../../../src/txs/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAUA,MAAM,GAAN,CAAS;AAGP,EAAA,WAAA,CAAY,YAAZ,EAAsC;AACpC,SAAK,YAAL,GAAoB,YAApB;AACD;;AAEoB,QAAf,eAAe,CAAC,UAAD,EAAmB;AACtC,QAAI,CAAC,UAAL,EAAiB;AACf,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,UAAM,QAAQ,GAAG,MAAM,KAAK,YAAL,CAAkB,IAAlB,CAIrB,SAAA,CAAA,OAAA,CAAQ,iBAJa,EAIM;AAAE,MAAA;AAAF,KAJN,CAAvB;AAMA,WAAO,QAAQ,CAAC,IAAhB;AACD;;AAEgB,QAAX,WAAW,CAAC,OAAD,EAAgB;AAC/B,UAAM,cAAc,GAAG;AACrB,MAAA;AADqB,KAAvB;AAIA,UAAM,QAAQ,GAAG,MAAM,KAAK,YAAL,CAAkB,IAAlB,CACrB,SAAA,CAAA,OAAA,CAAQ,WADa,EAErB,cAFqB,CAAvB;AAKA,WAAO,QAAQ,CAAC,IAAhB;AACD;;AAES,QAAJ,IAAI,OAAwC;AAAA,QAAvC;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,KAAuC;;AAChD,QAAI,CAAC,GAAD,IAAQ,CAAC,GAAG,CAAC,MAAjB,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAM,cAAc,GAAG;AACrB,MAAA,GADqB;AAErB,MAAA;AAFqB,KAAvB;AAKA,UAAM,QAAQ,GAAG,MAAM,KAAK,YAAL,CAAkB,IAAlB,CAIrB,SAAA,CAAA,OAAA,CAAQ,gBAJa,EAIK,cAJL,CAAvB;AAMA,WAAO,QAAQ,CAAC,IAAhB;AACD;;AAnDM;;AAsDA,OAAA,CAAA,GAAA,GAAA,GAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TXs = void 0;\nconst methods_1 = require(\"../communication/methods\");\nclass TXs {\n    constructor(communicator) {\n        this.communicator = communicator;\n    }\n    async getBySafeTxHash(safeTxHash) {\n        if (!safeTxHash) {\n            throw new Error('Invalid safeTxHash');\n        }\n        const response = await this.communicator.send(methods_1.Methods.getTxBySafeTxHash, { safeTxHash });\n        return response.data;\n    }\n    async signMessage(message) {\n        const messagePayload = {\n            message,\n        };\n        const response = await this.communicator.send(methods_1.Methods.signMessage, messagePayload);\n        return response.data;\n    }\n    async send({ txs, params }) {\n        if (!txs || !txs.length) {\n            throw new Error('No transactions were passed');\n        }\n        const messagePayload = {\n            txs,\n            params,\n        };\n        const response = await this.communicator.send(methods_1.Methods.sendTransactions, messagePayload);\n        return response.data;\n    }\n}\nexports.TXs = TXs;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}