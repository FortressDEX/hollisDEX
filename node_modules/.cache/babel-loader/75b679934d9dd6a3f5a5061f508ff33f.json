{"ast":null,"code":"import { __read } from \"tslib\"; // global reference to slice\n\nvar UNKNOWN_FUNCTION = '?';\nvar OPERA10_PRIORITY = 10;\nvar OPERA11_PRIORITY = 20;\nvar CHROME_PRIORITY = 30;\nvar WINJS_PRIORITY = 40;\nvar GECKO_PRIORITY = 50;\n\nfunction createFrame(filename, func, lineno, colno) {\n  var frame = {\n    filename: filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n} // Chromium based browsers: Chrome, Brave, new Opera, new Edge\n\n\nvar chromeRegex = /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nvar chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nvar chrome = function (line) {\n  var parts = chromeRegex.exec(line);\n\n  if (parts) {\n    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      var subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n\n        parts[3] = subMatch[2]; // line\n\n        parts[4] = subMatch[3]; // column\n      }\n    } // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n\n\n    var _a = __read(extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]), 2),\n        func = _a[0],\n        filename = _a[1];\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport var chromeStackParser = [CHROME_PRIORITY, chrome]; // gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\n\nvar geckoREgex = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nvar gecko = function (line) {\n  var _a;\n\n  var parts = geckoREgex.exec(line);\n\n  if (parts) {\n    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n\n    if (isEval) {\n      var subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    var filename = parts[3];\n    var func = parts[1] || UNKNOWN_FUNCTION;\n    _a = __read(extractSafariExtensionDetails(func, filename), 2), func = _a[0], filename = _a[1];\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport var geckoStackParser = [GECKO_PRIORITY, gecko];\nvar winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nvar winjs = function (line) {\n  var parts = winjsRegex.exec(line);\n  return parts ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined) : undefined;\n};\n\nexport var winjsStackParser = [WINJS_PRIORITY, winjs];\nvar opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nvar opera10 = function (line) {\n  var parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport var opera10StackParser = [OPERA10_PRIORITY, opera10];\nvar opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nvar opera11 = function (line) {\n  var parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport var opera11StackParser = [OPERA11_PRIORITY, opera11];\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\n\nvar extractSafariExtensionDetails = function (func, filename) {\n  var isSafariExtension = func.indexOf('safari-extension') !== -1;\n  var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n  return isSafariExtension || isSafariWebExtension ? [func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION, isSafariExtension ? \"safari-extension:\" + filename : \"safari-web-extension:\" + filename] : [func, filename];\n};","map":{"version":3,"sources":["../../src/stack-parsers.ts"],"names":[],"mappings":"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","sourcesContent":["import { StackFrame } from '@sentry/types';\nimport { StackLineParser, StackLineParserFn } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}