{"ast":null,"code":"import { CAVAX, Token, TokenAmount, WAVAX } from '@pangolindex/sdk';\nexport function wrappedCurrency(currency, chainId) {\n  return chainId && currency === CAVAX[chainId] ? WAVAX[chainId] : currency instanceof Token ? currency : undefined;\n}\nexport function wrappedCurrencyAmount(currencyAmount, chainId) {\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined;\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined;\n}\nexport function unwrappedToken(token, chainId) {\n  var _token$equals;\n\n  if (token === null || token === void 0 ? void 0 : (_token$equals = token.equals) === null || _token$equals === void 0 ? void 0 : _token$equals.call(token, WAVAX[token.chainId])) return CAVAX[chainId];\n  return token;\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/utils/wrappedCurrency.ts"],"names":["CAVAX","Token","TokenAmount","WAVAX","wrappedCurrency","currency","chainId","undefined","wrappedCurrencyAmount","currencyAmount","token","raw","unwrappedToken","equals"],"mappings":"AAAA,SAA4CA,KAA5C,EAAmDC,KAAnD,EAA0DC,WAA1D,EAAuEC,KAAvE,QAAoF,kBAApF;AAEA,OAAO,SAASC,eAAT,CAAyBC,QAAzB,EAAyDC,OAAzD,EAA0G;AAC/G,SAAOA,OAAO,IAAID,QAAQ,KAAKL,KAAK,CAACM,OAAD,CAA7B,GAAyCH,KAAK,CAACG,OAAD,CAA9C,GAA0DD,QAAQ,YAAYJ,KAApB,GAA4BI,QAA5B,GAAuCE,SAAxG;AACD;AAED,OAAO,SAASC,qBAAT,CACLC,cADK,EAELH,OAFK,EAGoB;AACzB,QAAMI,KAAK,GAAGD,cAAc,IAAIH,OAAlB,GAA4BF,eAAe,CAACK,cAAc,CAACJ,QAAhB,EAA0BC,OAA1B,CAA3C,GAAgFC,SAA9F;AACA,SAAOG,KAAK,IAAID,cAAT,GAA0B,IAAIP,WAAJ,CAAgBQ,KAAhB,EAAuBD,cAAc,CAACE,GAAtC,CAA1B,GAAuEJ,SAA9E;AACD;AAED,OAAO,SAASK,cAAT,CAAwBF,KAAxB,EAAsCJ,OAAtC,EAA0E;AAAA;;AAC/E,MAAII,KAAJ,aAAIA,KAAJ,wCAAIA,KAAK,CAAEG,MAAX,kDAAI,mBAAAH,KAAK,EAAWP,KAAK,CAACO,KAAK,CAACJ,OAAP,CAAhB,CAAT,EAA2C,OAAON,KAAK,CAACM,OAAD,CAAZ;AAC3C,SAAOI,KAAP;AACD","sourcesContent":["import { ChainId, Currency, CurrencyAmount, CAVAX, Token, TokenAmount, WAVAX } from '@pangolindex/sdk'\n\nexport function wrappedCurrency(currency: Currency | undefined, chainId: ChainId | undefined): Token | undefined {\n  return chainId && currency === CAVAX[chainId] ? WAVAX[chainId] : currency instanceof Token ? currency : undefined\n}\n\nexport function wrappedCurrencyAmount(\n  currencyAmount: CurrencyAmount | undefined,\n  chainId: ChainId | undefined\n): TokenAmount | undefined {\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined\n}\n\nexport function unwrappedToken(token: Token, chainId: ChainId): Currency | Token {\n  if (token?.equals?.(WAVAX[token.chainId])) return CAVAX[chainId]\n  return token\n}\n"]},"metadata":{},"sourceType":"module"}