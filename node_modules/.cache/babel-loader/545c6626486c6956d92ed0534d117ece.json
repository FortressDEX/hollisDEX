{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@pangolindex/token-lists';\nimport { DEFAULT_TOKEN_LISTS, DEFAULT_TOKEN_LISTS_SELECTED } from '../../constants/lists';\nimport { updateVersion } from '../global/actions';\nimport { acceptListUpdate, addList, fetchTokenList, removeList, selectList } from './actions';\nconst NEW_LIST_STATE = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n};\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_TOKEN_LISTS,\n  byUrl: { ...DEFAULT_TOKEN_LISTS.reduce((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE;\n      return memo;\n    }, {})\n  },\n  selectedListUrl: DEFAULT_TOKEN_LISTS_SELECTED\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchTokenList.pending, (state, _ref) => {\n  let {\n    payload: {\n      requestId,\n      url\n    }\n  } = _ref;\n  state.byUrl[url] = {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    current: null,\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    pendingUpdate: null,\n    ...state.byUrl[url],\n    loadingRequestId: requestId,\n    error: null\n  };\n}).addCase(fetchTokenList.fulfilled, (state, _ref2) => {\n  var _state$byUrl$url, _state$byUrl$url2;\n\n  let {\n    payload: {\n      requestId,\n      tokenList,\n      url\n    }\n  } = _ref2;\n  const current = (_state$byUrl$url = state.byUrl[url]) === null || _state$byUrl$url === void 0 ? void 0 : _state$byUrl$url.current;\n  const loadingRequestId = (_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.loadingRequestId; // no-op if update does nothing\n\n  if (current) {\n    const upgradeType = getVersionUpgrade(current.version, tokenList.version);\n    if (upgradeType === VersionUpgrade.NONE) return;\n\n    if (loadingRequestId === null || loadingRequestId === requestId) {\n      state.byUrl[url] = { ...state.byUrl[url],\n        loadingRequestId: null,\n        error: null,\n        current: current,\n        pendingUpdate: tokenList\n      };\n    }\n  } else {\n    state.byUrl[url] = { ...state.byUrl[url],\n      loadingRequestId: null,\n      error: null,\n      current: tokenList,\n      pendingUpdate: null\n    };\n  }\n}).addCase(fetchTokenList.rejected, (state, _ref3) => {\n  var _state$byUrl$url3;\n\n  let {\n    payload: {\n      url,\n      requestId,\n      errorMessage\n    }\n  } = _ref3;\n\n  if (((_state$byUrl$url3 = state.byUrl[url]) === null || _state$byUrl$url3 === void 0 ? void 0 : _state$byUrl$url3.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    loadingRequestId: null,\n    error: errorMessage,\n    current: null,\n    pendingUpdate: null\n  };\n}).addCase(selectList, (state, _ref4) => {\n  let {\n    payload: {\n      url,\n      shouldSelect\n    }\n  } = _ref4;\n  const existingSelectedListUrl = [].concat(state.selectedListUrl || []);\n\n  if (shouldSelect) {\n    // if user want to select the list, then just push it into selected array\n    existingSelectedListUrl.push(url);\n    state.selectedListUrl = existingSelectedListUrl;\n  } else {\n    const index = existingSelectedListUrl.indexOf(url);\n\n    if (index !== -1) {\n      if ((existingSelectedListUrl === null || existingSelectedListUrl === void 0 ? void 0 : existingSelectedListUrl.length) === 1) {\n        // if user want to deselect the list and if there is only one item in the list\n        state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED;\n      } else {\n        existingSelectedListUrl.splice(index, 1);\n        state.selectedListUrl = existingSelectedListUrl;\n      }\n    }\n  } // automatically adds list\n\n\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(addList, (state, _ref5) => {\n  let {\n    payload: url\n  } = _ref5;\n\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(removeList, (state, _ref6) => {\n  let {\n    payload: url\n  } = _ref6;\n\n  if (state.byUrl[url]) {\n    delete state.byUrl[url];\n  }\n\n  const existingList = [].concat(state.selectedListUrl || []);\n  const index = existingList.indexOf(url);\n\n  if (index !== -1) {\n    if ((existingList === null || existingList === void 0 ? void 0 : existingList.length) === 1) {\n      // if user want to remove the list and if there is only one item in the selected list\n      state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED;\n    } else {\n      existingList.splice(index, 1);\n      state.selectedListUrl = existingList;\n    }\n  }\n}).addCase(acceptListUpdate, (state, _ref7) => {\n  var _state$byUrl$url4;\n\n  let {\n    payload: url\n  } = _ref7;\n\n  if (!((_state$byUrl$url4 = state.byUrl[url]) === null || _state$byUrl$url4 === void 0 ? void 0 : _state$byUrl$url4.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    pendingUpdate: null,\n    current: state.byUrl[url].pendingUpdate\n  };\n}).addCase(updateVersion, state => {\n  // state loaded from localStorage, but new lists have never been initialized\n  if (!state.lastInitializedDefaultListOfLists) {\n    state.byUrl = initialState.byUrl;\n    state.selectedListUrl = initialState.selectedListUrl;\n  } else if (state.lastInitializedDefaultListOfLists) {\n    // Safeguard for legacy data maintained before multiple lists could be selected\n    if (typeof state.selectedListUrl === 'string') state.selectedListUrl = [state.selectedListUrl];\n    const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l) => s.add(l), new Set());\n    const newListOfListsSet = DEFAULT_TOKEN_LISTS.reduce((s, l) => s.add(l), new Set()); // Detected addition of default token lists\n\n    DEFAULT_TOKEN_LISTS.forEach(listUrl => {\n      if (!lastInitializedSet.has(listUrl)) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n\n        if (DEFAULT_TOKEN_LISTS_SELECTED.includes(listUrl)) {\n          if (!state.selectedListUrl || !state.selectedListUrl.includes(listUrl)) {\n            state.selectedListUrl = (state.selectedListUrl || []).concat([listUrl]);\n          }\n        }\n      }\n    }); // Detected removal of default token lists\n\n    state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n      if (!newListOfListsSet.has(listUrl)) {\n        delete state.byUrl[listUrl];\n\n        if (!!state.selectedListUrl && state.selectedListUrl.includes(listUrl)) {\n          state.selectedListUrl = state.selectedListUrl.filter(url => url !== listUrl);\n\n          if (state.selectedListUrl.length === 0) {\n            state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED;\n          }\n        }\n      }\n    });\n  }\n\n  state.lastInitializedDefaultListOfLists = DEFAULT_TOKEN_LISTS;\n\n  if (!state.selectedListUrl) {\n    state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED;\n    DEFAULT_TOKEN_LISTS.forEach(listUrl => {\n      if (!state.byUrl[listUrl]) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n    });\n  }\n}));","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","DEFAULT_TOKEN_LISTS","DEFAULT_TOKEN_LISTS_SELECTED","updateVersion","acceptListUpdate","addList","fetchTokenList","removeList","selectList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","selectedListUrl","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","upgradeType","version","NONE","rejected","errorMessage","shouldSelect","existingSelectedListUrl","concat","push","index","indexOf","length","splice","existingList","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has","includes","filter"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,0BAAlD;AAEA,SAASC,mBAAT,EAA8BC,4BAA9B,QAAkE,uBAAlE;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,gBAAT,EAA2BC,OAA3B,EAAoCC,cAApC,EAAoDC,UAApD,EAAgEC,UAAhE,QAAkF,WAAlF;AAkBA,MAAMC,cAAyB,GAAG;AAChCC,EAAAA,KAAK,EAAE,IADyB;AAEhCC,EAAAA,OAAO,EAAE,IAFuB;AAGhCC,EAAAA,gBAAgB,EAAE,IAHc;AAIhCC,EAAAA,aAAa,EAAE;AAJiB,CAAlC;AASA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,iCAAiC,EAAEd,mBADJ;AAE/Be,EAAAA,KAAK,EAAE,EACL,GAAGf,mBAAmB,CAACgB,MAApB,CAAyD,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC7ED,MAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBV,cAAhB;AACA,aAAOS,IAAP;AACD,KAHE,EAGA,EAHA;AADE,GAFwB;AAQ/BE,EAAAA,eAAe,EAAElB;AARc,CAAjC;AAWA,eAAeJ,aAAa,CAACgB,YAAD,EAAeO,OAAO,IAChDA,OAAO,CACJC,OADH,CACWhB,cAAc,CAACiB,OAD1B,EACmC,CAACC,KAAD,WAA4C;AAAA,MAApC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb;AAAX,GAAoC;AAC3EH,EAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmB;AACjB;AACA;AACAhB,IAAAA,OAAO,EAAE,IAHQ;AAIjB;AACA;AACAE,IAAAA,aAAa,EAAE,IANE;AAOjB,OAAGW,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAPc;AAQjBf,IAAAA,gBAAgB,EAAEc,SARD;AASjBhB,IAAAA,KAAK,EAAE;AATU,GAAnB;AAWD,CAbH,EAcGY,OAdH,CAcWhB,cAAc,CAACsB,SAd1B,EAcqC,CAACJ,KAAD,YAAuD;AAAA;;AAAA,MAA/C;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAF;AAAaG,MAAAA,SAAb;AAAwBF,MAAAA;AAAxB;AAAX,GAA+C;AACxF,QAAMhB,OAAO,uBAAGa,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAH,qDAAG,iBAAkBhB,OAAlC;AACA,QAAMC,gBAAgB,wBAAGY,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAH,sDAAG,kBAAkBf,gBAA3C,CAFwF,CAIxF;;AACA,MAAID,OAAJ,EAAa;AACX,UAAMmB,WAAW,GAAG/B,iBAAiB,CAACY,OAAO,CAACoB,OAAT,EAAkBF,SAAS,CAACE,OAA5B,CAArC;AACA,QAAID,WAAW,KAAK9B,cAAc,CAACgC,IAAnC,EAAyC;;AACzC,QAAIpB,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAKc,SAAtD,EAAiE;AAC/DF,MAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmB,EACjB,GAAGH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADc;AAEjBf,QAAAA,gBAAgB,EAAE,IAFD;AAGjBF,QAAAA,KAAK,EAAE,IAHU;AAIjBC,QAAAA,OAAO,EAAEA,OAJQ;AAKjBE,QAAAA,aAAa,EAAEgB;AALE,OAAnB;AAOD;AACF,GAZD,MAYO;AACLL,IAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmB,EACjB,GAAGH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADc;AAEjBf,MAAAA,gBAAgB,EAAE,IAFD;AAGjBF,MAAAA,KAAK,EAAE,IAHU;AAIjBC,MAAAA,OAAO,EAAEkB,SAJQ;AAKjBhB,MAAAA,aAAa,EAAE;AALE,KAAnB;AAOD;AACF,CAxCH,EAyCGS,OAzCH,CAyCWhB,cAAc,CAAC2B,QAzC1B,EAyCoC,CAACT,KAAD,YAA0D;AAAA;;AAAA,MAAlD;AAAEC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,GAAF;AAAOD,MAAAA,SAAP;AAAkBQ,MAAAA;AAAlB;AAAX,GAAkD;;AAC1F,MAAI,sBAAAV,KAAK,CAACR,KAAN,CAAYW,GAAZ,yEAAkBf,gBAAlB,MAAuCc,SAA3C,EAAsD;AACpD;AACA;AACD;;AAEDF,EAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmB,EACjB,GAAGH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADc;AAEjBf,IAAAA,gBAAgB,EAAE,IAFD;AAGjBF,IAAAA,KAAK,EAAEwB,YAHU;AAIjBvB,IAAAA,OAAO,EAAE,IAJQ;AAKjBE,IAAAA,aAAa,EAAE;AALE,GAAnB;AAOD,CAtDH,EAuDGS,OAvDH,CAuDWd,UAvDX,EAuDuB,CAACgB,KAAD,YAA+C;AAAA,MAAvC;AAAEC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,GAAF;AAAOQ,MAAAA;AAAP;AAAX,GAAuC;AAClE,QAAMC,uBAAuB,GAAI,EAAD,CAAiBC,MAAjB,CAAwBb,KAAK,CAACJ,eAAN,IAAyB,EAAjD,CAAhC;;AACA,MAAIe,YAAJ,EAAkB;AAChB;AACAC,IAAAA,uBAAuB,CAACE,IAAxB,CAA6BX,GAA7B;AACAH,IAAAA,KAAK,CAACJ,eAAN,GAAwBgB,uBAAxB;AACD,GAJD,MAIO;AACL,UAAMG,KAAK,GAAGH,uBAAuB,CAACI,OAAxB,CAAgCb,GAAhC,CAAd;;AAEA,QAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAI,CAAAH,uBAAuB,SAAvB,IAAAA,uBAAuB,WAAvB,YAAAA,uBAAuB,CAAEK,MAAzB,MAAoC,CAAxC,EAA2C;AACzC;AACAjB,QAAAA,KAAK,CAACJ,eAAN,GAAwBlB,4BAAxB;AACD,OAHD,MAGO;AACLkC,QAAAA,uBAAuB,CAACM,MAAxB,CAA+BH,KAA/B,EAAsC,CAAtC;AACAf,QAAAA,KAAK,CAACJ,eAAN,GAAwBgB,uBAAxB;AACD;AACF;AACF,GAlBiE,CAoBlE;;;AACA,MAAI,CAACZ,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAL,EAAuB;AACrBH,IAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmBlB,cAAnB;AACD;AACF,CA/EH,EAgFGa,OAhFH,CAgFWjB,OAhFX,EAgFoB,CAACmB,KAAD,YAA6B;AAAA,MAArB;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAqB;;AAC7C,MAAI,CAACH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAL,EAAuB;AACrBH,IAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmBlB,cAAnB;AACD;AACF,CApFH,EAqFGa,OArFH,CAqFWf,UArFX,EAqFuB,CAACiB,KAAD,YAA6B;AAAA,MAArB;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAqB;;AAChD,MAAIH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAJ,EAAsB;AACpB,WAAOH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAP;AACD;;AAED,QAAMgB,YAAY,GAAI,EAAD,CAAiBN,MAAjB,CAAwBb,KAAK,CAACJ,eAAN,IAAyB,EAAjD,CAArB;AACA,QAAMmB,KAAK,GAAGI,YAAY,CAACH,OAAb,CAAqBb,GAArB,CAAd;;AAEA,MAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAI,CAAAI,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEF,MAAd,MAAyB,CAA7B,EAAgC;AAC9B;AACAjB,MAAAA,KAAK,CAACJ,eAAN,GAAwBlB,4BAAxB;AACD,KAHD,MAGO;AACLyC,MAAAA,YAAY,CAACD,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACAf,MAAAA,KAAK,CAACJ,eAAN,GAAwBuB,YAAxB;AACD;AACF;AACF,CAtGH,EAuGGrB,OAvGH,CAuGWlB,gBAvGX,EAuG6B,CAACoB,KAAD,YAA6B;AAAA;;AAAA,MAArB;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAqB;;AACtD,MAAI,uBAACH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAD,sDAAC,kBAAkBd,aAAnB,CAAJ,EAAsC;AACpC,UAAM,IAAI+B,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACDpB,EAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,IAAmB,EACjB,GAAGH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADc;AAEjBd,IAAAA,aAAa,EAAE,IAFE;AAGjBF,IAAAA,OAAO,EAAEa,KAAK,CAACR,KAAN,CAAYW,GAAZ,EAAiBd;AAHT,GAAnB;AAKD,CAhHH,EAiHGS,OAjHH,CAiHWnB,aAjHX,EAiH0BqB,KAAK,IAAI;AAC/B;AACA,MAAI,CAACA,KAAK,CAACT,iCAAX,EAA8C;AAC5CS,IAAAA,KAAK,CAACR,KAAN,GAAcF,YAAY,CAACE,KAA3B;AACAQ,IAAAA,KAAK,CAACJ,eAAN,GAAwBN,YAAY,CAACM,eAArC;AACD,GAHD,MAGO,IAAII,KAAK,CAACT,iCAAV,EAA6C;AAClD;AACA,QAAI,OAAOS,KAAK,CAACJ,eAAb,KAAiC,QAArC,EAA+CI,KAAK,CAACJ,eAAN,GAAwB,CAACI,KAAK,CAACJ,eAAP,CAAxB;AAE/C,UAAMyB,kBAAkB,GAAGrB,KAAK,CAACT,iCAAN,CAAwCE,MAAxC,CACzB,CAAC6B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,GAAF,CAAMD,CAAN,CADe,EAEzB,IAAIE,GAAJ,EAFyB,CAA3B;AAIA,UAAMC,iBAAiB,GAAGjD,mBAAmB,CAACgB,MAApB,CAAwC,CAAC6B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAlD,EAA4D,IAAIE,GAAJ,EAA5D,CAA1B,CARkD,CAUlD;;AACAhD,IAAAA,mBAAmB,CAACkD,OAApB,CAA4BhC,OAAO,IAAI;AACrC,UAAI,CAAC0B,kBAAkB,CAACO,GAAnB,CAAuBjC,OAAvB,CAAL,EAAsC;AACpCK,QAAAA,KAAK,CAACR,KAAN,CAAYG,OAAZ,IAAuBV,cAAvB;;AACA,YAAIP,4BAA4B,CAACmD,QAA7B,CAAsClC,OAAtC,CAAJ,EAAoD;AAClD,cAAI,CAACK,KAAK,CAACJ,eAAP,IAA0B,CAACI,KAAK,CAACJ,eAAN,CAAsBiC,QAAtB,CAA+BlC,OAA/B,CAA/B,EAAwE;AACtEK,YAAAA,KAAK,CAACJ,eAAN,GAAwB,CAACI,KAAK,CAACJ,eAAN,IAAyB,EAA1B,EAA8BiB,MAA9B,CAAqC,CAAClB,OAAD,CAArC,CAAxB;AACD;AACF;AACF;AACF,KATD,EAXkD,CAsBlD;;AACAK,IAAAA,KAAK,CAACT,iCAAN,CAAwCoC,OAAxC,CAAgDhC,OAAO,IAAI;AACzD,UAAI,CAAC+B,iBAAiB,CAACE,GAAlB,CAAsBjC,OAAtB,CAAL,EAAqC;AACnC,eAAOK,KAAK,CAACR,KAAN,CAAYG,OAAZ,CAAP;;AACA,YAAI,CAAC,CAACK,KAAK,CAACJ,eAAR,IAA2BI,KAAK,CAACJ,eAAN,CAAsBiC,QAAtB,CAA+BlC,OAA/B,CAA/B,EAAwE;AACtEK,UAAAA,KAAK,CAACJ,eAAN,GAAwBI,KAAK,CAACJ,eAAN,CAAsBkC,MAAtB,CAA6B3B,GAAG,IAAIA,GAAG,KAAKR,OAA5C,CAAxB;;AACA,cAAIK,KAAK,CAACJ,eAAN,CAAsBqB,MAAtB,KAAiC,CAArC,EAAwC;AACtCjB,YAAAA,KAAK,CAACJ,eAAN,GAAwBlB,4BAAxB;AACD;AACF;AACF;AACF,KAVD;AAWD;;AAEDsB,EAAAA,KAAK,CAACT,iCAAN,GAA0Cd,mBAA1C;;AAEA,MAAI,CAACuB,KAAK,CAACJ,eAAX,EAA4B;AAC1BI,IAAAA,KAAK,CAACJ,eAAN,GAAwBlB,4BAAxB;AACAD,IAAAA,mBAAmB,CAACkD,OAApB,CAA4BhC,OAAO,IAAI;AACrC,UAAI,CAACK,KAAK,CAACR,KAAN,CAAYG,OAAZ,CAAL,EAA2B;AACzBK,QAAAA,KAAK,CAACR,KAAN,CAAYG,OAAZ,IAAuBV,cAAvB;AACD;AACF,KAJD;AAKD;AACF,CApKH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@pangolindex/token-lists'\nimport { TokenList } from '@pangolindex/token-lists/dist/types'\nimport { DEFAULT_TOKEN_LISTS, DEFAULT_TOKEN_LISTS_SELECTED } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, fetchTokenList, removeList, selectList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n  readonly selectedListUrl: string[] | undefined\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_TOKEN_LISTS,\n  byUrl: {\n    ...DEFAULT_TOKEN_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {})\n  },\n  selectedListUrl: DEFAULT_TOKEN_LISTS_SELECTED\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      state.byUrl[url] = {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        current: null,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        pendingUpdate: null,\n        ...state.byUrl[url],\n        loadingRequestId: requestId,\n        error: null\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            ...state.byUrl[url],\n            loadingRequestId: null,\n            error: null,\n            current: current,\n            pendingUpdate: tokenList\n          }\n        }\n      } else {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: errorMessage,\n        current: null,\n        pendingUpdate: null\n      }\n    })\n    .addCase(selectList, (state, { payload: { url, shouldSelect } }) => {\n      const existingSelectedListUrl = ([] as string[]).concat(state.selectedListUrl || [])\n      if (shouldSelect) {\n        // if user want to select the list, then just push it into selected array\n        existingSelectedListUrl.push(url)\n        state.selectedListUrl = existingSelectedListUrl\n      } else {\n        const index = existingSelectedListUrl.indexOf(url)\n\n        if (index !== -1) {\n          if (existingSelectedListUrl?.length === 1) {\n            // if user want to deselect the list and if there is only one item in the list\n            state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED\n          } else {\n            existingSelectedListUrl.splice(index, 1)\n            state.selectedListUrl = existingSelectedListUrl\n          }\n        }\n      }\n\n      // automatically adds list\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n\n      const existingList = ([] as string[]).concat(state.selectedListUrl || [])\n      const index = existingList.indexOf(url)\n\n      if (index !== -1) {\n        if (existingList?.length === 1) {\n          // if user want to remove the list and if there is only one item in the selected list\n          state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED\n        } else {\n          existingList.splice(index, 1)\n          state.selectedListUrl = existingList\n        }\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate\n      }\n    })\n    .addCase(updateVersion, state => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.selectedListUrl = initialState.selectedListUrl\n      } else if (state.lastInitializedDefaultListOfLists) {\n        // Safeguard for legacy data maintained before multiple lists could be selected\n        if (typeof state.selectedListUrl === 'string') state.selectedListUrl = [state.selectedListUrl]\n\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_TOKEN_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        // Detected addition of default token lists\n        DEFAULT_TOKEN_LISTS.forEach(listUrl => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n            if (DEFAULT_TOKEN_LISTS_SELECTED.includes(listUrl)) {\n              if (!state.selectedListUrl || !state.selectedListUrl.includes(listUrl)) {\n                state.selectedListUrl = (state.selectedListUrl || []).concat([listUrl])\n              }\n            }\n          }\n        })\n\n        // Detected removal of default token lists\n        state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n            if (!!state.selectedListUrl && state.selectedListUrl.includes(listUrl)) {\n              state.selectedListUrl = state.selectedListUrl.filter(url => url !== listUrl)\n              if (state.selectedListUrl.length === 0) {\n                state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED\n              }\n            }\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_TOKEN_LISTS\n\n      if (!state.selectedListUrl) {\n        state.selectedListUrl = DEFAULT_TOKEN_LISTS_SELECTED\n        DEFAULT_TOKEN_LISTS.forEach(listUrl => {\n          if (!state.byUrl[listUrl]) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}