{"ast":null,"code":"export async function splitQuery(query, localClient, vars, list) {\n  let skipCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n\n  while (!allFound) {\n    let end = list.length;\n\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount;\n    }\n\n    const sliced = list.slice(skip, end);\n    const result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'cache-first'\n    });\n    fetchedData = { ...fetchedData,\n      ...result.data\n    };\n\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\n      allFound = true;\n    } else {\n      skip += skipCount;\n    }\n  }\n\n  return fetchedData;\n}\nexport async function crawlSingleQuery(query, queryField, localClient, localClientOptions, vars, pointer) {\n  let pointerField = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'timestamp';\n  let crawlingForward = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n  let limit = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1000;\n  let allResults = [];\n  let allFound = false;\n\n  while (!allFound) {\n    const result = await localClient.query({\n      query: query,\n      variables: { ...vars,\n        pointer\n      },\n      ...localClientOptions\n    });\n    allResults = crawlingForward ? allResults.concat(result.data[queryField]) : result.data[queryField].concat(allResults);\n\n    if (result.data[queryField].length < limit) {\n      allFound = true;\n    } else {\n      const newIndex = crawlingForward ? result.data[queryField].length - 1 : 0;\n      pointer = result.data[queryField][newIndex][pointerField];\n    }\n  }\n\n  return allResults;\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/utils/query.ts"],"names":["splitQuery","query","localClient","vars","list","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","result","fetchPolicy","data","Object","keys","crawlSingleQuery","queryField","localClientOptions","pointer","pointerField","crawlingForward","limit","allResults","variables","concat","newIndex"],"mappings":"AAAA,OAAO,eAAeA,UAAf,CAA0BC,KAA1B,EAAsCC,WAAtC,EAAwDC,IAAxD,EAAmEC,IAAnE,EAAsG;AAAA,MAAjBC,SAAiB,uEAAL,GAAK;AAC3G,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,SAAO,CAACD,QAAR,EAAkB;AAChB,QAAIE,GAAG,GAAGL,IAAI,CAACM,MAAf;;AACA,QAAIF,IAAI,GAAGH,SAAP,GAAmBD,IAAI,CAACM,MAA5B,EAAoC;AAClCD,MAAAA,GAAG,GAAGD,IAAI,GAAGH,SAAb;AACD;;AACD,UAAMM,MAAM,GAAGP,IAAI,CAACQ,KAAL,CAAWJ,IAAX,EAAiBC,GAAjB,CAAf;AACA,UAAMI,MAAM,GAAG,MAAMX,WAAW,CAACD,KAAZ,CAAkB;AACrCA,MAAAA,KAAK,EAAEA,KAAK,CAAC,GAAGE,IAAJ,EAAUQ,MAAV,CADyB;AAErCG,MAAAA,WAAW,EAAE;AAFwB,KAAlB,CAArB;AAIAR,IAAAA,WAAW,GAAG,EACZ,GAAGA,WADS;AAEZ,SAAGO,MAAM,CAACE;AAFE,KAAd;;AAIA,QAAIC,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACE,IAAnB,EAAyBL,MAAzB,GAAkCL,SAAlC,IAA+CG,IAAI,GAAGH,SAAP,GAAmBD,IAAI,CAACM,MAA3E,EAAmF;AACjFH,MAAAA,QAAQ,GAAG,IAAX;AACD,KAFD,MAEO;AACLC,MAAAA,IAAI,IAAIH,SAAR;AACD;AACF;;AAED,SAAOC,WAAP;AACD;AAED,OAAO,eAAeY,gBAAf,CACLjB,KADK,EAELkB,UAFK,EAGLjB,WAHK,EAILkB,kBAJK,EAKLjB,IALK,EAMLkB,OANK,EAUL;AAAA,MAHAC,YAGA,uEAHe,WAGf;AAAA,MAFAC,eAEA,uEAFkB,IAElB;AAAA,MADAC,KACA,uEADQ,IACR;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIlB,QAAQ,GAAG,KAAf;;AAEA,SAAO,CAACA,QAAR,EAAkB;AAChB,UAAMM,MAAM,GAAG,MAAMX,WAAW,CAACD,KAAZ,CAAkB;AACrCA,MAAAA,KAAK,EAAEA,KAD8B;AAErCyB,MAAAA,SAAS,EAAE,EACT,GAAGvB,IADM;AAETkB,QAAAA;AAFS,OAF0B;AAMrC,SAAGD;AANkC,KAAlB,CAArB;AASAK,IAAAA,UAAU,GAAGF,eAAe,GACxBE,UAAU,CAACE,MAAX,CAAkBd,MAAM,CAACE,IAAP,CAAYI,UAAZ,CAAlB,CADwB,GAExBN,MAAM,CAACE,IAAP,CAAYI,UAAZ,EAAwBQ,MAAxB,CAA+BF,UAA/B,CAFJ;;AAIA,QAAIZ,MAAM,CAACE,IAAP,CAAYI,UAAZ,EAAwBT,MAAxB,GAAiCc,KAArC,EAA4C;AAC1CjB,MAAAA,QAAQ,GAAG,IAAX;AACD,KAFD,MAEO;AACL,YAAMqB,QAAQ,GAAGL,eAAe,GAAGV,MAAM,CAACE,IAAP,CAAYI,UAAZ,EAAwBT,MAAxB,GAAiC,CAApC,GAAwC,CAAxE;AACAW,MAAAA,OAAO,GAAGR,MAAM,CAACE,IAAP,CAAYI,UAAZ,EAAwBS,QAAxB,EAAkCN,YAAlC,CAAV;AACD;AACF;;AAED,SAAOG,UAAP;AACD","sourcesContent":["export async function splitQuery(query: any, localClient: any, vars: any, list: Array<any>, skipCount = 100) {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n\n  while (!allFound) {\n    let end = list.length\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount\n    }\n    const sliced = list.slice(skip, end)\n    const result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'cache-first'\n    })\n    fetchedData = {\n      ...fetchedData,\n      ...result.data\n    }\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\n      allFound = true\n    } else {\n      skip += skipCount\n    }\n  }\n\n  return fetchedData\n}\n\nexport async function crawlSingleQuery(\n  query: any,\n  queryField: any,\n  localClient: any,\n  localClientOptions: any,\n  vars: any,\n  pointer: any,\n  pointerField = 'timestamp',\n  crawlingForward = true,\n  limit = 1000\n) {\n  let allResults = [] as any\n  let allFound = false\n\n  while (!allFound) {\n    const result = await localClient.query({\n      query: query,\n      variables: {\n        ...vars,\n        pointer\n      },\n      ...localClientOptions\n    })\n\n    allResults = crawlingForward\n      ? allResults.concat(result.data[queryField])\n      : result.data[queryField].concat(allResults)\n\n    if (result.data[queryField].length < limit) {\n      allFound = true\n    } else {\n      const newIndex = crawlingForward ? result.data[queryField].length - 1 : 0\n      pointer = result.data[queryField][newIndex][pointerField]\n    }\n  }\n\n  return allResults\n}\n"]},"metadata":{},"sourceType":"module"}