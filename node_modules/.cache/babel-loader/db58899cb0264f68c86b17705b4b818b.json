{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/EarnWidget/AddLiquidity/index.tsx\";\nimport React, { useContext, useCallback, useState } from 'react';\nimport { CAVAX } from '@pangolindex/sdk';\nimport { AddWrapper, InputText, StyledBalanceMax, ArrowWrapper, LightCard, InputWrapper, Buttons } from './styleds';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Text } from '@pangolindex/components';\nimport { Plus } from 'react-feather';\nimport { RowBetween } from 'src/components/Row';\nimport { useWalletModalToggle } from 'src/state/application/hooks';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { ThemeContext } from 'styled-components';\nimport { Field } from 'src/state/mint/actions';\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'src/state/mint/hooks';\nimport { useIsExpertMode, useUserSlippageTolerance } from 'src/state/user/hooks';\nimport useTransactionDeadline from 'src/hooks/useTransactionDeadline';\nimport { maxAmountSpend } from 'src/utils/maxAmountSpend';\nimport { ApprovalState, useApproveCallback } from 'src/hooks/useApproveCallback';\nimport { ROUTER_ADDRESS } from 'src/constants';\nimport { useTransactionAdder } from 'src/state/transactions/hooks';\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'src/utils';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { wrappedCurrency } from 'src/utils/wrappedCurrency';\nimport ReactGA from 'react-ga';\nimport PoolPriceBar from './PoolPriceBar';\nimport { PairState } from 'src/data/Reserves';\nimport ConfirmPoolDrawer from './ConfirmPoolDrawer';\nimport { useCurrencyBalance } from 'src/state/wallet/hooks';\nimport { useChainId } from 'src/hooks';\n\nconst AddLiquidity = _ref => {\n  var _parsedAmounts$depend, _parsedAmounts$depend2;\n\n  let {\n    currencyA,\n    currencyB,\n    onComplete,\n    type\n  } = _ref;\n  const {\n    account,\n    library\n  } = useActiveWeb3React();\n  const chainId = useChainId();\n  const theme = useContext(ThemeContext);\n  const {\n    t\n  } = useTranslation();\n  const expertMode = useIsExpertMode(); // mint state\n\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    // pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n  const {\n    onFieldAInput,\n    onFieldBInput\n  } = useMintActionHandlers(noLiquidity);\n  const isValid = !error; // modal and loading\n\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false); // clicked confirm\n  // txn values\n\n  const deadline = useTransactionDeadline(); // custom from users settings\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n\n  const [txHash, setTxHash] = useState(''); // get formatted amounts\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  }; // get the max amounts user can add\n\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return { ...accumulator,\n      [field]: maxAmountSpend(chainId, currencyBalances[field])\n    };\n  }, {});\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n\n    return { ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : '0')\n    };\n  }, {}); // check whether the user has approved the router on the tokens\n\n  const [approvalA, approveACallback] = useApproveCallback(chainId, parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS[chainId]);\n  const [approvalB, approveBCallback] = useApproveCallback(chainId, parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS[chainId]);\n  const addTransaction = useTransactionAdder();\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    let estimate, method, args, value;\n\n    if (currencyA === CAVAX[chainId] || currencyB === CAVAX[chainId]) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n\n      const tokenBIsETH = currencyB === CAVAX[chainId];\n      estimate = router.estimateGas.addLiquidityAVAX;\n      method = router.addLiquidityAVAX;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : '', // token\n      (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n      amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n      amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n      account, deadline.toHexString()];\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      var _wrappedCurrency$addr2, _wrappedCurrency2, _wrappedCurrency$addr3, _wrappedCurrency3;\n\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [(_wrappedCurrency$addr2 = (_wrappedCurrency2 = wrappedCurrency(currencyA, chainId)) === null || _wrappedCurrency2 === void 0 ? void 0 : _wrappedCurrency2.address) !== null && _wrappedCurrency$addr2 !== void 0 ? _wrappedCurrency$addr2 : '', (_wrappedCurrency$addr3 = (_wrappedCurrency3 = wrappedCurrency(currencyB, chainId)) === null || _wrappedCurrency3 === void 0 ? void 0 : _wrappedCurrency3.address) !== null && _wrappedCurrency$addr3 !== void 0 ? _wrappedCurrency$addr3 : '', parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadline.toHexString()];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit)\n    }).then(response => {\n      var _parsedAmounts$Field$, _currencies$Field$CUR, _parsedAmounts$Field$2, _currencies$Field$CUR2, _currencies$Field$CUR3, _currencies$Field$CUR4;\n\n      setAttemptingTxn(false);\n      addTransaction(response, {\n        summary: 'Add ' + ((_parsedAmounts$Field$ = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.toSignificant(3)) + ' ' + ((_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol) + ' and ' + ((_parsedAmounts$Field$2 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toSignificant(3)) + ' ' + ((_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol)\n      });\n      setTxHash(response.hash);\n      ReactGA.event({\n        category: 'Liquidity',\n        action: 'Add',\n        label: [(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol, (_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol].join('/')\n      });\n    })).catch(error => {\n      setAttemptingTxn(false); // we only care if the error is something _other_ than the user rejected the tx\n\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.error(error);\n      }\n    });\n  }\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onFieldAInput('');\n    }\n\n    setTxHash('');\n    setAttemptingTxn(false);\n  }, [onFieldAInput, txHash]);\n  const handleTypeInput = useCallback(value => {\n    onFieldAInput(value);\n  }, [onFieldAInput]);\n  const handleTypeOutput = useCallback(value => {\n    onFieldBInput(value);\n  }, [onFieldBInput]); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle();\n  const selectedCurrencyBalanceA = useCurrencyBalance(chainId, account !== null && account !== void 0 ? account : undefined, currencyA !== null && currencyA !== void 0 ? currencyA : undefined);\n  const selectedCurrencyBalanceB = useCurrencyBalance(chainId, account !== null && account !== void 0 ? account : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n\n  const renderButton = () => {\n    if (!account) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: toggleWalletModal,\n        height: \"46px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, t('swapPage.connectWallet'));\n    } else {\n      var _currencies$Field$CUR5, _currencies$Field$CUR6, _currencies$Field$CUR7, _currencies$Field$CUR8;\n\n      return /*#__PURE__*/React.createElement(Buttons, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, (approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING || approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING) && isValid && /*#__PURE__*/React.createElement(RowBetween, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }\n      }, approvalA !== ApprovalState.APPROVED && /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: approveACallback,\n        isDisabled: approvalA === ApprovalState.PENDING,\n        width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%',\n        loading: approvalA === ApprovalState.PENDING,\n        loadingText: `${t('swapPage.approving')} ${(_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol}`,\n        height: \"46px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 19\n        }\n      }, t('addLiquidity.approve') + ((_currencies$Field$CUR6 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol)), approvalB !== ApprovalState.APPROVED && /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: approveBCallback,\n        isDisabled: approvalB === ApprovalState.PENDING,\n        width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%',\n        loading: approvalB === ApprovalState.PENDING,\n        loadingText: `${t('swapPage.approving')} ${(_currencies$Field$CUR7 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR7 === void 0 ? void 0 : _currencies$Field$CUR7.symbol}`,\n        height: \"46px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 19\n        }\n      }, t('addLiquidity.approve') + ((_currencies$Field$CUR8 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol))), /*#__PURE__*/React.createElement(Button, {\n        height: \"46px\",\n        variant: \"primary\",\n        onClick: () => {\n          expertMode ? onAdd() : setShowConfirm(true);\n        },\n        isDisabled: !isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED //error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }\n      }, error !== null && error !== void 0 ? error : t('addLiquidity.supply')));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AddWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWrapper, {\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    value: formattedAmounts[Field.CURRENCY_A],\n    addonAfter: !atMaxAmounts[Field.CURRENCY_A] ? /*#__PURE__*/React.createElement(Box, {\n      display: 'flex',\n      alignItems: 'center',\n      height: '100%',\n      justifyContent: 'center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StyledBalanceMax, {\n      onClick: () => {\n        var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n\n        return onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : '');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 19\n      }\n    }, t('currencyInputPanel.max'))) : '',\n    onChange: value => {\n      handleTypeInput(value);\n    },\n    label: `${currencyA === null || currencyA === void 0 ? void 0 : currencyA.symbol}`,\n    fontSize: 24,\n    isNumeric: true,\n    placeholder: \"0.00\",\n    addonLabel: account && /*#__PURE__*/React.createElement(Text, {\n      color: \"text2\",\n      fontWeight: 500,\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }\n    }, !!currencyA && selectedCurrencyBalanceA ? t('currencyInputPanel.balance') + (selectedCurrencyBalanceA === null || selectedCurrencyBalanceA === void 0 ? void 0 : selectedCurrencyBalanceA.toSignificant(6)) : ' -'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    width: \"100%\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    display: type === 'card' ? 'none' : 'flex',\n    justifyContent: 'center',\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Plus, {\n    size: \"16\",\n    color: theme.text1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(InputText, {\n    value: formattedAmounts[Field.CURRENCY_B],\n    addonAfter: !atMaxAmounts[Field.CURRENCY_B] ? /*#__PURE__*/React.createElement(Box, {\n      display: 'flex',\n      alignItems: 'center',\n      height: '100%',\n      justifyContent: 'center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StyledBalanceMax, {\n      onClick: () => {\n        var _maxAmounts$Field$CUR3, _maxAmounts$Field$CUR4;\n\n        return onFieldBInput((_maxAmounts$Field$CUR3 = (_maxAmounts$Field$CUR4 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR4 === void 0 ? void 0 : _maxAmounts$Field$CUR4.toExact()) !== null && _maxAmounts$Field$CUR3 !== void 0 ? _maxAmounts$Field$CUR3 : '');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 19\n      }\n    }, t('currencyInputPanel.max'))) : '',\n    onChange: value => {\n      handleTypeOutput(value);\n    },\n    label: `${currencyB === null || currencyB === void 0 ? void 0 : currencyB.symbol}`,\n    fontSize: 24,\n    isNumeric: true,\n    placeholder: \"0.00\",\n    addonLabel: account && /*#__PURE__*/React.createElement(Text, {\n      color: \"text2\",\n      fontWeight: 500,\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, !!currencyB && selectedCurrencyBalanceB ? t('currencyInputPanel.balance') + (selectedCurrencyBalanceB === null || selectedCurrencyBalanceB === void 0 ? void 0 : selectedCurrencyBalanceB.toSignificant(6)) : ' -'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  })), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && /*#__PURE__*/React.createElement(LightCard, {\n    padding: \"0px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PoolPriceBar, {\n    currencies: currencies,\n    poolTokenPercentage: poolTokenPercentage,\n    noLiquidity: noLiquidity,\n    price: price,\n    parsedAmounts: parsedAmounts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Box, {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, renderButton()), showConfirm && /*#__PURE__*/React.createElement(ConfirmPoolDrawer, {\n    isOpen: showConfirm,\n    allowedSlippage: allowedSlippage,\n    poolErrorMessage: error,\n    price: price,\n    currencies: currencies,\n    parsedAmounts: parsedAmounts,\n    noLiquidity: noLiquidity,\n    liquidityMinted: liquidityMinted,\n    onAdd: onAdd,\n    poolTokenPercentage: poolTokenPercentage,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    onClose: handleDismissConfirmation,\n    onComplete: onComplete,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default AddLiquidity;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/EarnWidget/AddLiquidity/index.tsx"],"names":["React","useContext","useCallback","useState","CAVAX","AddWrapper","InputText","StyledBalanceMax","ArrowWrapper","LightCard","InputWrapper","Buttons","useTranslation","Box","Button","Text","Plus","RowBetween","useWalletModalToggle","useActiveWeb3React","ThemeContext","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useIsExpertMode","useUserSlippageTolerance","useTransactionDeadline","maxAmountSpend","ApprovalState","useApproveCallback","ROUTER_ADDRESS","useTransactionAdder","calculateGasMargin","calculateSlippageAmount","getRouterContract","BigNumber","wrappedCurrency","ReactGA","PoolPriceBar","PairState","ConfirmPoolDrawer","useCurrencyBalance","useChainId","AddLiquidity","currencyA","currencyB","onComplete","type","account","library","chainId","theme","t","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","atMaxAmounts","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsETH","estimateGas","addLiquidityAVAX","address","raw","toString","toHexString","from","addLiquidity","then","estimatedGasLimit","gasLimit","response","summary","symbol","hash","event","category","action","label","join","catch","code","console","handleDismissConfirmation","handleTypeInput","handleTypeOutput","toggleWalletModal","selectedCurrencyBalanceA","selectedCurrencyBalanceB","renderButton","NOT_APPROVED","PENDING","APPROVED","toExact","text1","INVALID"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useState } from 'react'\nimport { Currency, CAVAX, TokenAmount } from '@pangolindex/sdk'\nimport { AddWrapper, InputText, StyledBalanceMax, ArrowWrapper, LightCard, InputWrapper, Buttons } from './styleds'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Button, Text } from '@pangolindex/components'\nimport { Plus } from 'react-feather'\nimport { RowBetween } from 'src/components/Row'\nimport { useWalletModalToggle } from 'src/state/application/hooks'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { ThemeContext } from 'styled-components'\nimport { Field } from 'src/state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'src/state/mint/hooks'\nimport { useIsExpertMode, useUserSlippageTolerance } from 'src/state/user/hooks'\nimport useTransactionDeadline from 'src/hooks/useTransactionDeadline'\nimport { maxAmountSpend } from 'src/utils/maxAmountSpend'\nimport { ApprovalState, useApproveCallback } from 'src/hooks/useApproveCallback'\nimport { ROUTER_ADDRESS } from 'src/constants'\nimport { useTransactionAdder } from 'src/state/transactions/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'src/utils'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { wrappedCurrency } from 'src/utils/wrappedCurrency'\nimport ReactGA from 'react-ga'\nimport PoolPriceBar from './PoolPriceBar'\nimport { PairState } from 'src/data/Reserves'\nimport ConfirmPoolDrawer from './ConfirmPoolDrawer'\nimport { useCurrencyBalance } from 'src/state/wallet/hooks'\nimport { useChainId } from 'src/hooks'\n\ninterface AddLiquidityProps {\n  currencyA: Currency\n  currencyB: Currency\n  onComplete?: () => void\n  type: 'card' | 'detail'\n}\n\nconst AddLiquidity = ({ currencyA, currencyB, onComplete, type }: AddLiquidityProps) => {\n  const { account, library } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    // pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(chainId, currencyBalances[field])\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0')\n      }\n    },\n    {}\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(\n    chainId,\n    parsedAmounts[Field.CURRENCY_A],\n    ROUTER_ADDRESS[chainId]\n  )\n  const [approvalB, approveBCallback] = useApproveCallback(\n    chainId,\n    parsedAmounts[Field.CURRENCY_B],\n    ROUTER_ADDRESS[chainId]\n  )\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    }\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null\n    if (currencyA === CAVAX[chainId] || currencyB === CAVAX[chainId]) {\n      const tokenBIsETH = currencyB === CAVAX[chainId]\n      estimate = router.estimateGas.addLiquidityAVAX\n      method = router.addLiquidityAVAX\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString()\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString()\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then(estimatedGasLimit =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit)\n        }).then(response => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary:\n              'Add ' +\n              parsedAmounts[Field.CURRENCY_A]?.toSignificant(3) +\n              ' ' +\n              currencies[Field.CURRENCY_A]?.symbol +\n              ' and ' +\n              parsedAmounts[Field.CURRENCY_B]?.toSignificant(3) +\n              ' ' +\n              currencies[Field.CURRENCY_B]?.symbol\n          })\n\n          setTxHash(response.hash)\n\n          ReactGA.event({\n            category: 'Liquidity',\n            action: 'Add',\n            label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/')\n          })\n        })\n      )\n      .catch(error => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error)\n        }\n      })\n  }\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n    setAttemptingTxn(false)\n  }, [onFieldAInput, txHash])\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onFieldAInput(value)\n    },\n    [onFieldAInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onFieldBInput(value)\n    },\n    [onFieldBInput]\n  )\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  const selectedCurrencyBalanceA = useCurrencyBalance(chainId, account ?? undefined, currencyA ?? undefined)\n  const selectedCurrencyBalanceB = useCurrencyBalance(chainId, account ?? undefined, currencyB ?? undefined)\n\n  const renderButton = () => {\n    if (!account) {\n      return (\n        <Button variant=\"primary\" onClick={toggleWalletModal} height=\"46px\">\n          {t('swapPage.connectWallet')}\n        </Button>\n      )\n    } else {\n      return (\n        <Buttons>\n          {(approvalA === ApprovalState.NOT_APPROVED ||\n            approvalA === ApprovalState.PENDING ||\n            approvalB === ApprovalState.NOT_APPROVED ||\n            approvalB === ApprovalState.PENDING) &&\n            isValid && (\n              <RowBetween>\n                {approvalA !== ApprovalState.APPROVED && (\n                  <Button\n                    variant=\"primary\"\n                    onClick={approveACallback}\n                    isDisabled={approvalA === ApprovalState.PENDING}\n                    width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                    loading={approvalA === ApprovalState.PENDING}\n                    loadingText={`${t('swapPage.approving')} ${currencies[Field.CURRENCY_A]?.symbol}`}\n                    height=\"46px\"\n                  >\n                    {t('addLiquidity.approve') + currencies[Field.CURRENCY_A]?.symbol}\n                  </Button>\n                )}\n                {approvalB !== ApprovalState.APPROVED && (\n                  <Button\n                    variant=\"primary\"\n                    onClick={approveBCallback}\n                    isDisabled={approvalB === ApprovalState.PENDING}\n                    width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                    loading={approvalB === ApprovalState.PENDING}\n                    loadingText={`${t('swapPage.approving')} ${currencies[Field.CURRENCY_B]?.symbol}`}\n                    height=\"46px\"\n                  >\n                    {t('addLiquidity.approve') + currencies[Field.CURRENCY_B]?.symbol}\n                  </Button>\n                )}\n              </RowBetween>\n            )}\n          <Button\n            height=\"46px\"\n            variant=\"primary\"\n            onClick={() => {\n              expertMode ? onAdd() : setShowConfirm(true)\n            }}\n            isDisabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n            //error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\n          >\n            {error ?? t('addLiquidity.supply')}\n          </Button>\n        </Buttons>\n      )\n    }\n  }\n\n  return (\n    <AddWrapper>\n      <Box flex={1}>\n        <InputWrapper type={type}>\n          <InputText\n            value={formattedAmounts[Field.CURRENCY_A]}\n            addonAfter={\n              !atMaxAmounts[Field.CURRENCY_A] ? (\n                <Box display={'flex'} alignItems={'center'} height={'100%'} justifyContent={'center'}>\n                  <StyledBalanceMax onClick={() => onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')}>\n                    {t('currencyInputPanel.max')}\n                  </StyledBalanceMax>\n                </Box>\n              ) : (\n                ''\n              )\n            }\n            onChange={(value: any) => {\n              handleTypeInput(value as any)\n            }}\n            label={`${currencyA?.symbol}`}\n            fontSize={24}\n            isNumeric={true}\n            placeholder=\"0.00\"\n            addonLabel={\n              account && (\n                <Text color=\"text2\" fontWeight={500} fontSize={12}>\n                  {!!currencyA && selectedCurrencyBalanceA\n                    ? t('currencyInputPanel.balance') + selectedCurrencyBalanceA?.toSignificant(6)\n                    : ' -'}\n                </Text>\n              )\n            }\n          />\n\n          <Box\n            width=\"100%\"\n            textAlign=\"center\"\n            alignItems=\"center\"\n            display={type === 'card' ? 'none' : 'flex'}\n            justifyContent={'center'}\n            mt={10}\n          >\n            <ArrowWrapper>\n              <Plus size=\"16\" color={theme.text1} />\n            </ArrowWrapper>\n          </Box>\n\n          <InputText\n            value={formattedAmounts[Field.CURRENCY_B]}\n            addonAfter={\n              !atMaxAmounts[Field.CURRENCY_B] ? (\n                <Box display={'flex'} alignItems={'center'} height={'100%'} justifyContent={'center'}>\n                  <StyledBalanceMax onClick={() => onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')}>\n                    {t('currencyInputPanel.max')}\n                  </StyledBalanceMax>\n                </Box>\n              ) : (\n                ''\n              )\n            }\n            onChange={(value: any) => {\n              handleTypeOutput(value as any)\n            }}\n            label={`${currencyB?.symbol}`}\n            fontSize={24}\n            isNumeric={true}\n            placeholder=\"0.00\"\n            addonLabel={\n              account && (\n                <Text color=\"text2\" fontWeight={500} fontSize={12}>\n                  {!!currencyB && selectedCurrencyBalanceB\n                    ? t('currencyInputPanel.balance') + selectedCurrencyBalanceB?.toSignificant(6)\n                    : ' -'}\n                </Text>\n              )\n            }\n          />\n        </InputWrapper>\n\n        {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n          <LightCard padding=\"0px\">\n            {/* <Text fontWeight={500} fontSize={14} color=\"text1\">\n            {noLiquidity ? t('addLiquidity.initialPrices') : t('addLiquidity.prices')} {t('addLiquidity.poolShare')}\n          </Text> */}\n\n            <PoolPriceBar\n              currencies={currencies}\n              poolTokenPercentage={poolTokenPercentage}\n              noLiquidity={noLiquidity}\n              price={price}\n              parsedAmounts={parsedAmounts}\n            />\n          </LightCard>\n        )}\n      </Box>\n      <Box width=\"100%\">{renderButton()}</Box>\n\n      {/* Confirm Swap Drawer */}\n      {showConfirm && (\n        <ConfirmPoolDrawer\n          isOpen={showConfirm}\n          allowedSlippage={allowedSlippage}\n          poolErrorMessage={error}\n          price={price}\n          currencies={currencies}\n          parsedAmounts={parsedAmounts}\n          noLiquidity={noLiquidity}\n          liquidityMinted={liquidityMinted}\n          onAdd={onAdd}\n          poolTokenPercentage={poolTokenPercentage}\n          attemptingTxn={attemptingTxn}\n          txHash={txHash}\n          onClose={handleDismissConfirmation}\n          onComplete={onComplete}\n          type={type}\n        />\n      )}\n\n      {/* {pair && !noLiquidity && pairState !== PairState.INVALID ? (\n        <LightCard>\n          <Text fontSize={12} color=\"text1\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"wizard-icon\">\n              ⭐️\n            </span>{' '}\n            {t('positionCard.byAddingLiquidityInfo')}\n          </Text>\n        </LightCard>\n      ) : null} */}\n    </AddWrapper>\n  )\n}\nexport default AddLiquidity\n"]},"metadata":{},"sourceType":"module"}