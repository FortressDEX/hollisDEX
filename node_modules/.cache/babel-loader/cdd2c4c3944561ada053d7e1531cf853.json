{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/earn/UnstakingModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonError } from '../Button';\nimport { useMinichefPools } from '../../state/stake/hooks';\nimport { useStakingContract } from '../../hooks/useContract';\nimport { SubmittedView, LoadingView } from '../ModalViews';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport FormattedCurrencyAmount from '../FormattedCurrencyAmount';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useTranslation } from 'react-i18next';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function UnstakingModal(_ref) {\n  var _error2, _stakingInfo$stakedAm2, _stakingInfo$earnedAm;\n\n  let {\n    isOpen,\n    onDismiss,\n    stakingInfo,\n    version,\n    extraRewardTokensAmount\n  } = _ref;\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }\n\n  const poolMap = useMinichefPools();\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n  const isSuperFarm = extraRewardTokensAmount && (extraRewardTokensAmount === null || extraRewardTokensAmount === void 0 ? void 0 : extraRewardTokensAmount.length) > 0;\n\n  async function onWithdraw() {\n    if (stakingContract && poolMap && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      var _stakingInfo$stakedAm;\n\n      setAttempting(true);\n      const method = version < 2 ? 'exit' : 'withdrawAndHarvest';\n      const args = version < 2 ? [] : [poolMap[stakingInfo.stakedAmount.token.address], `0x${(_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.raw.toString(16)}`, account]; // TODO: Support withdrawing partial amounts for v2+\n\n      await stakingContract[method](...args).then(response => {\n        addTransaction(response, {\n          summary: t('earn.withdrawDepositedLiquidity')\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false);\n        console.log(error);\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Withdraw\"), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormattedCurrencyAmount, {\n    currencyAmount: stakingInfo.stakedAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, t('earn.depositedPglLiquidity'))), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormattedCurrencyAmount, {\n    currencyAmount: stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, t('earn.unclaimedReward', {\n    symbol: 'PNG'\n  }))), isSuperFarm && (extraRewardTokensAmount === null || extraRewardTokensAmount === void 0 ? void 0 : extraRewardTokensAmount.map((rewardAmount, i) => {\n    var _rewardAmount$token;\n\n    return /*#__PURE__*/React.createElement(AutoColumn, {\n      justify: \"center\",\n      gap: \"md\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TYPE.body, {\n      fontWeight: 600,\n      fontSize: 36,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedCurrencyAmount, {\n      currencyAmount: rewardAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 20\n      }\n    })), /*#__PURE__*/React.createElement(TYPE.body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, t('earn.unclaimedReward', {\n      symbol: rewardAmount === null || rewardAmount === void 0 ? void 0 : (_rewardAmount$token = rewardAmount.token) === null || _rewardAmount$token === void 0 ? void 0 : _rewardAmount$token.symbol\n    })));\n  })), /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, t('earn.whenYouWithdrawWarning')), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error,\n    error: !!error && !!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount),\n    onClick: onWithdraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.withdrawAndClaim'))), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, t('earn.withdrawingLiquidity', {\n    amount: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm2 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.toSignificant(4),\n    symbol: 'PGL'\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, t('earn.claimingReward', {\n    amount: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(4),\n    symbol: 'PNG'\n  }), isSuperFarm && (extraRewardTokensAmount === null || extraRewardTokensAmount === void 0 ? void 0 : extraRewardTokensAmount.map((rewardAmount, i) => {\n    var _rewardAmount$token2;\n\n    return /*#__PURE__*/React.createElement(TYPE.body, {\n      fontSize: 20,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }\n    }, t('earn.claimingReward', {\n      amount: rewardAmount === null || rewardAmount === void 0 ? void 0 : rewardAmount.toSignificant(6),\n      symbol: rewardAmount === null || rewardAmount === void 0 ? void 0 : (_rewardAmount$token2 = rewardAmount.token) === null || _rewardAmount$token2 === void 0 ? void 0 : _rewardAmount$token2.symbol\n    }));\n  }))))), hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOnDismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, t('earn.transactionSubmitted')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, t('earn.withdrewStakingToken', {\n    symbol: 'PGL'\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, t('earn.claimedReward', {\n    symbol: 'PNG'\n  })))));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/earn/UnstakingModal.tsx"],"names":["React","useState","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonError","useMinichefPools","useStakingContract","SubmittedView","LoadingView","useTransactionAdder","FormattedCurrencyAmount","useActiveWeb3React","useTranslation","ContentWrapper","UnstakingModal","isOpen","onDismiss","stakingInfo","version","extraRewardTokensAmount","account","t","addTransaction","hash","setHash","attempting","setAttempting","wrappedOnDismiss","undefined","poolMap","stakingContract","stakingRewardAddress","isSuperFarm","length","onWithdraw","stakedAmount","method","args","token","address","raw","toString","then","response","summary","catch","error","console","log","earnedAmount","symbol","map","rewardAmount","i","textAlign","amount","toSignificant"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE, CloseIcon } from '../../theme'\nimport { ButtonError } from '../Button'\nimport { DoubleSideStakingInfo, useMinichefPools } from '../../state/stake/hooks'\nimport { useStakingContract } from '../../hooks/useContract'\nimport { SubmittedView, LoadingView } from '../ModalViews'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport FormattedCurrencyAmount from '../FormattedCurrencyAmount'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useTranslation } from 'react-i18next'\nimport { TokenAmount } from '@pangolindex/sdk'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: DoubleSideStakingInfo\n  version: number\n  extraRewardTokensAmount?: Array<TokenAmount>\n}\n\nexport default function UnstakingModal({\n  isOpen,\n  onDismiss,\n  stakingInfo,\n  version,\n  extraRewardTokensAmount\n}: StakingModalProps) {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }\n\n  const poolMap = useMinichefPools()\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n  const isSuperFarm = extraRewardTokensAmount && extraRewardTokensAmount?.length > 0\n\n  async function onWithdraw() {\n    if (stakingContract && poolMap && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      const method = version < 2 ? 'exit' : 'withdrawAndHarvest'\n      const args =\n        version < 2\n          ? []\n          : [\n              poolMap[stakingInfo.stakedAmount.token.address],\n              `0x${stakingInfo.stakedAmount?.raw.toString(16)}`,\n              account\n            ]\n\n      // TODO: Support withdrawing partial amounts for v2+\n      await stakingContract[method](...args)\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.withdrawDepositedLiquidity')\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <RowBetween>\n            <TYPE.mediumHeader>Withdraw</TYPE.mediumHeader>\n            <CloseIcon onClick={wrappedOnDismiss} />\n          </RowBetween>\n          {stakingInfo?.stakedAmount && (\n            <AutoColumn justify=\"center\" gap=\"md\">\n              <TYPE.body fontWeight={600} fontSize={36}>\n                {<FormattedCurrencyAmount currencyAmount={stakingInfo.stakedAmount} />}\n              </TYPE.body>\n              <TYPE.body>{t('earn.depositedPglLiquidity')}</TYPE.body>\n            </AutoColumn>\n          )}\n          {stakingInfo?.earnedAmount && (\n            <AutoColumn justify=\"center\" gap=\"md\">\n              <TYPE.body fontWeight={600} fontSize={36}>\n                {<FormattedCurrencyAmount currencyAmount={stakingInfo?.earnedAmount} />}\n              </TYPE.body>\n              <TYPE.body>{t('earn.unclaimedReward', { symbol: 'PNG' })}</TYPE.body>\n            </AutoColumn>\n          )}\n          {isSuperFarm &&\n            extraRewardTokensAmount?.map((rewardAmount, i) => (\n              <AutoColumn justify=\"center\" gap=\"md\" key={i}>\n                <TYPE.body fontWeight={600} fontSize={36}>\n                  {<FormattedCurrencyAmount currencyAmount={rewardAmount} />}\n                </TYPE.body>\n                <TYPE.body>{t('earn.unclaimedReward', { symbol: rewardAmount?.token?.symbol })}</TYPE.body>\n              </AutoColumn>\n            ))}\n          <TYPE.subHeader style={{ textAlign: 'center' }}>{t('earn.whenYouWithdrawWarning')}</TYPE.subHeader>\n          <ButtonError disabled={!!error} error={!!error && !!stakingInfo?.stakedAmount} onClick={onWithdraw}>\n            {error ?? t('earn.withdrawAndClaim')}\n          </ButtonError>\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOnDismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.body fontSize={20}>\n              {t('earn.withdrawingLiquidity', {\n                amount: stakingInfo?.stakedAmount?.toSignificant(4),\n                symbol: 'PGL'\n              })}\n            </TYPE.body>\n            <TYPE.body fontSize={20}>\n              {t('earn.claimingReward', {\n                amount: stakingInfo?.earnedAmount?.toSignificant(4),\n                symbol: 'PNG'\n              })}\n\n              {isSuperFarm &&\n                extraRewardTokensAmount?.map((rewardAmount, i) => (\n                  <TYPE.body fontSize={20} key={i}>\n                    {t('earn.claimingReward', {\n                      amount: rewardAmount?.toSignificant(6),\n                      symbol: rewardAmount?.token?.symbol\n                    })}\n                  </TYPE.body>\n                ))}\n            </TYPE.body>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {hash && (\n        <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>{t('earn.transactionSubmitted')}</TYPE.largeHeader>\n            <TYPE.body fontSize={20}>{t('earn.withdrewStakingToken', { symbol: 'PGL' })}</TYPE.body>\n            <TYPE.body fontSize={20}>{t('earn.claimedReward', { symbol: 'PNG' })}</TYPE.body>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}