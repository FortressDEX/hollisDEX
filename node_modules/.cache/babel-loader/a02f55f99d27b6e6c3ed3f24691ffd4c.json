{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/earn/StakingModalSingleSide.tsx\";\nimport React, { useState, useCallback } from 'react';\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonConfirmed, ButtonError } from '../Button';\nimport ProgressCircles from '../ProgressSteps';\nimport CurrencyInputPanel from '../CurrencyInputPanel';\nimport { TokenAmount } from '@pangolindex/sdk';\nimport { useActiveWeb3React } from '../../hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { usePngContract, useStakingContract } from '../../hooks/useContract';\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback';\nimport { useDerivedStakeInfo } from '../../state/stake/hooks';\nimport { wrappedCurrencyAmount } from '../../utils/wrappedCurrency';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { LoadingView, SubmittedView } from '../ModalViews';\nimport { useTranslation } from 'react-i18next';\nimport { splitSignature } from 'ethers/lib/utils';\nimport { useChainId } from 'src/hooks';\nconst HypotheticalRewardRate = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 20px;\n  padding-left: 20px;\n\n  opacity: ${_ref => {\n  let {\n    dim\n  } = _ref;\n  return dim ? 0.5 : 1;\n}};\n`;\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function StakingModalSingleSide(_ref2) {\n  var _stakingInfo$rewardTo;\n\n  let {\n    isOpen,\n    onDismiss,\n    stakingInfo,\n    userLiquidityUnstaked\n  } = _ref2;\n  const {\n    account,\n    library\n  } = useActiveWeb3React();\n  const chainId = useChainId(); // track and parse user input\n\n  const [typedValue, setTypedValue] = useState('');\n  const {\n    parsedAmount,\n    error\n  } = useDerivedStakeInfo(typedValue, stakingInfo.stakedAmount.token, userLiquidityUnstaked);\n  const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId);\n  let hypotheticalWeeklyRewardRate = new TokenAmount(stakingInfo.rewardRatePerWeek.token, '0');\n\n  if (parsedAmountWrapped === null || parsedAmountWrapped === void 0 ? void 0 : parsedAmountWrapped.greaterThan('0')) {\n    hypotheticalWeeklyRewardRate = stakingInfo.getHypotheticalWeeklyRewardRate(stakingInfo.stakedAmount.add(parsedAmountWrapped), stakingInfo.totalStakedAmount.add(parsedAmountWrapped), stakingInfo.totalRewardRatePerSecond);\n  } // state for pending and submitted txn views\n\n\n  const addTransaction = useTransactionAdder();\n  const [attempting, setAttempting] = useState(false);\n  const [hash, setHash] = useState();\n  const wrappedOnDismiss = useCallback(() => {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }, [onDismiss]);\n  const stakingTokenContract = usePngContract(); // approval data for stake\n\n  const deadline = useTransactionDeadline();\n  const {\n    t\n  } = useTranslation();\n  const [signatureData, setSignatureData] = useState(null);\n  const [approval, approveCallback] = useApproveCallback(chainId, parsedAmount, stakingInfo.stakingRewardAddress);\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onStake() {\n    setAttempting(true);\n\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        stakingContract.stake(`0x${parsedAmount.raw.toString(16)}`).then(response => {\n          addTransaction(response, {\n            summary: t('earnPage.stakeStakingTokens', {\n              symbol: 'PNG'\n            })\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n          if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n            console.error(error);\n          }\n        });\n      } else if (signatureData) {\n        stakingContract.stakeWithPermit(`0x${parsedAmount.raw.toString(16)}`, signatureData.deadline, signatureData.v, signatureData.r, signatureData.s).then(response => {\n          addTransaction(response, {\n            summary: t('earnPage.stakeStakingTokens', {\n              symbol: 'PNG'\n            })\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n          if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n            console.error(error);\n          }\n        });\n      } else {\n        setAttempting(false);\n        throw new Error(t('earn.attemptingToStakeError'));\n      }\n    }\n  } // wrapped onUserInput to clear signatures\n\n\n  const onUserInput = useCallback(typedValue => {\n    setSignatureData(null);\n    setTypedValue(typedValue);\n  }, []); // used for max input button\n\n  const maxAmountInput = maxAmountSpend(chainId, userLiquidityUnstaked);\n  const atMaxAmount = Boolean(maxAmountInput && (parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.equalTo(maxAmountInput)));\n  const handleMax = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  async function onAttemptToApprove() {\n    if (!stakingTokenContract || !library || !deadline) throw new Error(t('earn.missingDependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('earn.missingLiquidityAmount')); // try to gather a signature for permission\n\n    const nonce = await stakingTokenContract.nonces(account);\n    const EIP712Domain = [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'chainId',\n      type: 'uint256'\n    }, {\n      name: 'verifyingContract',\n      type: 'address'\n    }];\n    const domain = {\n      name: 'Pangolin',\n      chainId: chainId,\n      verifyingContract: stakingTokenContract.address\n    };\n    const Permit = [{\n      name: 'owner',\n      type: 'address'\n    }, {\n      name: 'spender',\n      type: 'address'\n    }, {\n      name: 'value',\n      type: 'uint256'\n    }, {\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      name: 'deadline',\n      type: 'uint256'\n    }];\n    const message = {\n      owner: account,\n      spender: stakingInfo.stakingRewardAddress,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber()\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    });\n    library.send('eth_signTypedData_v4', [account, data]).then(splitSignature).then(signature => {\n      setSignatureData({\n        v: signature.v,\n        r: signature.r,\n        s: signature.s,\n        deadline: deadline.toNumber()\n      });\n    }).catch(error => {\n      // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        approveCallback();\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, t('earn.deposit')), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: typedValue,\n    onUserInput: onUserInput,\n    onMax: handleMax,\n    showMaxButton: !atMaxAmount,\n    currency: stakingInfo.stakedAmount.token,\n    pair: null,\n    label: '',\n    disableCurrencySelect: true,\n    customBalanceText: t('earn.availableToDeposit'),\n    id: \"stake-liquidity-token\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(HypotheticalRewardRate, {\n    dim: !hypotheticalWeeklyRewardRate.greaterThan('0'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.black, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, t('earn.weeklyRewards'))), /*#__PURE__*/React.createElement(TYPE.black, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, hypotheticalWeeklyRewardRate.toSignificant(4, {\n    groupSeparator: ','\n  }), ' ', t('earn.rewardPerWeek', {\n    symbol: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardTo = stakingInfo.rewardToken) === null || _stakingInfo$rewardTo === void 0 ? void 0 : _stakingInfo$rewardTo.symbol\n  }))), /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    mr: \"0.5rem\",\n    onClick: onAttemptToApprove,\n    confirmed: approval === ApprovalState.APPROVED || signatureData !== null,\n    disabled: approval !== ApprovalState.NOT_APPROVED || signatureData !== null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, t('earn.approve')), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error || signatureData === null && approval !== ApprovalState.APPROVED,\n    error: !!error && !!parsedAmount,\n    onClick: onStake,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, error !== null && error !== void 0 ? error : t('earn.deposit'))), /*#__PURE__*/React.createElement(ProgressCircles, {\n    steps: [approval === ApprovalState.APPROVED || signatureData !== null],\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  })), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, t('earn.depositingToken', {\n    symbol: 'PNG'\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4), \" PNG\"))), attempting && hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOnDismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, t('earn.transactionSubmitted')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, t('earn.deposited'), \" \", parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4), \" PNG\"))));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/earn/StakingModalSingleSide.tsx"],"names":["React","useState","useCallback","useTransactionDeadline","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonConfirmed","ButtonError","ProgressCircles","CurrencyInputPanel","TokenAmount","useActiveWeb3React","maxAmountSpend","usePngContract","useStakingContract","useApproveCallback","ApprovalState","useDerivedStakeInfo","wrappedCurrencyAmount","useTransactionAdder","LoadingView","SubmittedView","useTranslation","splitSignature","useChainId","HypotheticalRewardRate","div","dim","ContentWrapper","StakingModalSingleSide","isOpen","onDismiss","stakingInfo","userLiquidityUnstaked","account","library","chainId","typedValue","setTypedValue","parsedAmount","error","stakedAmount","token","parsedAmountWrapped","hypotheticalWeeklyRewardRate","rewardRatePerWeek","greaterThan","getHypotheticalWeeklyRewardRate","add","totalStakedAmount","totalRewardRatePerSecond","addTransaction","attempting","setAttempting","hash","setHash","wrappedOnDismiss","undefined","stakingTokenContract","deadline","t","signatureData","setSignatureData","approval","approveCallback","stakingRewardAddress","stakingContract","onStake","APPROVED","stake","raw","toString","then","response","summary","symbol","catch","code","console","stakeWithPermit","v","r","s","Error","onUserInput","maxAmountInput","atMaxAmount","Boolean","equalTo","handleMax","toExact","onAttemptToApprove","liquidityAmount","nonce","nonces","EIP712Domain","name","type","domain","verifyingContract","address","Permit","message","owner","spender","value","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","signature","toSignificant","groupSeparator","rewardToken","NOT_APPROVED"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE, CloseIcon } from '../../theme'\nimport { ButtonConfirmed, ButtonError } from '../Button'\nimport ProgressCircles from '../ProgressSteps'\nimport CurrencyInputPanel from '../CurrencyInputPanel'\nimport { TokenAmount } from '@pangolindex/sdk'\nimport { useActiveWeb3React } from '../../hooks'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { usePngContract, useStakingContract } from '../../hooks/useContract'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\nimport { SingleSideStakingInfo, useDerivedStakeInfo } from '../../state/stake/hooks'\nimport { wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { LoadingView, SubmittedView } from '../ModalViews'\nimport { useTranslation } from 'react-i18next'\nimport { splitSignature } from 'ethers/lib/utils'\nimport { useChainId } from 'src/hooks'\n\nconst HypotheticalRewardRate = styled.div<{ dim: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 20px;\n  padding-left: 20px;\n\n  opacity: ${({ dim }) => (dim ? 0.5 : 1)};\n`\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: SingleSideStakingInfo\n  userLiquidityUnstaked: TokenAmount | undefined\n}\n\nexport default function StakingModalSingleSide({\n  isOpen,\n  onDismiss,\n  stakingInfo,\n  userLiquidityUnstaked\n}: StakingModalProps) {\n  const { account, library } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  // track and parse user input\n  const [typedValue, setTypedValue] = useState('')\n  const { parsedAmount, error } = useDerivedStakeInfo(typedValue, stakingInfo.stakedAmount.token, userLiquidityUnstaked)\n  const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId)\n\n  let hypotheticalWeeklyRewardRate: TokenAmount = new TokenAmount(stakingInfo.rewardRatePerWeek.token, '0')\n  if (parsedAmountWrapped?.greaterThan('0')) {\n    hypotheticalWeeklyRewardRate = stakingInfo.getHypotheticalWeeklyRewardRate(\n      stakingInfo.stakedAmount.add(parsedAmountWrapped),\n      stakingInfo.totalStakedAmount.add(parsedAmountWrapped),\n      stakingInfo.totalRewardRatePerSecond\n    )\n  }\n\n  // state for pending and submitted txn views\n  const addTransaction = useTransactionAdder()\n  const [attempting, setAttempting] = useState<boolean>(false)\n  const [hash, setHash] = useState<string | undefined>()\n  const wrappedOnDismiss = useCallback(() => {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }, [onDismiss])\n\n  const stakingTokenContract = usePngContract()\n\n  // approval data for stake\n  const deadline = useTransactionDeadline()\n  const { t } = useTranslation()\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n  const [approval, approveCallback] = useApproveCallback(chainId, parsedAmount, stakingInfo.stakingRewardAddress)\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onStake() {\n    setAttempting(true)\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        stakingContract\n          .stake(`0x${parsedAmount.raw.toString(16)}`)\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: t('earnPage.stakeStakingTokens', { symbol: 'PNG' })\n            })\n            setHash(response.hash)\n          })\n          .catch((error: any) => {\n            setAttempting(false)\n            // we only care if the error is something _other_ than the user rejected the tx\n            if (error?.code !== 4001) {\n              console.error(error)\n            }\n          })\n      } else if (signatureData) {\n        stakingContract\n          .stakeWithPermit(\n            `0x${parsedAmount.raw.toString(16)}`,\n            signatureData.deadline,\n            signatureData.v,\n            signatureData.r,\n            signatureData.s\n          )\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: t('earnPage.stakeStakingTokens', { symbol: 'PNG' })\n            })\n            setHash(response.hash)\n          })\n          .catch((error: any) => {\n            setAttempting(false)\n            // we only care if the error is something _other_ than the user rejected the tx\n            if (error?.code !== 4001) {\n              console.error(error)\n            }\n          })\n      } else {\n        setAttempting(false)\n        throw new Error(t('earn.attemptingToStakeError'))\n      }\n    }\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback((typedValue: string) => {\n    setSignatureData(null)\n    setTypedValue(typedValue)\n  }, [])\n\n  // used for max input button\n  const maxAmountInput = maxAmountSpend(chainId, userLiquidityUnstaked)\n  const atMaxAmount = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\n  const handleMax = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact())\n  }, [maxAmountInput, onUserInput])\n\n  async function onAttemptToApprove() {\n    if (!stakingTokenContract || !library || !deadline) throw new Error(t('earn.missingDependencies'))\n    const liquidityAmount = parsedAmount\n    if (!liquidityAmount) throw new Error(t('earn.missingLiquidityAmount'))\n\n    // try to gather a signature for permission\n    const nonce = await stakingTokenContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' }\n    ]\n    const domain = {\n      name: 'Pangolin',\n      chainId: chainId,\n      verifyingContract: stakingTokenContract.address\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' }\n    ]\n    const message = {\n      owner: account,\n      spender: stakingInfo.stakingRewardAddress,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber()\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then(signature => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadline.toNumber()\n        })\n      })\n      .catch(error => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (error?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <RowBetween>\n            <TYPE.mediumHeader>{t('earn.deposit')}</TYPE.mediumHeader>\n            <CloseIcon onClick={wrappedOnDismiss} />\n          </RowBetween>\n          <CurrencyInputPanel\n            value={typedValue}\n            onUserInput={onUserInput}\n            onMax={handleMax}\n            showMaxButton={!atMaxAmount}\n            currency={stakingInfo.stakedAmount.token}\n            pair={null}\n            label={''}\n            disableCurrencySelect={true}\n            customBalanceText={t('earn.availableToDeposit')}\n            id=\"stake-liquidity-token\"\n          />\n\n          <HypotheticalRewardRate dim={!hypotheticalWeeklyRewardRate.greaterThan('0')}>\n            <div>\n              <TYPE.black fontWeight={600}>{t('earn.weeklyRewards')}</TYPE.black>\n            </div>\n\n            <TYPE.black>\n              {hypotheticalWeeklyRewardRate.toSignificant(4, { groupSeparator: ',' })}{' '}\n              {t('earn.rewardPerWeek', { symbol: stakingInfo?.rewardToken?.symbol })}\n            </TYPE.black>\n          </HypotheticalRewardRate>\n\n          <RowBetween>\n            <ButtonConfirmed\n              mr=\"0.5rem\"\n              onClick={onAttemptToApprove}\n              confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n              disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n            >\n              {t('earn.approve')}\n            </ButtonConfirmed>\n            <ButtonError\n              disabled={!!error || (signatureData === null && approval !== ApprovalState.APPROVED)}\n              error={!!error && !!parsedAmount}\n              onClick={onStake}\n            >\n              {error ?? t('earn.deposit')}\n            </ButtonError>\n          </RowBetween>\n          <ProgressCircles steps={[approval === ApprovalState.APPROVED || signatureData !== null]} disabled={true} />\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOnDismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>{t('earn.depositingToken', { symbol: 'PNG' })}</TYPE.largeHeader>\n            <TYPE.body fontSize={20}>{parsedAmount?.toSignificant(4)} PNG</TYPE.body>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {attempting && hash && (\n        <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>{t('earn.transactionSubmitted')}</TYPE.largeHeader>\n            <TYPE.body fontSize={20}>\n              {t('earn.deposited')} {parsedAmount?.toSignificant(4)} PNG\n            </TYPE.body>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}