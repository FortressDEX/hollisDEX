{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Stake/Manage.tsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { JSBI } from '@pangolindex/sdk';\nimport { Link } from 'react-router-dom';\nimport { useCurrency } from 'src/hooks/Tokens';\nimport { useWalletModalToggle } from 'src/state/application/hooks';\nimport { TYPE } from 'src/theme';\nimport { RowBetween } from 'src/components/Row';\nimport { AutoColumn } from 'src/components/Column';\nimport { CardSection, DataCard } from 'src/components/earn/styled';\nimport { ButtonPrimary, ButtonEmpty, ButtonSecondary } from 'src/components/Button';\nimport { useSingleSideStakingInfo } from 'src/state/stake/hooks';\nimport { useActiveWeb3React, useChainId } from 'src/hooks';\nimport { useColor } from 'src/hooks/useColor';\nimport { CountUp } from 'use-count-up';\nimport { wrappedCurrency } from 'src/utils/wrappedCurrency';\nimport usePrevious from 'src/hooks/usePrevious';\nimport { BIG_INT_ZERO, ZERO_ADDRESS } from 'src/constants';\nimport { PNG } from 'src/constants/tokens';\nimport CurrencyLogo from 'src/components/CurrencyLogo';\nimport StakingModalSingleSide from 'src/components/earn/StakingModalSingleSide';\nimport UnstakingModalSingleSide from 'src/components/earn/UnstakingModalSingleSide';\nimport ClaimRewardModalSingleSide from 'src/components/earn/ClaimRewardModalSingleSide';\nimport { useTokenBalance } from 'src/state/wallet/hooks';\nimport { useTranslation } from 'react-i18next';\nimport Loader from 'src/components/Loader';\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`;\nconst PositionInfo = styled(AutoColumn)`\n  position: relative;\n  max-width: 640px;\n  width: 100%;\n  opacity: ${_ref => {\n  let {\n    dim\n  } = _ref;\n  return dim ? 0.6 : 1;\n}};\n`;\nconst BottomSection = styled(AutoColumn)`\n  border-radius: 12px;\n  width: 100%;\n  position: relative;\n`;\nconst StyledDataCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n  z-index: 2;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: ${_ref2 => {\n  let {\n    theme,\n    bgColor,\n    showBackground\n  } = _ref2;\n  return `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `;\n}};\n`;\nconst StyledBottomCard = styled(DataCard)`\n  background: ${_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.bg3;\n}};\n  opacity: ${_ref4 => {\n  let {\n    dim\n  } = _ref4;\n  return dim ? 0.4 : 1;\n}};\n  margin-top: -40px;\n  padding: 0 1.25rem 1rem 1.25rem;\n  padding-top: 32px;\n  z-index: 1;\n`;\nconst PoolData = styled(DataCard)`\n  background: none;\n  border: 1px solid ${_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.bg4;\n}};\n  padding: 1rem;\n  z-index: 1;\n`;\nconst DataRow = styled(RowBetween)`\n  justify-content: center;\n  gap: 12px;\n\n  ${_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.mediaWidth.upToSmall`\n     flex-direction: column;\n     gap: 12px;\n   `;\n}};\n`;\nexport default function Manage(_ref7) {\n  var _useSingleSideStaking, _stakingInfo$stakedAm, _stakingInfo$earnedAm, _stakingInfo$earnedAm2, _usePrevious, _stakingInfo$totalSta, _stakingInfo$apr, _stakingInfo$stakedAm3, _stakingInfo$stakedAm4, _stakingInfo$stakedAm5, _stakingInfo$rewardTo, _stakingInfo$earnedAm3, _stakingInfo$rewardRa, _stakingInfo$rewardRa2, _stakingInfo$stakedAm6, _stakingInfo$stakedAm7;\n\n  let {\n    match: {\n      params: {\n        rewardCurrencyId,\n        version\n      }\n    }\n  } = _ref7;\n  const {\n    account\n  } = useActiveWeb3React();\n  const chainId = useChainId();\n  const {\n    t\n  } = useTranslation();\n  const rewardCurrency = useCurrency(rewardCurrencyId);\n  const rewardToken = wrappedCurrency(rewardCurrency !== null && rewardCurrency !== void 0 ? rewardCurrency : undefined, chainId);\n  const stakingInfo = (_useSingleSideStaking = useSingleSideStakingInfo(Number(version), rewardToken)) === null || _useSingleSideStaking === void 0 ? void 0 : _useSingleSideStaking[0];\n  const png = PNG[chainId];\n  const backgroundColorStakingToken = useColor(png); // detect existing unstaked position to show purchase button if none found\n\n  const userPngUnstaked = useTokenBalance(account !== null && account !== void 0 ? account : undefined, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.token);\n  const showGetPngButton = useMemo(() => {\n    var _stakingInfo$stakedAm2;\n\n    if (!userPngUnstaked || !stakingInfo) return true;\n    return Boolean((stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm2 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.equalTo('0')) && (userPngUnstaked === null || userPngUnstaked === void 0 ? void 0 : userPngUnstaked.equalTo('0')));\n  }, [stakingInfo, userPngUnstaked]);\n  const [showStakingModal, setShowStakingModal] = useState(false);\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false);\n  const [showClaimRewardModal, setShowClaimRewardModal] = useState(false);\n  const countUpAmount = (_stakingInfo$earnedAm = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm2 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm2 === void 0 ? void 0 : _stakingInfo$earnedAm2.toFixed(6)) !== null && _stakingInfo$earnedAm !== void 0 ? _stakingInfo$earnedAm : '0';\n  const countUpAmountPrevious = (_usePrevious = usePrevious(countUpAmount)) !== null && _usePrevious !== void 0 ? _usePrevious : '0';\n  const toggleWalletModal = useWalletModalToggle();\n  const handleStakeClick = useCallback(() => {\n    if (account) {\n      setShowStakingModal(true);\n    } else {\n      toggleWalletModal();\n    }\n  }, [account, toggleWalletModal]);\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      gap: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, chainId && /*#__PURE__*/React.createElement(CurrencyLogo, {\n    currency: png,\n    chainId: chainId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, t('earnPage.pngStaking')), chainId && /*#__PURE__*/React.createElement(CurrencyLogo, {\n    currency: rewardCurrency !== null && rewardCurrency !== void 0 ? rewardCurrency : undefined,\n    chainId: chainId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(DataRow, {\n    style: {\n      gap: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PoolData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, t('earnPage.totalStaked')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, stakingInfo ? `${(_stakingInfo$totalSta = stakingInfo.totalStakedInPng) === null || _stakingInfo$totalSta === void 0 ? void 0 : _stakingInfo$totalSta.toSignificant(4, {\n    groupSeparator: ','\n  })} PNG` : /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(PoolData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"APR\"), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, stakingInfo ? JSBI.greaterThan(stakingInfo.apr, JSBI.BigInt(0)) ? `${(_stakingInfo$apr = stakingInfo.apr) === null || _stakingInfo$apr === void 0 ? void 0 : _stakingInfo$apr.toLocaleString()}%` : ' - ' : /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }))))), stakingInfo && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StakingModalSingleSide, {\n    isOpen: showStakingModal,\n    onDismiss: () => setShowStakingModal(false),\n    stakingInfo: stakingInfo,\n    userLiquidityUnstaked: userPngUnstaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(UnstakingModalSingleSide, {\n    isOpen: showUnstakingModal,\n    onDismiss: () => setShowUnstakingModal(false),\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ClaimRewardModalSingleSide, {\n    isOpen: showClaimRewardModal,\n    onDismiss: () => setShowClaimRewardModal(false),\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(PositionInfo, {\n    gap: \"lg\",\n    justify: \"center\",\n    dim: showGetPngButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BottomSection, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledDataCard, {\n    bgColor: backgroundColorStakingToken,\n    showBackground: !showGetPngButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 19\n    }\n  }, t('earnPage.yourStakedToken', {\n    symbol: 'PNG'\n  }))), /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      alignItems: 'baseline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 36,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, (_stakingInfo$stakedAm3 = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm4 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm4 === void 0 ? void 0 : _stakingInfo$stakedAm4.toSignificant(6)) !== null && _stakingInfo$stakedAm3 !== void 0 ? _stakingInfo$stakedAm3 : '-'), /*#__PURE__*/React.createElement(TYPE.white, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }\n  }, \"PNG\"))))), /*#__PURE__*/React.createElement(StyledBottomCard, {\n    dim: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm5 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm5 === void 0 ? void 0 : _stakingInfo$stakedAm5.equalTo(JSBI.BigInt(0)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.black, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 19\n    }\n  }, t('earnPage.unclaimedReward', {\n    symbol: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardTo = stakingInfo.rewardToken) === null || _stakingInfo$rewardTo === void 0 ? void 0 : _stakingInfo$rewardTo.symbol\n  }))), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && JSBI.notEqual(BIG_INT_ZERO, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm3 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm3 === void 0 ? void 0 : _stakingInfo$earnedAm3.raw) && /*#__PURE__*/React.createElement(ButtonEmpty, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: \"fit-content\",\n    onClick: () => setShowClaimRewardModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }, t('earnPage.claim'))), /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      alignItems: 'baseline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    fontSize: 36,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CountUp, {\n    key: countUpAmount,\n    isCounting: true,\n    decimalPlaces: 4,\n    start: parseFloat(countUpAmountPrevious),\n    end: parseFloat(countUpAmount),\n    thousandsSeparator: ',',\n    duration: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.black, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"wizard-icon\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }\n  }, \"\\u26A1\"), (_stakingInfo$rewardRa = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardRa2 = stakingInfo.rewardRatePerWeek) === null || _stakingInfo$rewardRa2 === void 0 ? void 0 : _stakingInfo$rewardRa2.toSignificant(4, {\n    groupSeparator: ','\n  })) !== null && _stakingInfo$rewardRa !== void 0 ? _stakingInfo$rewardRa : '-', t('earnPage.rewardPerWeek', {\n    symbol: rewardCurrency === null || rewardCurrency === void 0 ? void 0 : rewardCurrency.symbol\n  }))))))), /*#__PURE__*/React.createElement(DataRow, {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, (userPngUnstaked === null || userPngUnstaked === void 0 ? void 0 : userPngUnstaked.greaterThan('0')) ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    width: \"auto\",\n    onClick: handleStakeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, (stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm6 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm6 === void 0 ? void 0 : _stakingInfo$stakedAm6.greaterThan(JSBI.BigInt(0))) ? t('earnPage.stake') : t('earnPage.stakeStakingTokens', {\n    symbol: 'PNG'\n  })) : /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"10px\",\n    width: \"auto\",\n    as: Link,\n    to: `/swap?inputCurrency=${ZERO_ADDRESS}&outputCurrency=${png.address}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, t('earnPage.getToken', {\n    symbol: 'PNG'\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm7 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm7 === void 0 ? void 0 : _stakingInfo$stakedAm7.greaterThan('0')) && /*#__PURE__*/React.createElement(ButtonSecondary, {\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    width: \"auto\",\n    onClick: () => setShowUnstakingModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, t('earnPage.unstake'))), (userPngUnstaked === null || userPngUnstaked === void 0 ? void 0 : userPngUnstaked.greaterThan('0')) && /*#__PURE__*/React.createElement(TYPE.main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, userPngUnstaked.toSignificant(6), \" \", t('earnPage.stakingTokensAvailable', {\n    symbol: 'PNG'\n  })));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Stake/Manage.tsx"],"names":["React","useCallback","useMemo","useState","styled","JSBI","Link","useCurrency","useWalletModalToggle","TYPE","RowBetween","AutoColumn","CardSection","DataCard","ButtonPrimary","ButtonEmpty","ButtonSecondary","useSingleSideStakingInfo","useActiveWeb3React","useChainId","useColor","CountUp","wrappedCurrency","usePrevious","BIG_INT_ZERO","ZERO_ADDRESS","PNG","CurrencyLogo","StakingModalSingleSide","UnstakingModalSingleSide","ClaimRewardModalSingleSide","useTokenBalance","useTranslation","Loader","PageWrapper","PositionInfo","dim","BottomSection","StyledDataCard","theme","bgColor","showBackground","black","bg5","StyledBottomCard","bg3","PoolData","bg4","DataRow","mediaWidth","upToSmall","Manage","match","params","rewardCurrencyId","version","account","chainId","t","rewardCurrency","rewardToken","undefined","stakingInfo","Number","png","backgroundColorStakingToken","userPngUnstaked","stakedAmount","token","showGetPngButton","Boolean","equalTo","showStakingModal","setShowStakingModal","showUnstakingModal","setShowUnstakingModal","showClaimRewardModal","setShowClaimRewardModal","countUpAmount","earnedAmount","toFixed","countUpAmountPrevious","toggleWalletModal","handleStakeClick","gap","margin","totalStakedInPng","toSignificant","groupSeparator","greaterThan","apr","BigInt","toLocaleString","symbol","alignItems","notEqual","raw","parseFloat","marginRight","rewardRatePerWeek","marginBottom","address"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { JSBI } from '@pangolindex/sdk'\nimport { Link, RouteComponentProps } from 'react-router-dom'\nimport { useCurrency } from 'src/hooks/Tokens'\nimport { useWalletModalToggle } from 'src/state/application/hooks'\nimport { TYPE } from 'src/theme'\n\nimport { RowBetween } from 'src/components/Row'\nimport { AutoColumn } from 'src/components/Column'\nimport { CardSection, DataCard } from 'src/components/earn/styled'\nimport { ButtonPrimary, ButtonEmpty, ButtonSecondary } from 'src/components/Button'\nimport { useSingleSideStakingInfo } from 'src/state/stake/hooks'\nimport { useActiveWeb3React, useChainId } from 'src/hooks'\nimport { useColor } from 'src/hooks/useColor'\nimport { CountUp } from 'use-count-up'\n\nimport { wrappedCurrency } from 'src/utils/wrappedCurrency'\nimport usePrevious from 'src/hooks/usePrevious'\nimport { BIG_INT_ZERO, ZERO_ADDRESS } from 'src/constants'\nimport { PNG } from 'src/constants/tokens'\nimport CurrencyLogo from 'src/components/CurrencyLogo'\nimport StakingModalSingleSide from 'src/components/earn/StakingModalSingleSide'\nimport UnstakingModalSingleSide from 'src/components/earn/UnstakingModalSingleSide'\nimport ClaimRewardModalSingleSide from 'src/components/earn/ClaimRewardModalSingleSide'\nimport { useTokenBalance } from 'src/state/wallet/hooks'\nimport { useTranslation } from 'react-i18next'\nimport Loader from 'src/components/Loader'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst PositionInfo = styled(AutoColumn)<{ dim: any }>`\n  position: relative;\n  max-width: 640px;\n  width: 100%;\n  opacity: ${({ dim }) => (dim ? 0.6 : 1)};\n`\n\nconst BottomSection = styled(AutoColumn)`\n  border-radius: 12px;\n  width: 100%;\n  position: relative;\n`\n\nconst StyledDataCard = styled(DataCard)<{ bgColor?: any; showBackground?: any }>`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n  z-index: 2;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: ${({ theme, bgColor, showBackground }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `};\n`\n\nconst StyledBottomCard = styled(DataCard)<{ dim: any }>`\n  background: ${({ theme }) => theme.bg3};\n  opacity: ${({ dim }) => (dim ? 0.4 : 1)};\n  margin-top: -40px;\n  padding: 0 1.25rem 1rem 1.25rem;\n  padding-top: 32px;\n  z-index: 1;\n`\n\nconst PoolData = styled(DataCard)`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.bg4};\n  padding: 1rem;\n  z-index: 1;\n`\n\nconst DataRow = styled(RowBetween)`\n  justify-content: center;\n  gap: 12px;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n     flex-direction: column;\n     gap: 12px;\n   `};\n`\n\nexport default function Manage({\n  match: {\n    params: { rewardCurrencyId, version }\n  }\n}: RouteComponentProps<{ rewardCurrencyId: string; version: string }>) {\n  const { account } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  const { t } = useTranslation()\n\n  const rewardCurrency = useCurrency(rewardCurrencyId)\n  const rewardToken = wrappedCurrency(rewardCurrency ?? undefined, chainId)\n\n  const stakingInfo = useSingleSideStakingInfo(Number(version), rewardToken)?.[0]\n  const png = PNG[chainId]\n\n  const backgroundColorStakingToken = useColor(png)\n\n  // detect existing unstaked position to show purchase button if none found\n  const userPngUnstaked = useTokenBalance(account ?? undefined, stakingInfo?.stakedAmount?.token)\n  const showGetPngButton = useMemo(() => {\n    if (!userPngUnstaked || !stakingInfo) return true\n    return Boolean(stakingInfo?.stakedAmount?.equalTo('0') && userPngUnstaked?.equalTo('0'))\n  }, [stakingInfo, userPngUnstaked])\n\n  const [showStakingModal, setShowStakingModal] = useState(false)\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false)\n  const [showClaimRewardModal, setShowClaimRewardModal] = useState(false)\n\n  const countUpAmount = stakingInfo?.earnedAmount?.toFixed(6) ?? '0'\n  const countUpAmountPrevious = usePrevious(countUpAmount) ?? '0'\n\n  const toggleWalletModal = useWalletModalToggle()\n\n  const handleStakeClick = useCallback(() => {\n    if (account) {\n      setShowStakingModal(true)\n    } else {\n      toggleWalletModal()\n    }\n  }, [account, toggleWalletModal])\n\n  return (\n    <PageWrapper gap=\"lg\" justify=\"center\">\n      <RowBetween style={{ gap: '24px' }}>\n        {chainId && <CurrencyLogo currency={png} chainId={chainId} />}\n        <TYPE.mediumHeader style={{ margin: 0 }}>{t('earnPage.pngStaking')}</TYPE.mediumHeader>\n        {chainId && <CurrencyLogo currency={rewardCurrency ?? undefined} chainId={chainId} />}\n      </RowBetween>\n\n      <DataRow style={{ gap: '24px' }}>\n        <PoolData>\n          <AutoColumn gap=\"sm\">\n            <TYPE.body style={{ margin: 0 }}>{t('earnPage.totalStaked')}</TYPE.body>\n            <TYPE.body fontSize={24} fontWeight={500}>\n              {stakingInfo ? (\n                `${stakingInfo.totalStakedInPng?.toSignificant(4, { groupSeparator: ',' })} PNG`\n              ) : (\n                <Loader />\n              )}\n            </TYPE.body>\n          </AutoColumn>\n        </PoolData>\n        <PoolData>\n          <AutoColumn gap=\"sm\">\n            <TYPE.body style={{ margin: 0 }}>APR</TYPE.body>\n            <TYPE.body fontSize={24} fontWeight={500}>\n              {stakingInfo ? (\n                JSBI.greaterThan(stakingInfo.apr, JSBI.BigInt(0)) ? (\n                  `${stakingInfo.apr?.toLocaleString()}%`\n                ) : (\n                  ' - '\n                )\n              ) : (\n                <Loader />\n              )}\n            </TYPE.body>\n          </AutoColumn>\n        </PoolData>\n      </DataRow>\n\n      {stakingInfo && (\n        <>\n          <StakingModalSingleSide\n            isOpen={showStakingModal}\n            onDismiss={() => setShowStakingModal(false)}\n            stakingInfo={stakingInfo}\n            userLiquidityUnstaked={userPngUnstaked}\n          />\n          <UnstakingModalSingleSide\n            isOpen={showUnstakingModal}\n            onDismiss={() => setShowUnstakingModal(false)}\n            stakingInfo={stakingInfo}\n          />\n          <ClaimRewardModalSingleSide\n            isOpen={showClaimRewardModal}\n            onDismiss={() => setShowClaimRewardModal(false)}\n            stakingInfo={stakingInfo}\n          />\n        </>\n      )}\n\n      <PositionInfo gap=\"lg\" justify=\"center\" dim={showGetPngButton}>\n        <BottomSection gap=\"lg\" justify=\"center\">\n          <StyledDataCard bgColor={backgroundColorStakingToken} showBackground={!showGetPngButton}>\n            <CardSection>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <TYPE.white fontWeight={600}>{t('earnPage.yourStakedToken', { symbol: 'PNG' })}</TYPE.white>\n                </RowBetween>\n                <RowBetween style={{ alignItems: 'baseline' }}>\n                  <TYPE.white fontSize={36} fontWeight={600}>\n                    {stakingInfo?.stakedAmount?.toSignificant(6) ?? '-'}\n                  </TYPE.white>\n                  <TYPE.white>PNG</TYPE.white>\n                </RowBetween>\n              </AutoColumn>\n            </CardSection>\n          </StyledDataCard>\n          <StyledBottomCard dim={stakingInfo?.stakedAmount?.equalTo(JSBI.BigInt(0))}>\n            <AutoColumn gap=\"sm\">\n              <RowBetween>\n                <div>\n                  <TYPE.black>{t('earnPage.unclaimedReward', { symbol: stakingInfo?.rewardToken?.symbol })}</TYPE.black>\n                </div>\n                {stakingInfo?.earnedAmount && JSBI.notEqual(BIG_INT_ZERO, stakingInfo?.earnedAmount?.raw) && (\n                  <ButtonEmpty\n                    padding=\"8px\"\n                    borderRadius=\"8px\"\n                    width=\"fit-content\"\n                    onClick={() => setShowClaimRewardModal(true)}\n                  >\n                    {t('earnPage.claim')}\n                  </ButtonEmpty>\n                )}\n              </RowBetween>\n              <RowBetween style={{ alignItems: 'baseline' }}>\n                <TYPE.largeHeader fontSize={36} fontWeight={600}>\n                  <CountUp\n                    key={countUpAmount}\n                    isCounting\n                    decimalPlaces={4}\n                    start={parseFloat(countUpAmountPrevious)}\n                    end={parseFloat(countUpAmount)}\n                    thousandsSeparator={','}\n                    duration={1}\n                  />\n                </TYPE.largeHeader>\n                <TYPE.black fontSize={16} fontWeight={500}>\n                  <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px' }}>\n                    ⚡\n                  </span>\n                  {stakingInfo?.rewardRatePerWeek?.toSignificant(4, { groupSeparator: ',' }) ?? '-'}\n                  {t('earnPage.rewardPerWeek', { symbol: rewardCurrency?.symbol })}\n                </TYPE.black>\n              </RowBetween>\n            </AutoColumn>\n          </StyledBottomCard>\n        </BottomSection>\n      </PositionInfo>\n\n      <DataRow style={{ marginBottom: '1rem' }}>\n        {userPngUnstaked?.greaterThan('0') ? (\n          <ButtonPrimary padding=\"10px\" borderRadius=\"8px\" width=\"auto\" onClick={handleStakeClick}>\n            {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0))\n              ? t('earnPage.stake')\n              : t('earnPage.stakeStakingTokens', { symbol: 'PNG' })}\n          </ButtonPrimary>\n        ) : (\n          <ButtonPrimary\n            padding=\"10px\"\n            width=\"auto\"\n            as={Link}\n            to={`/swap?inputCurrency=${ZERO_ADDRESS}&outputCurrency=${png.address}`}\n          >\n            {t('earnPage.getToken', { symbol: 'PNG' })}\n          </ButtonPrimary>\n        )}\n\n        {stakingInfo?.stakedAmount?.greaterThan('0') && (\n          <ButtonSecondary padding=\"10px\" borderRadius=\"8px\" width=\"auto\" onClick={() => setShowUnstakingModal(true)}>\n            {t('earnPage.unstake')}\n          </ButtonSecondary>\n        )}\n      </DataRow>\n\n      {userPngUnstaked?.greaterThan('0') && (\n        <TYPE.main>\n          {userPngUnstaked.toSignificant(6)} {t('earnPage.stakingTokensAvailable', { symbol: 'PNG' })}\n        </TYPE.main>\n      )}\n    </PageWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}