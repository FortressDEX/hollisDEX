{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/PurchaseForm/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nexport const FormContext = React.createContext(undefined);\nexport function isEmpty(input) {\n  return Object.keys(input).length === 0;\n}\nexport default function PurchaseForm(_ref) {\n  let {\n    initialValues,\n    onSubmit,\n    onReset,\n    children,\n    id,\n    className\n  } = _ref;\n\n  function initState() {\n    return {\n      data: { ...initialValues\n      },\n      validators: {},\n      errors: {}\n    };\n  }\n\n  const [formState, setFormState] = useState(initState());\n\n  const validate = () => {\n    const {\n      validators\n    } = formState;\n    setFormState(state => ({ ...state,\n      errors: {}\n    }));\n\n    if (isEmpty(validators)) {\n      return true;\n    }\n\n    const formErrors = Object.entries(validators).reduce((errors, _ref2) => {\n      let [name, validators] = _ref2;\n      const {\n        data\n      } = formState;\n      const messages = validators.reduce((result, validator) => {\n        const value = data[name];\n        const err = validator(value);\n        return [...result, ...err];\n      }, []);\n\n      if (messages.length > 0) {\n        errors[name] = messages;\n      }\n\n      return errors;\n    }, {});\n\n    if (isEmpty(formErrors)) {\n      return true;\n    }\n\n    setFormState(state => ({ ...state,\n      errors: formErrors\n    }));\n    return false;\n  };\n\n  const validateField = name => {\n    const formErrors = formState.errors;\n    const validators = formState.validators[name];\n    const messages = validators.reduce((result, validator) => {\n      const value = formState.data[name];\n      const err = validator(value);\n      return [...result, ...err];\n    }, []);\n\n    if (messages.length > 0) {\n      formErrors[name] = messages;\n    }\n\n    setFormState(state => ({ ...state,\n      errors: formErrors\n    }));\n  };\n\n  const setFieldValue = (name, value) => {\n    setFormState(state => {\n      return { ...state,\n        data: { ...state.data,\n          [name]: value\n        },\n        errors: { ...state.errors,\n          [name]: []\n        }\n      };\n    });\n  };\n\n  const registerInput = useCallback(_ref3 => {\n    let {\n      name,\n      validators\n    } = _ref3;\n    setFormState(state => {\n      return { ...state,\n        validators: { ...state.validators,\n          [name]: validators || []\n        },\n        errors: { ...state.errors,\n          [name]: []\n        }\n      };\n    });\n    return () => {\n      setFormState(state => {\n        const {\n          data,\n          errors,\n          validators: currentValidators\n        } = { ...state\n        };\n        delete data[name];\n        delete errors[name];\n        delete currentValidators[name];\n        return {\n          data,\n          errors,\n          validators: currentValidators\n        };\n      });\n    };\n  }, []);\n  const providerValue = {\n    errors: formState.errors,\n    data: formState.data,\n    setFieldValue,\n    validateField,\n    registerInput\n  };\n  return /*#__PURE__*/React.createElement(FormContext.Provider, {\n    value: providerValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n\n      if (validate()) {\n        onSubmit(formState.data);\n      }\n    },\n    onReset: event => {\n      event.preventDefault();\n      setFormState(initState());\n\n      if (onReset) {\n        onReset();\n      }\n    },\n    className: className,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, children));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/PurchaseForm/index.tsx"],"names":["React","useCallback","useState","FormContext","createContext","undefined","isEmpty","input","Object","keys","length","PurchaseForm","initialValues","onSubmit","onReset","children","id","className","initState","data","validators","errors","formState","setFormState","validate","state","formErrors","entries","reduce","name","messages","result","validator","value","err","validateField","setFieldValue","registerInput","currentValidators","providerValue","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nexport const FormContext = React.createContext<any | undefined>(undefined)\n\nexport interface Data {\n  [key: string]: any\n}\n\nexport type Validator = (val: string) => string[]\n\nexport interface Validators {\n  [key: string]: Validator[]\n}\n\nexport interface Errors {\n  [key: string]: string[]\n}\n\nexport interface FormState {\n  data: Data\n  validators: Validators\n  errors: Errors\n}\n\ninterface FormProps {\n  initialValues?: Data\n  onSubmit: (data: Data) => void\n  onReset?: () => void\n  children?: React.ReactNode\n  id?: string\n  className?: string\n}\n\nexport function isEmpty(input: Validators | Errors): boolean {\n  return Object.keys(input).length === 0\n}\n\nexport default function PurchaseForm({ initialValues, onSubmit, onReset, children, id, className }: FormProps) {\n  function initState(): FormState {\n    return {\n      data: {\n        ...initialValues\n      },\n      validators: {},\n      errors: {}\n    }\n  }\n\n  const [formState, setFormState] = useState<FormState>(initState())\n  const validate = () => {\n    const { validators } = formState\n\n    setFormState(state => ({\n      ...state,\n      errors: {}\n    }))\n\n    if (isEmpty(validators)) {\n      return true\n    }\n\n    const formErrors = Object.entries(validators).reduce<Errors>((errors, [name, validators]) => {\n      const { data } = formState\n      const messages = validators.reduce<string[]>((result, validator) => {\n        const value = data[name]\n        const err = validator(value)\n        return [...result, ...err]\n      }, [])\n\n      if (messages.length > 0) {\n        errors[name] = messages\n      }\n\n      return errors\n    }, {})\n\n    if (isEmpty(formErrors)) {\n      return true\n    }\n\n    setFormState(state => ({\n      ...state,\n      errors: formErrors\n    }))\n\n    return false\n  }\n\n  const validateField = (name: string) => {\n    const formErrors = formState.errors\n    const validators = formState.validators[name]\n    const messages = validators.reduce<string[]>((result, validator) => {\n      const value = formState.data[name]\n      const err = validator(value)\n      return [...result, ...err]\n    }, [])\n    if (messages.length > 0) {\n      formErrors[name] = messages\n    }\n    setFormState(state => ({\n      ...state,\n      errors: formErrors\n    }))\n  }\n\n  const setFieldValue = (name: string, value: any) => {\n    setFormState(state => {\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [name]: value\n        },\n        errors: {\n          ...state.errors,\n          [name]: []\n        }\n      }\n    })\n  }\n\n  const registerInput = useCallback(({ name, validators }: { name: string; validators: Validator[] }) => {\n    setFormState(\n      (state: FormState): FormState => {\n        return {\n          ...state,\n          validators: {\n            ...state.validators,\n            [name]: validators || []\n          },\n          errors: {\n            ...state.errors,\n            [name]: []\n          }\n        }\n      }\n    )\n\n    return () => {\n      setFormState(state => {\n        const { data, errors, validators: currentValidators } = { ...state }\n        delete data[name]\n        delete errors[name]\n        delete currentValidators[name]\n\n        return {\n          data,\n          errors,\n          validators: currentValidators\n        }\n      })\n    }\n  }, [])\n\n  const providerValue = {\n    errors: formState.errors,\n    data: formState.data,\n    setFieldValue,\n    validateField,\n    registerInput\n  }\n\n  return (\n    <FormContext.Provider value={providerValue}>\n      <form\n        onSubmit={event => {\n          event.preventDefault()\n          if (validate()) {\n            onSubmit(formState.data)\n          }\n        }}\n        onReset={event => {\n          event.preventDefault()\n          setFormState(initState())\n          if (onReset) {\n            onReset()\n          }\n        }}\n        className={className}\n        id={id}\n      >\n        {children}\n      </form>\n    </FormContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}