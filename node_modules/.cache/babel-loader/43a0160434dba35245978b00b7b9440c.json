{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/RewardTokens/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { PNG } from '../../constants/tokens';\nimport { CurrencyLogo } from '@pangolindex/components';\nimport { useChainId } from 'src/hooks';\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  margin-right: ${_ref => {\n  let {\n    sizeraw,\n    margin\n  } = _ref;\n  return margin && (sizeraw / 3 + 8).toString() + 'px';\n}};\n`;\nconst CoveredLogo = styled(CurrencyLogo)`\n  position: absolute;\n  left: ${_ref2 => {\n  let {\n    sizeraw\n  } = _ref2;\n  return '-' + (sizeraw / 2).toString() + 'px';\n}} !important;\n`;\nexport default function RewardTokens(_ref3) {\n  let {\n    rewardTokens = [],\n    size = 24,\n    margin = false\n  } = _ref3;\n  const chainId = useChainId();\n  const tokens = [PNG[chainId], ...(rewardTokens || [])]; // add PNG as default reward\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    sizeraw: size,\n    margin: margin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, (tokens || []).map((token, i) => {\n    return /*#__PURE__*/React.createElement(CoveredLogo, {\n      key: i,\n      currency: token,\n      size: size,\n      sizeraw: size,\n      imageSize: 48,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/RewardTokens/index.tsx"],"names":["React","styled","PNG","CurrencyLogo","useChainId","Wrapper","div","sizeraw","margin","toString","CoveredLogo","RewardTokens","rewardTokens","size","chainId","tokens","map","token","i"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,GAAT,QAAoB,wBAApB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,MAAMC,OAAO,GAAGJ,MAAM,CAACK,GAA0C;AACjE;AACA;AACA;AACA,kBAAkB;AAAA,MAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD;AAAA,SAAyBA,MAAM,IAAI,CAACD,OAAO,GAAG,CAAV,GAAc,CAAf,EAAkBE,QAAlB,KAA+B,IAAlE;AAAA,CAAuE;AACzF,CALA;AAaA,MAAMC,WAAW,GAAGT,MAAM,CAACE,YAAD,CAAoC;AAC9D;AACA,UAAU;AAAA,MAAC;AAAEI,IAAAA;AAAF,GAAD;AAAA,SAAiB,MAAM,CAACA,OAAO,GAAG,CAAX,EAAcE,QAAd,EAAN,GAAiC,IAAlD;AAAA,CAAuD;AACjE,CAHA;AAKA,eAAe,SAASE,YAAT,QAA+F;AAAA,MAAzE;AAAEC,IAAAA,YAAY,GAAG,EAAjB;AAAqBC,IAAAA,IAAI,GAAG,EAA5B;AAAgCL,IAAAA,MAAM,GAAG;AAAzC,GAAyE;AAC5G,QAAMM,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAMW,MAAM,GAAG,CAACb,GAAG,CAACY,OAAD,CAAJ,EAAe,IAAIF,YAAY,IAAI,EAApB,CAAf,CAAf,CAF4G,CAErD;;AAEvD,sBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEC,IAAlB;AAAwB,IAAA,MAAM,EAAEL,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACO,MAAM,IAAI,EAAX,EAAeC,GAAf,CAAmB,CAACC,KAAD,EAAQC,CAAR,KAAc;AAChC,wBAAO,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,CAAlB;AAAqB,MAAA,QAAQ,EAAED,KAA/B;AAA+C,MAAA,IAAI,EAAEJ,IAArD;AAA2D,MAAA,OAAO,EAAEA,IAApE;AAA0E,MAAA,SAAS,EAAE,EAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CADF;AAOD","sourcesContent":["import { Token } from '@pangolindex/sdk'\nimport React from 'react'\nimport { LogoSize } from 'src/constants'\nimport styled from 'styled-components'\nimport { PNG } from '../../constants/tokens'\nimport { CurrencyLogo } from '@pangolindex/components'\nimport { useChainId } from 'src/hooks'\n\nconst Wrapper = styled.div<{ margin: boolean; sizeraw: number }>`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  margin-right: ${({ sizeraw, margin }) => margin && (sizeraw / 3 + 8).toString() + 'px'};\n`\n\ninterface RewardTokensLogoProps {\n  margin?: boolean\n  size?: LogoSize\n  rewardTokens?: Array<Token | null | undefined> | null\n}\n\nconst CoveredLogo = styled(CurrencyLogo)<{ sizeraw: number }>`\n  position: absolute;\n  left: ${({ sizeraw }) => '-' + (sizeraw / 2).toString() + 'px'} !important;\n`\n\nexport default function RewardTokens({ rewardTokens = [], size = 24, margin = false }: RewardTokensLogoProps) {\n  const chainId = useChainId()\n  const tokens = [PNG[chainId], ...(rewardTokens || [])] // add PNG as default reward\n\n  return (\n    <Wrapper sizeraw={size} margin={margin}>\n      {(tokens || []).map((token, i) => {\n        return <CoveredLogo key={i} currency={token as Token} size={size} sizeraw={size} imageSize={48} />\n      })}\n    </Wrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}