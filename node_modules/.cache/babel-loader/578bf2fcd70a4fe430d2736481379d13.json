{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/DetailModal/UnstakeDrawer/index.tsx\";\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Drawer from 'src/components/Drawer';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useStakingContract } from 'src/hooks/useContract';\nimport { useTransactionAdder } from 'src/state/transactions/hooks';\nimport { Box, Button, Text } from '@pangolindex/components';\nimport { ConfirmWrapper, Wrapper } from './styled';\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted';\nimport Loader from 'src/components/Beta/Loader';\n\nconst UnstakeDrawer = _ref => {\n  var _stakingInfo$stakedAm, _stakingInfo$earnedAm, _stakingInfo$rewardTo, _error2;\n\n  let {\n    isOpen,\n    onClose,\n    stakingInfo\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onClose();\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onWithdraw() {\n    if (stakingContract && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      await stakingContract.exit({\n        gasLimit: 300000\n      }).then(response => {\n        addTransaction(response, {\n          summary: t('earn.withdrawDepositedLiquidity')\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.error(error);\n        }\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(Drawer, {\n    title: t('earnPage.unstake'),\n    isOpen: isOpen,\n    onClose: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ConfirmWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    width: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"26px\",\n    fontWeight: 500,\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.toSignificant(6)), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"16px\",\n    fontWeight: 500,\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, t('earn.depositedToken', {\n    symbol: 'PNG'\n  }))), /*#__PURE__*/React.createElement(Box, {\n    width: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"26px\",\n    fontWeight: 500,\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(6)), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"16px\",\n    fontWeight: 500,\n    color: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, t('earn.unclaimedReward', {\n    symbol: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardTo = stakingInfo.rewardToken) === null || _stakingInfo$rewardTo === void 0 ? void 0 : _stakingInfo$rewardTo.symbol\n  })))), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"14px\",\n    color: \"text2\",\n    mt: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"You can unstake your rewards.\"), /*#__PURE__*/React.createElement(Box, {\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    isDisabled: !!error,\n    onClick: onWithdraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.withdrawAndClaim')))), attempting && !hash && /*#__PURE__*/React.createElement(Loader, {\n    size: 100,\n    label: \"Unstaking\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }), hash && /*#__PURE__*/React.createElement(TransactionCompleted, {\n    onClose: wrappedOnDismiss,\n    submitText: \"Unstaked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 18\n    }\n  })));\n};\n\nexport default UnstakeDrawer;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Stake/DetailModal/UnstakeDrawer/index.tsx"],"names":["React","useState","useTranslation","Drawer","useActiveWeb3React","useStakingContract","useTransactionAdder","Box","Button","Text","ConfirmWrapper","Wrapper","TransactionCompleted","Loader","UnstakeDrawer","isOpen","onClose","stakingInfo","t","account","addTransaction","hash","setHash","attempting","setAttempting","wrappedOnDismiss","undefined","stakingContract","stakingRewardAddress","onWithdraw","stakedAmount","exit","gasLimit","then","response","summary","catch","error","code","console","toSignificant","symbol","earnedAmount","rewardToken"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Drawer from 'src/components/Drawer'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useStakingContract } from 'src/hooks/useContract'\nimport { SingleSideStakingInfo } from 'src/state/stake/hooks'\nimport { useTransactionAdder } from 'src/state/transactions/hooks'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Box, Button, Text } from '@pangolindex/components'\nimport { ConfirmWrapper, Wrapper } from './styled'\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted'\nimport Loader from 'src/components/Beta/Loader'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  stakingInfo: SingleSideStakingInfo\n}\n\nconst UnstakeDrawer: React.FC<Props> = ({ isOpen, onClose, stakingInfo }) => {\n  const { t } = useTranslation()\n\n  const { account } = useActiveWeb3React()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onClose()\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onWithdraw() {\n    if (stakingContract && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      await stakingContract\n        .exit({ gasLimit: 300000 })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.withdrawDepositedLiquidity')\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <Drawer title={t('earnPage.unstake')} isOpen={isOpen} onClose={wrappedOnDismiss}>\n      <Wrapper>\n        {!attempting && !hash && (\n          <ConfirmWrapper>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Box width=\"50%\">\n                <Text fontSize=\"26px\" fontWeight={500} color=\"text1\">\n                  {stakingInfo.stakedAmount?.toSignificant(6)}\n                </Text>\n                <Text fontSize=\"16px\" fontWeight={500} color=\"text1\">\n                  {t('earn.depositedToken', { symbol: 'PNG' })}\n                </Text>\n              </Box>\n              <Box width=\"50%\">\n                <Text fontSize=\"26px\" fontWeight={500} color=\"text1\">\n                  {stakingInfo.earnedAmount?.toSignificant(6)}\n                </Text>\n                <Text fontSize=\"16px\" fontWeight={500} color=\"text1\">\n                  {t('earn.unclaimedReward', { symbol: stakingInfo?.rewardToken?.symbol })}\n                </Text>\n              </Box>\n            </Box>\n            <Text fontSize=\"14px\" color=\"text2\" mt={20}>\n              {/* {t('earn.whenYouWithdrawSingleSideWarning', { symbol: stakingInfo?.rewardToken?.symbol })} */}\n              You can unstake your rewards.\n            </Text>\n            <Box flex={1} />\n            <Box mt={'10px'}>\n              <Button variant=\"primary\" isDisabled={!!error} onClick={onWithdraw}>\n                {error ?? t('earn.withdrawAndClaim')}\n              </Button>\n            </Box>\n          </ConfirmWrapper>\n        )}\n        {attempting && !hash && <Loader size={100} label=\"Unstaking\" />}\n        {hash && <TransactionCompleted onClose={wrappedOnDismiss} submitText=\"Unstaked\" />}\n      </Wrapper>\n    </Drawer>\n  )\n}\n\nexport default UnstakeDrawer\n"]},"metadata":{},"sourceType":"module"}