{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/ProgressSteps/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { AutoColumn } from '../Column';\nimport { transparentize } from 'polished';\nconst Wrapper = styled(AutoColumn)``;\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`;\nconst Circle = styled.div`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${_ref => {\n  let {\n    theme,\n    confirmed,\n    disabled\n  } = _ref;\n  return disabled ? theme.bg4 : confirmed ? theme.green1 : theme.primary1;\n}};\n  border-radius: 50%;\n  color: ${_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.white;\n}};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`;\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`;\nconst Connector = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${_ref3 => {\n  let {\n    theme,\n    prevConfirmed,\n    disabled\n  } = _ref3;\n  return disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary1);\n}}\n      0%,\n    ${_ref4 => {\n  let {\n    theme,\n    prevConfirmed,\n    disabled\n  } = _ref4;\n  return disabled ? theme.bg4 : prevConfirmed ? theme.primary1 : theme.bg4;\n}} 80%\n  );\n  opacity: 0.6;\n`;\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles(_ref5) {\n  let {\n    steps,\n    disabled = false,\n    ...rest\n  } = _ref5;\n  return /*#__PURE__*/React.createElement(Wrapper, Object.assign({\n    justify: 'center'\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Grouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, steps.map((step, i) => {\n    return /*#__PURE__*/React.createElement(CircleRow, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Circle, {\n      confirmed: step,\n      disabled: disabled || !steps[i - 1] && i !== 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, step ? '✓' : i + 1), /*#__PURE__*/React.createElement(Connector, {\n      prevConfirmed: step,\n      disabled: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(Circle, {\n    disabled: disabled || !steps[steps.length - 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, steps.length + 1)));\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/components/ProgressSteps/index.tsx"],"names":["React","styled","RowBetween","AutoColumn","transparentize","Wrapper","Grouping","Circle","div","theme","confirmed","disabled","bg4","green1","primary1","white","CircleRow","Connector","prevConfirmed","ProgressCircles","steps","rest","map","step","i","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { AutoColumn } from '../Column'\nimport { transparentize } from 'polished'\n\nconst Wrapper = styled(AutoColumn)``\n\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`\n\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({ theme, confirmed, disabled }) =>\n    disabled ? theme.bg4 : confirmed ? theme.green1 : theme.primary1};\n  border-radius: 50%;\n  color: ${({ theme }) => theme.white};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`\n\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`\n\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled ? theme.bg4 : transparentize(0.5, prevConfirmed ? theme.green1 : theme.primary1)}\n      0%,\n    ${({ theme, prevConfirmed, disabled }) => (disabled ? theme.bg4 : prevConfirmed ? theme.primary1 : theme.bg4)} 80%\n  );\n  opacity: 0.6;\n`\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  return (\n    <Wrapper justify={'center'} {...rest}>\n      <Grouping>\n        {steps.map((step, i) => {\n          return (\n            <CircleRow key={i}>\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\n                {step ? '✓' : i + 1}\n              </Circle>\n              <Connector prevConfirmed={step} disabled={disabled} />\n            </CircleRow>\n          )\n        })}\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\n      </Grouping>\n    </Wrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}