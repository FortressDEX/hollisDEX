{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport { useQuery } from 'react-query';\nimport { CAVAX, ChainId, Pair, Token, TokenAmount } from '@pangolindex/sdk';\nimport { ethers } from 'ethers';\nimport { CHAINS } from 'src/constants/chains';\nimport { useActiveWeb3React, useChainId } from 'src/hooks';\nexport class TokenDataUser {\n  constructor(token, price, amount, protocol) {\n    this.token = void 0;\n    this.price = void 0;\n    this.amount = void 0;\n    this.usdValue = void 0;\n    this.protocol = void 0;\n    this.token = token;\n    this.price = price;\n    this.amount = amount;\n    this.usdValue = price * amount;\n    this.protocol = protocol;\n  }\n\n}\nexport class PairDataUser {\n  constructor(pair, usdValue, protocol) {\n    this.pair = void 0;\n    this.usdValue = void 0;\n    this.protocol = void 0;\n    this.pair = pair;\n    this.usdValue = usdValue;\n    this.protocol = protocol;\n  }\n\n}\nconst openApi = axios.create({\n  baseURL: 'https://openapi.debank.com/v1/user',\n  timeout: 2000\n}); // Get the USD balance of address of all chains (supported by Debank)\n\nexport function useGetChainsBalances() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const query = qs.stringify({\n    id: account\n  }, {\n    encodeValuesOnly: true\n  });\n  return useQuery('getChainsBalances', async () => {\n    if (account) {\n      var _data$chain_list;\n\n      const response = await openApi.get(`/total_balance?${query}`);\n      const data = response.data;\n      const chainbalances = {\n        0: data === null || data === void 0 ? void 0 : data.total_usd_value\n      };\n      data === null || data === void 0 ? void 0 : (_data$chain_list = data.chain_list) === null || _data$chain_list === void 0 ? void 0 : _data$chain_list.forEach(chain => {\n        chainbalances[chain === null || chain === void 0 ? void 0 : chain.community_id] = chain === null || chain === void 0 ? void 0 : chain.usd_value;\n      });\n      return chainbalances;\n    }\n\n    return {};\n  });\n} // Get the USD balance of address of connected chain\n\nexport function useGetChainBalance() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const chainId = useChainId();\n\n  const getChainBalance = async () => {\n    if (account && chainId) {\n      let id = chainId;\n\n      if (id === ChainId.FUJI || id === ChainId.WAGMI) {\n        id = ChainId.AVALANCHE;\n      }\n\n      const chain = CHAINS[id];\n      const query = qs.stringify({\n        id: account,\n        chain_id: chain.symbol.toLowerCase()\n      }, {\n        encodeValuesOnly: true\n      });\n      const response = await openApi.get(`/chain_balance?${query}`);\n      const data = response.data;\n      return data === null || data === void 0 ? void 0 : data.usd_value;\n    }\n\n    return 0;\n  };\n\n  return useQuery('getChainBalance', getChainBalance, {\n    refetchInterval: 10000\n  });\n} // Get the Tokens of wallet\n\nexport function useGetWalletChainTokens() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const chainId = useChainId(); // This functions is temporary for Pangolin birthday\n\n  const getPangolinPairs = async () => {\n    const query = qs.stringify({\n      id: account,\n      protocol_id: 'avax_pangolin'\n    }, {\n      encodeValuesOnly: true\n    });\n\n    if (account && chainId) {\n      const response = await openApi.get(`/protocol?${query}`);\n      const data = response.data;\n      const requestPairs = data === null || data === void 0 ? void 0 : data.portfolio_item_list.map(pair => {\n        var _pair$detail, _pair$detail2, _pair$stats;\n\n        const token1 = pair === null || pair === void 0 ? void 0 : (_pair$detail = pair.detail) === null || _pair$detail === void 0 ? void 0 : _pair$detail.supply_token_list[0];\n        const token2 = pair === null || pair === void 0 ? void 0 : (_pair$detail2 = pair.detail) === null || _pair$detail2 === void 0 ? void 0 : _pair$detail2.supply_token_list[1]; // If token2 does not exist its because this pair is not a pair but a single staking\n\n        if (!token2) {\n          return new TokenDataUser(new Token(chainId, ethers.utils.getAddress(token1 === null || token1 === void 0 ? void 0 : token1.id), token1 === null || token1 === void 0 ? void 0 : token1.decimals, `${token1 === null || token1 === void 0 ? void 0 : token1.symbol} - Staked`, token1 === null || token1 === void 0 ? void 0 : token1.name), token1 === null || token1 === void 0 ? void 0 : token1.price, token1 === null || token1 === void 0 ? void 0 : token1.amount);\n        }\n\n        const tokenA = new TokenAmount(new Token(chainId, ethers.utils.getAddress(token1 === null || token1 === void 0 ? void 0 : token1.id), token1 === null || token1 === void 0 ? void 0 : token1.decimals, token1 === null || token1 === void 0 ? void 0 : token1.symbol, token1 === null || token1 === void 0 ? void 0 : token1.name), token1 === null || token1 === void 0 ? void 0 : token1.amount.toString().replace('.', ''));\n        const tokenB = new TokenAmount(new Token(chainId, ethers.utils.getAddress(token2 === null || token2 === void 0 ? void 0 : token2.id), token2 === null || token2 === void 0 ? void 0 : token2.decimals, token2 === null || token2 === void 0 ? void 0 : token2.symbol, token2 === null || token2 === void 0 ? void 0 : token2.name), token2 === null || token2 === void 0 ? void 0 : token2.amount.toString().replace('.', ''));\n        return new PairDataUser(new Pair(tokenA, tokenB, chainId), pair === null || pair === void 0 ? void 0 : (_pair$stats = pair.stats) === null || _pair$stats === void 0 ? void 0 : _pair$stats.net_usd_value);\n      });\n      return requestPairs;\n    }\n\n    return [];\n  };\n\n  const getBalance = async () => {\n    if (account && chainId) {\n      let id = chainId;\n\n      if (id === ChainId.FUJI) {\n        id = ChainId.AVALANCHE;\n      }\n\n      const chain = CHAINS[id];\n      const query = qs.stringify({\n        id: account,\n        chain_id: chain.symbol.toLowerCase()\n      }, {\n        encodeValuesOnly: true\n      });\n      const response = await openApi.get(`/token_list?${query}`);\n      const data = response.data;\n      const requestTokens = data.map(token => {\n        var _token$id;\n\n        if ((token === null || token === void 0 ? void 0 : (_token$id = token.id) === null || _token$id === void 0 ? void 0 : _token$id.toLowerCase()) === 'avax') {\n          return new TokenDataUser(CAVAX[chainId], token === null || token === void 0 ? void 0 : token.price, token === null || token === void 0 ? void 0 : token.amount);\n        }\n\n        return new TokenDataUser(new Token(chainId, ethers.utils.getAddress(token === null || token === void 0 ? void 0 : token.id), token === null || token === void 0 ? void 0 : token.decimals, token === null || token === void 0 ? void 0 : token.symbol, token === null || token === void 0 ? void 0 : token.name), token === null || token === void 0 ? void 0 : token.price, token === null || token === void 0 ? void 0 : token.amount);\n      });\n\n      if (chainId === ChainId.AVALANCHE) {\n        const pairs = await getPangolinPairs();\n        const tokens = [...requestTokens, ...pairs];\n        return tokens;\n      }\n\n      return requestTokens;\n    }\n\n    return [];\n  };\n\n  return useQuery('getWalletChainTokens', async () => {\n    const tokens = await getBalance();\n    tokens.sort((a, b) => b.usdValue - a.usdValue);\n    const filterTokens = tokens.filter(token => token.usdValue >= 0.01);\n    return filterTokens;\n  }, {\n    refetchInterval: 10000\n  });\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/portifolio/hooks.ts"],"names":["axios","qs","useQuery","CAVAX","ChainId","Pair","Token","TokenAmount","ethers","CHAINS","useActiveWeb3React","useChainId","TokenDataUser","constructor","token","price","amount","protocol","usdValue","PairDataUser","pair","openApi","create","baseURL","timeout","useGetChainsBalances","account","query","stringify","id","encodeValuesOnly","response","get","data","chainbalances","total_usd_value","chain_list","forEach","chain","community_id","usd_value","useGetChainBalance","chainId","getChainBalance","FUJI","WAGMI","AVALANCHE","chain_id","symbol","toLowerCase","refetchInterval","useGetWalletChainTokens","getPangolinPairs","protocol_id","requestPairs","portfolio_item_list","map","token1","detail","supply_token_list","token2","utils","getAddress","decimals","name","tokenA","toString","replace","tokenB","stats","net_usd_value","getBalance","requestTokens","pairs","tokens","sort","a","b","filterTokens","filter"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\nimport { useQuery } from 'react-query'\nimport { CAVAX, ChainId, Currency, Pair, Token, TokenAmount } from '@pangolindex/sdk'\nimport { ethers } from 'ethers'\nimport { CHAINS, ChainsId } from 'src/constants/chains'\nimport { useActiveWeb3React, useChainId } from 'src/hooks'\n\nexport type ChainBalances = {\n  [chainID in ChainsId]: number\n}\n\nexport interface Protocol {\n  id: string\n  name: string\n  url: string\n  logo: string\n}\n\nexport class TokenDataUser {\n  token: Currency | Token\n  price: number\n  amount: number\n  usdValue: number\n  protocol?: Protocol\n\n  constructor(token: Token | Currency, price: number, amount: number, protocol?: Protocol) {\n    this.token = token\n    this.price = price\n    this.amount = amount\n    this.usdValue = price * amount\n    this.protocol = protocol\n  }\n}\n\nexport class PairDataUser {\n  pair: Pair\n  usdValue: number\n  protocol?: Protocol\n\n  constructor(pair: Pair, usdValue: number, protocol?: Protocol) {\n    this.pair = pair\n    this.usdValue = usdValue\n    this.protocol = protocol\n  }\n}\n\nconst openApi = axios.create({\n  baseURL: 'https://openapi.debank.com/v1/user',\n  timeout: 2000\n})\n\n// Get the USD balance of address of all chains (supported by Debank)\nexport function useGetChainsBalances() {\n  const { account } = useActiveWeb3React()\n\n  const query = qs.stringify(\n    {\n      id: account\n    },\n    {\n      encodeValuesOnly: true\n    }\n  )\n\n  return useQuery('getChainsBalances', async () => {\n    if (account) {\n      const response = await openApi.get(`/total_balance?${query}`)\n      const data = response.data\n      const chainbalances: any = {\n        0: data?.total_usd_value\n      }\n\n      data?.chain_list?.forEach((chain: any) => {\n        chainbalances[chain?.community_id] = chain?.usd_value\n      })\n      return chainbalances as ChainBalances\n    }\n\n    return {} as ChainBalances\n  })\n}\n\n// Get the USD balance of address of connected chain\nexport function useGetChainBalance() {\n  const { account } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  const getChainBalance = async () => {\n    if (account && chainId) {\n      let id = chainId\n      if (id === ChainId.FUJI || id === ChainId.WAGMI) {\n        id = ChainId.AVALANCHE\n      }\n\n      const chain = CHAINS[id]\n\n      const query = qs.stringify(\n        {\n          id: account,\n          chain_id: chain.symbol.toLowerCase()\n        },\n        {\n          encodeValuesOnly: true\n        }\n      )\n\n      const response = await openApi.get(`/chain_balance?${query}`)\n      const data = response.data\n\n      return data?.usd_value\n    }\n\n    return 0\n  }\n  return useQuery('getChainBalance', getChainBalance, { refetchInterval: 10000 })\n}\n\n// Get the Tokens of wallet\nexport function useGetWalletChainTokens() {\n  const { account } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  // This functions is temporary for Pangolin birthday\n  const getPangolinPairs = async () => {\n    const query = qs.stringify(\n      {\n        id: account,\n        protocol_id: 'avax_pangolin'\n      },\n      {\n        encodeValuesOnly: true\n      }\n    )\n    if (account && chainId) {\n      const response = await openApi.get(`/protocol?${query}`)\n      const data = response.data\n\n      const requestPairs: (TokenDataUser | PairDataUser)[] = data?.portfolio_item_list.map((pair: any) => {\n        const token1 = pair?.detail?.supply_token_list[0]\n        const token2 = pair?.detail?.supply_token_list[1]\n        // If token2 does not exist its because this pair is not a pair but a single staking\n        if (!token2) {\n          return new TokenDataUser(\n            new Token(\n              chainId,\n              ethers.utils.getAddress(token1?.id),\n              token1?.decimals,\n              `${token1?.symbol} - Staked`,\n              token1?.name\n            ),\n            token1?.price,\n            token1?.amount\n          )\n        }\n\n        const tokenA = new TokenAmount(\n          new Token(chainId, ethers.utils.getAddress(token1?.id), token1?.decimals, token1?.symbol, token1?.name),\n          token1?.amount.toString().replace('.', '')\n        )\n\n        const tokenB = new TokenAmount(\n          new Token(chainId, ethers.utils.getAddress(token2?.id), token2?.decimals, token2?.symbol, token2?.name),\n          token2?.amount.toString().replace('.', '')\n        )\n\n        return new PairDataUser(new Pair(tokenA, tokenB, chainId), pair?.stats?.net_usd_value)\n      })\n      return requestPairs\n    }\n    return []\n  }\n\n  const getBalance = async () => {\n    if (account && chainId) {\n      let id = chainId\n      if (id === ChainId.FUJI) {\n        id = ChainId.AVALANCHE\n      }\n      const chain = CHAINS[id]\n\n      const query = qs.stringify(\n        {\n          id: account,\n          chain_id: chain.symbol.toLowerCase()\n        },\n        {\n          encodeValuesOnly: true\n        }\n      )\n\n      const response = await openApi.get(`/token_list?${query}`)\n      const data = response.data\n\n      const requestTokens: TokenDataUser[] = data.map((token: any) => {\n        if (token?.id?.toLowerCase() === 'avax') {\n          return new TokenDataUser(CAVAX[chainId], token?.price, token?.amount)\n        }\n\n        return new TokenDataUser(\n          new Token(chainId, ethers.utils.getAddress(token?.id), token?.decimals, token?.symbol, token?.name),\n          token?.price,\n          token?.amount\n        )\n      })\n\n      if (chainId === ChainId.AVALANCHE) {\n        const pairs = await getPangolinPairs()\n        const tokens = [...requestTokens, ...pairs]\n        return tokens\n      }\n\n      return requestTokens\n    }\n    return []\n  }\n\n  return useQuery(\n    'getWalletChainTokens',\n    async () => {\n      const tokens = await getBalance()\n      tokens.sort((a, b) => b.usdValue - a.usdValue)\n\n      const filterTokens = tokens.filter(token => token.usdValue >= 0.01)\n\n      return filterTokens\n    },\n    {\n      refetchInterval: 10000\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}