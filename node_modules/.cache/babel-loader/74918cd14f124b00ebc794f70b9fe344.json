{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/ClaimReward/index.tsx\";\nimport React, { useState } from 'react';\nimport { Box, Text, Button } from '@pangolindex/components';\nimport { ClaimWrapper, Root, RewardWrapper, StatWrapper } from './styleds';\nimport { useMinichefPendingRewards } from 'src/state/stake/hooks';\nimport { useTransactionAdder } from 'src/state/transactions/hooks';\nimport { useActiveWeb3React } from 'src/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { useMinichefPools } from 'src/state/stake/hooks';\nimport { useStakingContract } from 'src/hooks/useContract';\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted';\nimport Loader from 'src/components/Beta/Loader';\nimport Stat from 'src/components/Stat';\n\nconst ClaimReward = _ref => {\n  var _ref2, _stakingInfo$earnedAm, _error2;\n\n  let {\n    stakingInfo,\n    version,\n    onClose\n  } = _ref;\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n  const poolMap = useMinichefPools();\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n  const {\n    rewardTokensAmount\n  } = useMinichefPendingRewards(stakingInfo);\n  const isSuperFarm = ((_ref2 = rewardTokensAmount || []) === null || _ref2 === void 0 ? void 0 : _ref2.length) > 0;\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onClose();\n  }\n\n  async function onClaimReward() {\n    if (stakingContract && poolMap && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      const method = version < 2 ? 'getReward' : 'harvest';\n      const args = version < 2 ? [] : [poolMap[stakingInfo.stakedAmount.token.address], account];\n      await stakingContract[method](...args).then(response => {\n        addTransaction(response, {\n          summary: t('earn.claimAccumulated', {\n            symbol: 'PNG'\n          })\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false); // we only care if the error is something _other_ than the user rejected the tx\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.error(error);\n        }\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(ClaimWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flex: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RewardWrapper, {\n    isSuperFarm: isSuperFarm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StatWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    title: t('earn.unclaimedReward', {\n      symbol: 'PNG'\n    }),\n    stat: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(6),\n    titlePosition: \"top\",\n    titleFontSize: 12,\n    statFontSize: 24,\n    titleColor: \"text1\",\n    statAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })), isSuperFarm && (rewardTokensAmount === null || rewardTokensAmount === void 0 ? void 0 : rewardTokensAmount.map((rewardAmount, i) => {\n    var _rewardAmount$token;\n\n    return /*#__PURE__*/React.createElement(StatWrapper, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Stat, {\n      title: t('earn.unclaimedReward', {\n        symbol: rewardAmount === null || rewardAmount === void 0 ? void 0 : (_rewardAmount$token = rewardAmount.token) === null || _rewardAmount$token === void 0 ? void 0 : _rewardAmount$token.symbol\n      }),\n      stat: rewardAmount === null || rewardAmount === void 0 ? void 0 : rewardAmount.toSignificant(6),\n      titlePosition: \"top\",\n      titleFontSize: 12,\n      statFontSize: 24,\n      titleColor: \"text1\",\n      statAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }));\n  }))), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"13px\",\n    color: \"text2\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, t('earn.liquidityRemainsPool'))), /*#__PURE__*/React.createElement(Box, {\n    my: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: onClaimReward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.claimReward', {\n    symbol: 'PNG'\n  })))), attempting && !hash && /*#__PURE__*/React.createElement(Loader, {\n    size: 100,\n    label: \" Claiming...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 31\n    }\n  }), hash && /*#__PURE__*/React.createElement(TransactionCompleted, {\n    onClose: wrappedOnDismiss,\n    submitText: \"Your rewards claimed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 16\n    }\n  }));\n};\n\nexport default ClaimReward;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Pool/ClaimReward/index.tsx"],"names":["React","useState","Box","Text","Button","ClaimWrapper","Root","RewardWrapper","StatWrapper","useMinichefPendingRewards","useTransactionAdder","useActiveWeb3React","useTranslation","useMinichefPools","useStakingContract","TransactionCompleted","Loader","Stat","ClaimReward","stakingInfo","version","onClose","account","t","addTransaction","hash","setHash","attempting","setAttempting","poolMap","stakingContract","stakingRewardAddress","rewardTokensAmount","isSuperFarm","length","wrappedOnDismiss","undefined","onClaimReward","stakedAmount","method","args","token","address","then","response","summary","symbol","catch","error","code","console","earnedAmount","toSignificant","map","rewardAmount","i"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Box, Text, Button } from '@pangolindex/components'\nimport { ClaimWrapper, Root, RewardWrapper, StatWrapper } from './styleds'\nimport { StakingInfo, useMinichefPendingRewards } from 'src/state/stake/hooks'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from 'src/state/transactions/hooks'\nimport { useActiveWeb3React } from 'src/hooks'\nimport { useTranslation } from 'react-i18next'\nimport { useMinichefPools } from 'src/state/stake/hooks'\nimport { useStakingContract } from 'src/hooks/useContract'\nimport TransactionCompleted from 'src/components/Beta/TransactionCompleted'\nimport Loader from 'src/components/Beta/Loader'\nimport Stat from 'src/components/Stat'\n\ninterface ClaimProps {\n  stakingInfo: StakingInfo\n  version: number\n  onClose: () => void\n}\nconst ClaimReward = ({ stakingInfo, version, onClose }: ClaimProps) => {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  const poolMap = useMinichefPools()\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  const { rewardTokensAmount } = useMinichefPendingRewards(stakingInfo)\n\n  const isSuperFarm = (rewardTokensAmount || [])?.length > 0\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onClose()\n  }\n\n  async function onClaimReward() {\n    if (stakingContract && poolMap && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      const method = version < 2 ? 'getReward' : 'harvest'\n      const args = version < 2 ? [] : [poolMap[stakingInfo.stakedAmount.token.address], account]\n\n      await stakingContract[method](...args)\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.claimAccumulated', { symbol: 'PNG' })\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          if (error?.code !== 4001) {\n            console.error(error)\n          }\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <ClaimWrapper>\n      {!attempting && !hash && (\n        <Root>\n          <Box flex=\"1\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n            <RewardWrapper isSuperFarm={isSuperFarm}>\n              <StatWrapper>\n                <Stat\n                  title={t('earn.unclaimedReward', { symbol: 'PNG' })}\n                  stat={stakingInfo?.earnedAmount?.toSignificant(6)}\n                  titlePosition=\"top\"\n                  titleFontSize={12}\n                  statFontSize={24}\n                  titleColor=\"text1\"\n                  statAlign=\"center\"\n                />\n              </StatWrapper>\n\n              {isSuperFarm &&\n                rewardTokensAmount?.map((rewardAmount, i) => (\n                  <StatWrapper key={i}>\n                    <Stat\n                      title={t('earn.unclaimedReward', { symbol: rewardAmount?.token?.symbol })}\n                      stat={rewardAmount?.toSignificant(6)}\n                      titlePosition=\"top\"\n                      titleFontSize={12}\n                      statFontSize={24}\n                      titleColor=\"text1\"\n                      statAlign=\"center\"\n                    />\n                  </StatWrapper>\n                ))}\n            </RewardWrapper>\n\n            <Text fontSize=\"13px\" color=\"text2\" textAlign=\"center\">\n              {t('earn.liquidityRemainsPool')}\n            </Text>\n          </Box>\n\n          <Box my={'10px'}>\n            <Button variant=\"primary\" onClick={onClaimReward}>\n              {error ?? t('earn.claimReward', { symbol: 'PNG' })}\n            </Button>\n          </Box>\n        </Root>\n      )}\n\n      {attempting && !hash && <Loader size={100} label=\" Claiming...\" />}\n\n      {hash && <TransactionCompleted onClose={wrappedOnDismiss} submitText=\"Your rewards claimed\" />}\n    </ClaimWrapper>\n  )\n}\nexport default ClaimReward\n"]},"metadata":{},"sourceType":"module"}