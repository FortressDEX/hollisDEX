{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Swap/LimitOrderList/index.tsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Text, Box, ToggleButtons, useGelatoLimitOrderList } from '@pangolindex/components';\nimport LimitOrderRow from './LimitOrderRow';\nimport { DesktopLimitOrderList, GridContainer, MobileLimitOrderList } from './styleds';\nimport Scrollbars from 'react-custom-scrollbars';\nimport LimitOrderDetail from './LimitOrderDetail';\nimport { useTranslation } from 'react-i18next';\nimport CancelOrderModal from './CancelOrderModal';\nimport MobileLimitOrderRow from './MobileLimitOrderRow';\nimport ShowMore from 'src/components/Beta/ShowMore';\nimport DropdownMenu from 'src/components/Beta/DropdownMenu';\nexport let TabType;\n\n(function (TabType) {\n  TabType[\"open\"] = \"OPEN\";\n  TabType[\"executed\"] = \"EXECUTED\";\n  TabType[\"cancelled\"] = \"CANCELLED\";\n})(TabType || (TabType = {}));\n\nexport const LimitOrderTypeOptions = [{\n  label: TabType === null || TabType === void 0 ? void 0 : TabType.open,\n  value: TabType === null || TabType === void 0 ? void 0 : TabType.open\n}, {\n  label: TabType === null || TabType === void 0 ? void 0 : TabType.executed,\n  value: TabType === null || TabType === void 0 ? void 0 : TabType.executed\n}, {\n  label: TabType === null || TabType === void 0 ? void 0 : TabType.cancelled,\n  value: TabType === null || TabType === void 0 ? void 0 : TabType.cancelled\n}];\n\nconst LimitOrderList = () => {\n  const {\n    t\n  } = useTranslation();\n  const [activeTab, setActiveTab] = useState(TabType.open);\n  const [showMore, setShowMore] = useState(false);\n  const {\n    allOpenOrders,\n    allCancelledOrders,\n    executed\n  } = useGelatoLimitOrderList();\n  const [isCancelLimitOrderModalOpen, setIsCancelLimitOrderModalOpen] = useState(false);\n  const handleCancelLimitOrderModal = useCallback(() => {\n    setIsCancelLimitOrderModalOpen(false);\n  }, [setIsCancelLimitOrderModalOpen]);\n  const [selectedOrder, setSelectedOrder] = useState({});\n  let displayOrders;\n\n  if (activeTab === TabType.open) {\n    displayOrders = allOpenOrders;\n  } else if (activeTab === TabType.cancelled) {\n    displayOrders = allCancelledOrders;\n  } else {\n    displayOrders = executed;\n  }\n\n  useEffect(() => {\n    if ((displayOrders || []).length > 0) {\n      var _displayOrders;\n\n      setSelectedOrder((_displayOrders = displayOrders) === null || _displayOrders === void 0 ? void 0 : _displayOrders[0]);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [displayOrders]);\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MobileLimitOrderList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    color: \"text1\",\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, t('swapPage.limitOrders')), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropdownMenu, {\n    options: LimitOrderTypeOptions,\n    value: activeTab,\n    onSelect: value => {\n      setActiveTab(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Box, {\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, (displayOrders || []).length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, (displayOrders || []).slice(0, 3).map(order => /*#__PURE__*/React.createElement(MobileLimitOrderRow, {\n    order: order,\n    key: order.id,\n    onClick: () => setSelectedOrder(order),\n    isSelected: (order === null || order === void 0 ? void 0 : order.id) === (selectedOrder === null || selectedOrder === void 0 ? void 0 : selectedOrder.id),\n    onClickCancelOrder: () => setIsCancelLimitOrderModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })), showMore && (displayOrders || []).slice(3).map(order => /*#__PURE__*/React.createElement(MobileLimitOrderRow, {\n    order: order,\n    key: order.id,\n    onClick: () => setSelectedOrder(order),\n    isSelected: (order === null || order === void 0 ? void 0 : order.id) === (selectedOrder === null || selectedOrder === void 0 ? void 0 : selectedOrder.id),\n    onClickCancelOrder: () => setIsCancelLimitOrderModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })), displayOrders.length > 3 && /*#__PURE__*/React.createElement(ShowMore, {\n    showMore: showMore,\n    onToggle: () => setShowMore(!showMore),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 44\n    }\n  })) : /*#__PURE__*/React.createElement(Text, {\n    color: \"text1\",\n    fontSize: 18,\n    fontWeight: 500,\n    marginLeft: '6px',\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, t('swapPage.noLimitOrder', {\n    orderType: activeTab\n  })))), /*#__PURE__*/React.createElement(DesktopLimitOrderList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    color: \"text1\",\n    fontSize: 32,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, t('swapPage.limitOrders')), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtons, {\n    options: [t('swapPage.open'), t('swapPage.executed'), t('swapPage.cancelled')],\n    value: activeTab,\n    onChange: value => {\n      setActiveTab(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LimitOrderDetail, {\n    order: selectedOrder,\n    onClickCancelOrder: () => setIsCancelLimitOrderModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, (displayOrders || []).length > 0 ? /*#__PURE__*/React.createElement(Scrollbars, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, (displayOrders || []).map(order => /*#__PURE__*/React.createElement(LimitOrderRow, {\n    order: order,\n    key: order.id,\n    onClick: () => setSelectedOrder(order),\n    isSelected: (order === null || order === void 0 ? void 0 : order.id) === (selectedOrder === null || selectedOrder === void 0 ? void 0 : selectedOrder.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }))) : /*#__PURE__*/React.createElement(Text, {\n    color: \"text1\",\n    fontSize: 18,\n    fontWeight: 500,\n    marginLeft: '6px',\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, t('swapPage.noLimitOrder', {\n    orderType: activeTab\n  })))), /*#__PURE__*/React.createElement(CancelOrderModal, {\n    isOpen: isCancelLimitOrderModalOpen,\n    onClose: handleCancelLimitOrderModal,\n    order: selectedOrder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default LimitOrderList;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/pages/Beta/Swap/LimitOrderList/index.tsx"],"names":["React","useState","useEffect","useCallback","Text","Box","ToggleButtons","useGelatoLimitOrderList","LimitOrderRow","DesktopLimitOrderList","GridContainer","MobileLimitOrderList","Scrollbars","LimitOrderDetail","useTranslation","CancelOrderModal","MobileLimitOrderRow","ShowMore","DropdownMenu","TabType","LimitOrderTypeOptions","label","open","value","executed","cancelled","LimitOrderList","t","activeTab","setActiveTab","showMore","setShowMore","allOpenOrders","allCancelledOrders","isCancelLimitOrderModalOpen","setIsCancelLimitOrderModalOpen","handleCancelLimitOrderModal","selectedOrder","setSelectedOrder","displayOrders","length","slice","map","order","id","orderType"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { Text, Box, ToggleButtons, useGelatoLimitOrderList } from '@pangolindex/components'\nimport LimitOrderRow from './LimitOrderRow'\nimport { DesktopLimitOrderList, GridContainer, MobileLimitOrderList } from './styleds'\nimport Scrollbars from 'react-custom-scrollbars'\nimport LimitOrderDetail from './LimitOrderDetail'\nimport { useTranslation } from 'react-i18next'\nimport { Order } from '@gelatonetwork/limit-orders-react'\nimport CancelOrderModal from './CancelOrderModal'\nimport MobileLimitOrderRow from './MobileLimitOrderRow'\nimport ShowMore from 'src/components/Beta/ShowMore'\nimport DropdownMenu from 'src/components/Beta/DropdownMenu'\n\nexport enum TabType {\n  open = 'OPEN',\n  executed = 'EXECUTED',\n  cancelled = 'CANCELLED'\n}\n\nexport const LimitOrderTypeOptions = [\n  {\n    label: TabType?.open,\n    value: TabType?.open\n  },\n  {\n    label: TabType?.executed,\n    value: TabType?.executed\n  },\n  {\n    label: TabType?.cancelled,\n    value: TabType?.cancelled\n  }\n]\n\nconst LimitOrderList = () => {\n  const { t } = useTranslation()\n\n  const [activeTab, setActiveTab] = useState(TabType.open as string)\n\n  const [showMore, setShowMore] = useState(false as boolean)\n\n  const { allOpenOrders, allCancelledOrders, executed } = useGelatoLimitOrderList()\n\n  const [isCancelLimitOrderModalOpen, setIsCancelLimitOrderModalOpen] = useState(false)\n\n  const handleCancelLimitOrderModal = useCallback(() => {\n    setIsCancelLimitOrderModalOpen(false)\n  }, [setIsCancelLimitOrderModalOpen])\n\n  const [selectedOrder, setSelectedOrder] = useState({} as Order)\n\n  let displayOrders: Order[]\n\n  if (activeTab === TabType.open) {\n    displayOrders = allOpenOrders\n  } else if (activeTab === TabType.cancelled) {\n    displayOrders = allCancelledOrders\n  } else {\n    displayOrders = executed\n  }\n\n  useEffect(() => {\n    if ((displayOrders || []).length > 0) {\n      setSelectedOrder(displayOrders?.[0])\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [displayOrders])\n\n  return (\n    <Box>\n      <MobileLimitOrderList>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n          <Text color=\"text1\" fontSize={24} fontWeight={500}>\n            {t('swapPage.limitOrders')}\n          </Text>\n\n          <Box>\n            <DropdownMenu\n              options={LimitOrderTypeOptions}\n              value={activeTab}\n              onSelect={value => {\n                setActiveTab(value)\n              }}\n            />\n          </Box>\n        </Box>\n\n        <Box mt={10}>\n          {(displayOrders || []).length > 0 ? (\n            <>\n              {(displayOrders || []).slice(0, 3).map(order => (\n                <MobileLimitOrderRow\n                  order={order}\n                  key={order.id}\n                  onClick={() => setSelectedOrder(order)}\n                  isSelected={order?.id === selectedOrder?.id}\n                  onClickCancelOrder={() => setIsCancelLimitOrderModalOpen(true)}\n                />\n              ))}\n\n              {showMore &&\n                (displayOrders || [])\n                  .slice(3)\n                  .map(order => (\n                    <MobileLimitOrderRow\n                      order={order}\n                      key={order.id}\n                      onClick={() => setSelectedOrder(order)}\n                      isSelected={order?.id === selectedOrder?.id}\n                      onClickCancelOrder={() => setIsCancelLimitOrderModalOpen(true)}\n                    />\n                  ))}\n\n              {displayOrders.length > 3 && <ShowMore showMore={showMore} onToggle={() => setShowMore(!showMore)} />}\n            </>\n          ) : (\n            <Text color=\"text1\" fontSize={18} fontWeight={500} marginLeft={'6px'} textAlign=\"center\">\n              {t('swapPage.noLimitOrder', {\n                orderType: activeTab\n              })}\n            </Text>\n          )}\n        </Box>\n      </MobileLimitOrderList>\n      <DesktopLimitOrderList>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"text1\" fontSize={32} fontWeight={500}>\n            {t('swapPage.limitOrders')}\n          </Text>\n\n          <Box>\n            <ToggleButtons\n              options={[t('swapPage.open'), t('swapPage.executed'), t('swapPage.cancelled')]}\n              value={activeTab}\n              onChange={value => {\n                setActiveTab(value)\n              }}\n            />\n          </Box>\n        </Box>\n        <GridContainer>\n          <LimitOrderDetail order={selectedOrder} onClickCancelOrder={() => setIsCancelLimitOrderModalOpen(true)} />\n          <Box>\n            {(displayOrders || []).length > 0 ? (\n              <Scrollbars>\n                {(displayOrders || []).map(order => (\n                  <LimitOrderRow\n                    order={order}\n                    key={order.id}\n                    onClick={() => setSelectedOrder(order)}\n                    isSelected={order?.id === selectedOrder?.id}\n                  />\n                ))}\n              </Scrollbars>\n            ) : (\n              <Text color=\"text1\" fontSize={18} fontWeight={500} marginLeft={'6px'} textAlign=\"center\">\n                {t('swapPage.noLimitOrder', {\n                  orderType: activeTab\n                })}\n              </Text>\n            )}\n          </Box>\n        </GridContainer>\n\n        <CancelOrderModal\n          isOpen={isCancelLimitOrderModalOpen}\n          onClose={handleCancelLimitOrderModal}\n          order={selectedOrder}\n        />\n      </DesktopLimitOrderList>\n    </Box>\n  )\n}\nexport default LimitOrderList\n"]},"metadata":{},"sourceType":"module"}