{"ast":null,"code":"import { useMemo, useState, useEffect } from 'react';\nimport { useActiveWeb3React, useChainId } from '../../hooks';\nimport { useTokenBalancesWithLoadingIndicator } from '../wallet/hooks';\nimport { usePairs } from '../../data/Reserves';\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../user/hooks';\nimport { useGetStakingDataWithAPR, useMinichefPools } from '../../state/stake/hooks';\nexport function useGetUserLP() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const chainId = useChainId(); // fetch the user's balances of all tracked V2 LP tokens\n\n  const trackedTokenPairs = useTrackedTokenPairs();\n  const tokenPairsWithLiquidityTokens = useMemo(() => trackedTokenPairs.map(tokens => ({\n    liquidityToken: toV2LiquidityToken(tokens, chainId),\n    tokens\n  })), [trackedTokenPairs, chainId]);\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [tokenPairsWithLiquidityTokens]);\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, liquidityTokens); //fetch the reserves for all V2 pools in which the user has a balance\n\n  const liquidityTokensWithBalances = useMemo(() => tokenPairsWithLiquidityTokens.filter(_ref => {\n    var _v2PairsBalances$liqu;\n\n    let {\n      liquidityToken\n    } = _ref;\n    return (_v2PairsBalances$liqu = v2PairsBalances[liquidityToken.address]) === null || _v2PairsBalances$liqu === void 0 ? void 0 : _v2PairsBalances$liqu.greaterThan('0');\n  }), [tokenPairsWithLiquidityTokens, v2PairsBalances]); //const liquidityTokensWithBalances = tokenPairsWithLiquidityTokens\n\n  const lpTokensWithBalances = useMemo(() => liquidityTokensWithBalances.map(_ref2 => {\n    let {\n      tokens\n    } = _ref2;\n    return tokens;\n  }), [liquidityTokensWithBalances]);\n  const v2Pairs = usePairs(lpTokensWithBalances);\n  const v2IsLoading = fetchingV2PairBalances || (v2Pairs === null || v2Pairs === void 0 ? void 0 : v2Pairs.length) < liquidityTokensWithBalances.length || (v2Pairs === null || v2Pairs === void 0 ? void 0 : v2Pairs.some(V2Pair => !V2Pair));\n  const allV2PairsWithLiquidity = useMemo(() => v2Pairs.map(_ref3 => {\n    let [, pair] = _ref3;\n    return pair;\n  }).filter(v2Pair => Boolean(v2Pair)), [v2Pairs]);\n  const pairWithLpTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(_ref4 => {\n    let {\n      tokens\n    } = _ref4;\n    return tokens;\n  }), [tokenPairsWithLiquidityTokens]);\n  const v2AllPairs = usePairs(pairWithLpTokens);\n  const allV2AllPairsWithLiquidity = useMemo(() => v2AllPairs.map(_ref5 => {\n    let [, pair] = _ref5;\n    return pair;\n  }).filter(v2AllPairs => Boolean(v2AllPairs)), [v2AllPairs]);\n  return useMemo(() => ({\n    v2IsLoading,\n    allV2PairsWithLiquidity,\n    allPairs: allV2AllPairsWithLiquidity\n  }), [v2IsLoading, allV2PairsWithLiquidity, allV2AllPairsWithLiquidity]);\n}\nexport function useGetMigrationData(version) {\n  const {\n    v2IsLoading,\n    allV2PairsWithLiquidity,\n    allPairs\n  } = useGetUserLP();\n  const [allPool, setAllPool] = useState({});\n  const stakingInfos = useGetStakingDataWithAPR(Number(version));\n  const poolMap = useMinichefPools();\n  /* eslint-disable prefer-const */\n\n  useEffect(() => {\n    let pairs = {};\n\n    for (let index = 0; index < stakingInfos.length; index++) {\n      var _stakingInfo$stakedAm, _stakingInfo$stakedAm2;\n\n      const stakingInfo = stakingInfos[index];\n      let pairAddress = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : (_stakingInfo$stakedAm2 = _stakingInfo$stakedAm.token) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.address;\n      let stakingData = stakingInfo;\n      let pair = allPairs.find(data => {\n        var _data$liquidityToken, _stakingData$stakedAm, _stakingData$stakedAm2;\n\n        return (data === null || data === void 0 ? void 0 : (_data$liquidityToken = data.liquidityToken) === null || _data$liquidityToken === void 0 ? void 0 : _data$liquidityToken.address) === (stakingData === null || stakingData === void 0 ? void 0 : (_stakingData$stakedAm = stakingData.stakedAmount) === null || _stakingData$stakedAm === void 0 ? void 0 : (_stakingData$stakedAm2 = _stakingData$stakedAm.token) === null || _stakingData$stakedAm2 === void 0 ? void 0 : _stakingData$stakedAm2.address);\n      });\n\n      if ((stakingData === null || stakingData === void 0 ? void 0 : stakingData.stakedAmount.greaterThan('0')) && poolMap.hasOwnProperty(pairAddress)) {\n        pairs[pairAddress] = {\n          pair: pair,\n          staking: stakingData\n        };\n      }\n    }\n\n    setAllPool(pairs); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [(stakingInfos || []).length]);\n  return useMemo(() => ({\n    allPool,\n    v2IsLoading: v2IsLoading || stakingInfos.length === 0,\n    allV2PairsWithLiquidity,\n    allPairs\n  }), [allPool, v2IsLoading, stakingInfos, allV2PairsWithLiquidity, allPairs]);\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/migrate/hooks.ts"],"names":["useMemo","useState","useEffect","useActiveWeb3React","useChainId","useTokenBalancesWithLoadingIndicator","usePairs","toV2LiquidityToken","useTrackedTokenPairs","useGetStakingDataWithAPR","useMinichefPools","useGetUserLP","account","chainId","trackedTokenPairs","tokenPairsWithLiquidityTokens","map","tokens","liquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","undefined","liquidityTokensWithBalances","filter","address","greaterThan","lpTokensWithBalances","v2Pairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","pair","v2Pair","Boolean","pairWithLpTokens","v2AllPairs","allV2AllPairsWithLiquidity","allPairs","useGetMigrationData","version","allPool","setAllPool","stakingInfos","Number","poolMap","pairs","index","stakingInfo","pairAddress","stakedAmount","token","stakingData","find","data","hasOwnProperty","staking"],"mappings":"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","sourcesContent":["import { useMemo, useState, useEffect } from 'react'\nimport { Pair } from '@pangolindex/sdk'\nimport { useActiveWeb3React, useChainId } from '../../hooks'\nimport { useTokenBalancesWithLoadingIndicator } from '../wallet/hooks'\nimport { usePairs } from '../../data/Reserves'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../user/hooks'\nimport { StakingInfo } from '../stake/hooks'\nimport { useGetStakingDataWithAPR, useMinichefPools } from '../../state/stake/hooks'\n\nexport interface SelectedPoolState {\n  selectedPool: { [address: string]: { pair: Pair; staking?: StakingInfo | undefined } }\n}\n\nexport function useGetUserLP() {\n  const { account } = useActiveWeb3React()\n  const chainId = useChainId()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () =>\n      trackedTokenPairs.map(tokens => ({\n        liquidityToken: toV2LiquidityToken(tokens, chainId),\n        tokens\n      })),\n    [trackedTokenPairs, chainId]\n  )\n\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [\n    tokenPairsWithLiquidityTokens\n  ])\n\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens\n  )\n\n  //fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\n  )\n\n  //const liquidityTokensWithBalances = tokenPairsWithLiquidityTokens\n\n  const lpTokensWithBalances = useMemo(() => liquidityTokensWithBalances.map(({ tokens }) => tokens), [\n    liquidityTokensWithBalances\n  ])\n  const v2Pairs = usePairs(lpTokensWithBalances)\n\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some(V2Pair => !V2Pair)\n\n  const allV2PairsWithLiquidity = useMemo(\n    () => v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair)),\n    [v2Pairs]\n  )\n\n  const pairWithLpTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(({ tokens }) => tokens), [\n    tokenPairsWithLiquidityTokens\n  ])\n  const v2AllPairs = usePairs(pairWithLpTokens)\n\n  const allV2AllPairsWithLiquidity = useMemo(\n    () => v2AllPairs.map(([, pair]) => pair).filter((v2AllPairs): v2AllPairs is Pair => Boolean(v2AllPairs)),\n    [v2AllPairs]\n  )\n\n  return useMemo(() => ({ v2IsLoading, allV2PairsWithLiquidity, allPairs: allV2AllPairsWithLiquidity }), [\n    v2IsLoading,\n    allV2PairsWithLiquidity,\n    allV2AllPairsWithLiquidity\n  ])\n}\n\nexport function useGetMigrationData(version: number) {\n  const { v2IsLoading, allV2PairsWithLiquidity, allPairs } = useGetUserLP()\n\n  const [allPool, setAllPool] = useState({} as { [address: string]: { pair: Pair; staking: StakingInfo } })\n\n  const stakingInfos = useGetStakingDataWithAPR(Number(version))\n\n  const poolMap = useMinichefPools()\n  /* eslint-disable prefer-const */\n  useEffect(() => {\n    let pairs = {} as { [address: string]: { pair: Pair; staking: StakingInfo } }\n\n    for (let index = 0; index < stakingInfos.length; index++) {\n      const stakingInfo = stakingInfos[index]\n\n      let pairAddress = stakingInfo?.stakedAmount?.token?.address\n      let stakingData = stakingInfo\n\n      let pair = allPairs.find(\n        data => data?.liquidityToken?.address === stakingData?.stakedAmount?.token?.address\n      ) as Pair\n\n      if (stakingData?.stakedAmount.greaterThan('0') && poolMap.hasOwnProperty(pairAddress)) {\n        pairs[pairAddress] = {\n          pair: pair,\n          staking: stakingData\n        }\n      }\n    }\n\n    setAllPool(pairs)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [(stakingInfos || []).length])\n\n  return useMemo(\n    () => ({ allPool, v2IsLoading: v2IsLoading || stakingInfos.length === 0, allV2PairsWithLiquidity, allPairs }),\n    [allPool, v2IsLoading, stakingInfos, allV2PairsWithLiquidity, allPairs]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}