{"ast":null,"code":"import getCountry from '../../utils/extractCountry';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateQuote } from './actions';\nimport { WYRE_API_KEY, WYRE_ID, WYRE_API_URL, WYRE_QUOTE_API_ENDPOINT, WYRE_SECRET_KEY } from '../../constants';\nimport CryptoJS from 'crypto-js'; // Signature Calculation using Crypto-js\n\nexport const signature = (url, data) => {\n  const dataToSign = url + data; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n\n  const token = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(dataToSign.toString(CryptoJS.enc.Utf8), WYRE_SECRET_KEY));\n  return token;\n};\nexport function useQuoteRequest(account, amount, sourceCurrency) {\n  const dispatch = useDispatch();\n  const getQuote = useCallback(async () => {\n    if (!account || Number(amount) <= 0 || !Number(amount)) {\n      dispatch(updateQuote({\n        quote: false\n      }));\n    } else {\n      const data = {\n        amount: amount,\n        sourceCurrency: sourceCurrency,\n        destCurrency: 'AVAX',\n        dest: 'avalanche:' + account.toLowerCase(),\n        accountId: WYRE_ID,\n        country: getCountry()\n      };\n      const timestamp = new Date().getTime();\n      const url = `${WYRE_API_URL}${WYRE_QUOTE_API_ENDPOINT}?timestamp=${timestamp}`;\n      const headers = {\n        'X-Api-Key': WYRE_API_KEY,\n        'X-Api-Signature': signature(url, JSON.stringify(data)),\n        'Content-Type': 'application/json'\n      };\n\n      try {\n        const response = await fetch(url, {\n          method: 'post',\n          headers: headers,\n          body: JSON.stringify(data)\n        });\n        const quote = await response.json();\n\n        if (response.status === 200) {\n          dispatch(updateQuote({\n            quote: quote\n          }));\n        } else {\n          dispatch(updateQuote({\n            quote: false\n          }));\n        }\n      } catch (error) {\n        console.debug('Failed to fetch quote from Wyre', error);\n        dispatch(updateQuote({\n          quote: false\n        }));\n      }\n    }\n  }, [dispatch, amount, account, sourceCurrency]);\n  getQuote();\n}\nexport function useGetQuote() {\n  return {\n    quote: useSelector(state => state.wyre.quote)\n  };\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/interface/hollisDEX/src/state/wyre/hooks.tsx"],"names":["getCountry","useCallback","useDispatch","useSelector","updateQuote","WYRE_API_KEY","WYRE_ID","WYRE_API_URL","WYRE_QUOTE_API_ENDPOINT","WYRE_SECRET_KEY","CryptoJS","signature","url","data","dataToSign","token","enc","Hex","stringify","HmacSHA256","toString","Utf8","useQuoteRequest","account","amount","sourceCurrency","dispatch","getQuote","Number","quote","destCurrency","dest","toLowerCase","accountId","country","timestamp","Date","getTime","headers","JSON","response","fetch","method","body","json","status","error","console","debug","useGetQuote","state","wyre"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,4BAAvB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,YAAhC,EAA8CC,uBAA9C,EAAuEC,eAAvE,QAA8F,iBAA9F;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAcC,IAAd,KAA+B;AACtD,QAAMC,UAAU,GAAGF,GAAG,GAAGC,IAAzB,CADsD,CAEtD;AACA;;AACA,QAAME,KAAK,GAAGL,QAAQ,CAACM,GAAT,CAAaC,GAAb,CAAiBC,SAAjB,CAA2BR,QAAQ,CAACS,UAAT,CAAoBL,UAAU,CAACM,QAAX,CAAoBV,QAAQ,CAACM,GAAT,CAAaK,IAAjC,CAApB,EAA4DZ,eAA5D,CAA3B,CAAd;AACA,SAAOM,KAAP;AACD,CANM;AAQP,OAAO,SAASO,eAAT,CAAyBC,OAAzB,EAA6DC,MAA7D,EAA6EC,cAA7E,EAA2G;AAChH,QAAMC,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,QAAMyB,QAAQ,GAAG1B,WAAW,CAAC,YAAY;AACvC,QAAI,CAACsB,OAAD,IAAYK,MAAM,CAACJ,MAAD,CAAN,IAAkB,CAA9B,IAAmC,CAACI,MAAM,CAACJ,MAAD,CAA9C,EAAwD;AACtDE,MAAAA,QAAQ,CAACtB,WAAW,CAAC;AAAEyB,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAZ,CAAR;AACD,KAFD,MAEO;AACL,YAAMhB,IAAI,GAAG;AACXW,QAAAA,MAAM,EAAEA,MADG;AAEXC,QAAAA,cAAc,EAAEA,cAFL;AAGXK,QAAAA,YAAY,EAAE,MAHH;AAIXC,QAAAA,IAAI,EAAE,eAAeR,OAAO,CAACS,WAAR,EAJV;AAKXC,QAAAA,SAAS,EAAE3B,OALA;AAMX4B,QAAAA,OAAO,EAAElC,UAAU;AANR,OAAb;AASA,YAAMmC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,YAAMzB,GAAG,GAAI,GAAEL,YAAa,GAAEC,uBAAwB,cAAa2B,SAAU,EAA7E;AAEA,YAAMG,OAAO,GAAG;AACd,qBAAajC,YADC;AAEd,2BAAmBM,SAAS,CAACC,GAAD,EAAM2B,IAAI,CAACrB,SAAL,CAAeL,IAAf,CAAN,CAFd;AAGd,wBAAgB;AAHF,OAAhB;;AAMA,UAAI;AACF,cAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAAC7B,GAAD,EAAM;AAChC8B,UAAAA,MAAM,EAAE,MADwB;AAEhCJ,UAAAA,OAAO,EAAEA,OAFuB;AAGhCK,UAAAA,IAAI,EAAEJ,IAAI,CAACrB,SAAL,CAAeL,IAAf;AAH0B,SAAN,CAA5B;AAKA,cAAMgB,KAAK,GAAG,MAAMW,QAAQ,CAACI,IAAT,EAApB;;AACA,YAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3BnB,UAAAA,QAAQ,CAACtB,WAAW,CAAC;AAAEyB,YAAAA,KAAK,EAAEA;AAAT,WAAD,CAAZ,CAAR;AACD,SAFD,MAEO;AACLH,UAAAA,QAAQ,CAACtB,WAAW,CAAC;AAAEyB,YAAAA,KAAK,EAAE;AAAT,WAAD,CAAZ,CAAR;AACD;AACF,OAZD,CAYE,OAAOiB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,KAAR,CAAc,iCAAd,EAAiDF,KAAjD;AACApB,QAAAA,QAAQ,CAACtB,WAAW,CAAC;AAAEyB,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAZ,CAAR;AACD;AACF;AACF,GAvC2B,EAuCzB,CAACH,QAAD,EAAWF,MAAX,EAAmBD,OAAnB,EAA4BE,cAA5B,CAvCyB,CAA5B;AAyCAE,EAAAA,QAAQ;AACT;AAED,OAAO,SAASsB,WAAT,GAAuB;AAC5B,SAAO;AACLpB,IAAAA,KAAK,EAAE1B,WAAW,CAAsC+C,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWtB,KAA1D;AADb,GAAP;AAGD","sourcesContent":["import getCountry from '../../utils/extractCountry'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppDispatch, AppState } from '../../state'\nimport { updateQuote } from './actions'\nimport { WYRE_API_KEY, WYRE_ID, WYRE_API_URL, WYRE_QUOTE_API_ENDPOINT, WYRE_SECRET_KEY } from '../../constants'\nimport CryptoJS from 'crypto-js'\n\n// Signature Calculation using Crypto-js\nexport const signature = (url: string, data: string) => {\n  const dataToSign = url + data\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  const token = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(dataToSign.toString(CryptoJS.enc.Utf8), WYRE_SECRET_KEY))\n  return token\n}\n\nexport function useQuoteRequest(account: string | null | undefined, amount: string, sourceCurrency: string): void {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const getQuote = useCallback(async () => {\n    if (!account || Number(amount) <= 0 || !Number(amount)) {\n      dispatch(updateQuote({ quote: false }))\n    } else {\n      const data = {\n        amount: amount,\n        sourceCurrency: sourceCurrency,\n        destCurrency: 'AVAX',\n        dest: 'avalanche:' + account.toLowerCase(),\n        accountId: WYRE_ID,\n        country: getCountry()\n      }\n\n      const timestamp = new Date().getTime()\n      const url = `${WYRE_API_URL}${WYRE_QUOTE_API_ENDPOINT}?timestamp=${timestamp}`\n\n      const headers = {\n        'X-Api-Key': WYRE_API_KEY,\n        'X-Api-Signature': signature(url, JSON.stringify(data)),\n        'Content-Type': 'application/json'\n      }\n\n      try {\n        const response = await fetch(url, {\n          method: 'post',\n          headers: headers,\n          body: JSON.stringify(data)\n        })\n        const quote = await response.json()\n        if (response.status === 200) {\n          dispatch(updateQuote({ quote: quote }))\n        } else {\n          dispatch(updateQuote({ quote: false }))\n        }\n      } catch (error) {\n        console.debug('Failed to fetch quote from Wyre', error)\n        dispatch(updateQuote({ quote: false }))\n      }\n    }\n  }, [dispatch, amount, account, sourceCurrency])\n\n  getQuote()\n}\n\nexport function useGetQuote() {\n  return {\n    quote: useSelector<AppState, AppState['wyre']['quote']>(state => state.wyre.quote)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}