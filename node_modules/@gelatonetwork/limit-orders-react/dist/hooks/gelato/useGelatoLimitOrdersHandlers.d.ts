import { Order } from "@gelatonetwork/limit-orders-lib";
import { Overrides } from "@ethersproject/contracts";
import { TransactionResponse } from "@ethersproject/abstract-provider";
import { Field } from "../../types";
import { Currency, Price } from "@uniswap/sdk-core";
import { Rate } from "../../state/gorder/actions";
export interface GelatoLimitOrdersHandlers {
    handleLimitOrderSubmission: (orderToSubmit: {
        inputToken: string;
        outputToken: string;
        inputAmount: string;
        outputAmount: string;
        owner: string;
        overrides?: Overrides;
    }) => Promise<TransactionResponse>;
    handleLimitOrderCancellation: (order: Order, orderDetails?: {
        inputTokenSymbol: string;
        outputTokenSymbol: string;
        inputAmount: string;
        outputAmount: string;
    }, overrides?: Overrides) => Promise<TransactionResponse>;
    handleInput: (field: Field, value: string) => void;
    handleCurrencySelection: (field: Field.INPUT | Field.OUTPUT, currency: Currency) => void;
    handleSwitchTokens: () => void;
    handleRateType: (rateType: Rate, price?: Price<Currency, Currency>) => void;
}
export default function useGelatoLimitOrdersHandlers(): GelatoLimitOrdersHandlers;
