import { Currency, NativeCurrency, Token } from "@uniswap/sdk-core";
import { WrappedTokenInfo } from "../state/glists/wrappedTokenInfo";
import { TokenInfo } from "@uniswap/token-lists";
export declare const WETH9: {
    [chainId: number]: Token;
};
export declare class NativeToken extends NativeCurrency {
    constructor(chainId: number, decimals: number, symbol: string, name: string);
    get wrapped(): Token;
    equals(other: Currency): boolean;
}
/**
 * Create a filter function to apply to a token for whether it matches a particular search query
 * @param search the search query to apply to the token
 */
export declare function createTokenFilterFunction<T extends Token | TokenInfo>(search: string): (tokens: T) => boolean;
export declare function useAllTokens(): {
    [address: string]: Token;
};
export declare function useUnsupportedTokens(): {
    [address: string]: Token;
};
export declare function useSearchInactiveTokenLists(search: string | undefined, minResults?: number): WrappedTokenInfo[];
export declare function useIsTokenActive(token: Token | undefined | null): boolean;
export declare function useIsUserAddedToken(currency: Currency | undefined | null): boolean;
export declare function useToken(tokenAddress?: string): Token | undefined | null;
export declare function useCurrency(currencyId: string | undefined): Currency | null | undefined;
