import { Currency, CurrencyAmount, NativeCurrency, Price, Token, TradeType } from "@uniswap/sdk-core";
import { Trade } from "@uniswap/v2-sdk";
import { Field, Rate } from "./actions";
import { AppState } from "..";
export declare function applyExchangeRateTo(inputValue: string, exchangeRate: string, inputCurrency: Currency, outputCurrency: Currency, isInverted: boolean): CurrencyAmount<NativeCurrency | Token> | undefined;
export declare function useOrderState(): AppState["gorder"];
export declare function useOrderActionHandlers(): {
    onCurrencySelection: (field: Field, currency: Currency) => void;
    onSwitchTokens: () => void;
    onUserInput: (field: Field, typedValue: string) => void;
    onChangeRecipient: (recipient: string | null) => void;
    onChangeRateType: (rateType: Rate) => void;
};
export declare function tryParseAmount<T extends Currency>(value?: string, currency?: T): CurrencyAmount<T> | undefined;
export interface DerivedOrderInfo {
    currencies: {
        input: Currency | undefined;
        output: Currency | undefined;
    };
    currencyBalances: {
        input: CurrencyAmount<Currency> | undefined;
        output: CurrencyAmount<Currency> | undefined;
    };
    inputError?: string;
    trade: Trade<Currency, Currency, TradeType> | undefined;
    parsedAmounts: {
        input: CurrencyAmount<Currency> | undefined;
        output: CurrencyAmount<Currency> | undefined;
    };
    formattedAmounts: {
        input: string;
        output: string;
        price: string;
    };
    rawAmounts: {
        input: string | undefined;
        output: string | undefined;
    };
    price: Price<Currency, Currency> | undefined;
}
export declare function useDerivedOrderInfo(): DerivedOrderInfo;
