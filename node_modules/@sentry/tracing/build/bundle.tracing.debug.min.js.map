{"version":3,"file":"bundle.tracing.debug.min.js","sources":["../../types/src/severity.ts","../../utils/src/global.ts","../../utils/src/is.ts","../../utils/src/browser.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/dsn.ts","../../utils/src/enums.ts","../../utils/src/logger.ts","../../utils/src/stacktrace.ts","../../utils/src/string.ts","../../utils/src/object.ts","../../utils/src/memo.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../utils/src/misc.ts","../../utils/src/syncpromise.ts","../../utils/src/promisebuffer.ts","../../utils/src/severity.ts","../../utils/src/time.ts","../../utils/src/tracing.ts","../../utils/src/envelope.ts","../../utils/src/ratelimit.ts","../../hub/src/scope.ts","../../hub/src/session.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/request.ts","../../core/src/integrations/functiontostring.ts","../../core/src/version.ts","../../core/src/integrations/inboundfilters.ts","../../browser/src/stack-parsers.ts","../../browser/src/eventbuilder.ts","../../browser/src/transports/utils.ts","../../utils/src/async.ts","../../browser/src/transports/base.ts","../../utils/src/clientreport.ts","../../utils/src/status.ts","../../browser/src/transports/fetch.ts","../../browser/src/transports/xhr.ts","../../browser/src/backend.ts","../../browser/src/helpers.ts","../../browser/src/integrations/globalhandlers.ts","../../browser/src/integrations/trycatch.ts","../../browser/src/integrations/breadcrumbs.ts","../../browser/src/integrations/linkederrors.ts","../../browser/src/integrations/useragent.ts","../../browser/src/integrations/dedupe.ts","../../browser/src/client.ts","../../browser/src/sdk.ts","../../browser/src/index.ts","../src/utils.ts","../src/errors.ts","../src/constants.ts","../src/span.ts","../src/transaction.ts","../src/idletransaction.ts","../src/hubextensions.ts","../src/browser/backgroundtab.ts","../src/browser/web-vitals/lib/bindReporter.ts","../src/browser/web-vitals/lib/initMetric.ts","../src/browser/web-vitals/lib/generateUniqueID.ts","../src/browser/web-vitals/lib/observe.ts","../src/browser/web-vitals/lib/onHidden.ts","../src/browser/web-vitals/lib/getVisibilityWatcher.ts","../src/browser/web-vitals/getLCP.ts","../src/browser/metrics.ts","../src/browser/web-vitals/getCLS.ts","../src/browser/web-vitals/getFID.ts","../src/browser/request.ts","../src/browser/router.ts","../src/browser/browsertracing.ts","../src/index.bundle.ts","../../browser/src/version.ts","../../core/src/sdk.ts"],"sourcesContent":["/**\n * TODO(v7): Remove this enum and replace with SeverityLevel\n */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// TODO: in v7, these can disappear, because they now also exist in `@sentry/utils`. (Having them there rather than here\n// is nice because then it enforces the idea that only types are exported from `@sentry/types`.)\nexport const SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'] as const;\nexport type SeverityLevel = typeof SeverityLevels[number];\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): boolean {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): boolean {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\nfunction dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!isDebugBuild()) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n\n  validateDsn(components);\n\n  return components;\n}\n","export const SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'] as const;\nexport type SeverityLevel = typeof SeverityLevels[number];\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]:`, ...args);\n    });\n  }\n}\n\nconst sentryGlobal = global.__SENTRY__ || {};\nconst logger = (sentryGlobal.logger as Logger) || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };\n","import { StackFrame } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\nexport type StackParser = (stack: string, skipFirst?: number) => StackFrame[];\nexport type StackLineParserFn = (line: string) => StackFrame | undefined;\nexport type StackLineParser = [number, StackLineParserFn];\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      for (const parser of sortedParsers) {\n        const frame = parser(line);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(value: any): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as unknown as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    // Accessing event attributes can throw (see https://github.com/getsentry/sentry-javascript/issues/768 and\n    // https://github.com/getsentry/sentry-javascript/issues/838), but accessing `type` hasn't been wrapped in a\n    // try-catch in at least two years and no one's complained, so that's likely not an issue anymore\n    source.type = event.type;\n\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const attr in event) {\n      if (Object.prototype.hasOwnProperty.call(event, attr)) {\n        source[attr] = event[attr];\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value: any): any {\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  const type = Object.prototype.toString.call(value);\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  // `makeSerializable` provides a string representation of certain non-serializable values. For all others, it's a\n  // pass-through.\n  const serializable = makeSerializable(value);\n  return isPrimitive(serializable) ? serializable : type;\n}\n\n/**\n * makeSerializable()\n *\n * Takes unserializable input and make it serializer-friendly.\n *\n * Handles globals, functions, `undefined`, `NaN`, and other non-serializable values.\n */\nfunction makeSerializable<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && (value as unknown as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  // It's safe to use `window` and `document` here in this manner, as we are asserting using `typeof` first\n  // which won't throw if they are not present.\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n  if (typeof value === 'symbol') {\n    return `[${String(value)}]`;\n  }\n\n  if (typeof value === 'bigint') {\n    return `[BigInt: ${String(value)}]`;\n  }\n\n  return value;\n}\n\ntype UnknownMaybeWithToJson = unknown & { toJSON?: () => string };\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param maxProperties Optional maximum  number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(\n  key: string,\n  value: UnknownMaybeWithToJson,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): unknown {\n  const [memoize, unmemoize] = memo;\n\n  // If we reach the maximum depth, serialize whatever is left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n\n  // `makeSerializable` provides a string representation of certain non-serializable values. For all others, it's a\n  // pass-through. If what comes back is a primitive (either because it's been stringified or because it was primitive\n  // all along), we're done.\n  const serializable = makeSerializable(value, key);\n  if (isPrimitive(serializable)) {\n    return serializable;\n  }\n\n  // Create source that we will use for the next iteration. It will either be an objectified error object (`Error` type\n  // with extracted key:value pairs) or the input itself.\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc: { [key: string]: any } = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  let propertyCount = 0;\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n\n    if (propertyCount >= maxProperties) {\n      acc[innerKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    propertyCount += 1;\n\n    // Recursively walk through all the child nodes\n    const innerValue: UnknownMaybeWithToJson = source[innerKey];\n    acc[innerKey] = walk(innerKey, innerValue, depth - 1, maxProperties, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, there is no key\n    return walk('', input as UnknownMaybeWithToJson, depth, maxProperties);\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      isDebugBuild() &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      isDebugBuild() && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      isDebugBuild() &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import { Severity } from '@sentry/types';\n\nimport { SeverityLevel, SeverityLevels } from './enums';\n\nfunction isSupportedSeverity(level: string): level is Severity {\n  return SeverityLevels.indexOf(level as SeverityLevel) !== -1;\n}\n/**\n * Converts a string-based level into a {@link Severity}.\n *\n * @param level string representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: SeverityLevel | string): Severity {\n  if (level === 'warn') return Severity.Warning;\n  if (isSupportedSeverity(level)) {\n    return level;\n  }\n  return Severity.Log;\n}\n","import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n","import { Envelope } from '@sentry/types';\n\nimport { isPrimitive } from './is';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Serializes an envelope into a string.\n */\nexport function serializeEnvelope(envelope: Envelope): string {\n  const [headers, items] = envelope;\n  const serializedHeaders = JSON.stringify(headers);\n\n  // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (items as any[]).reduce((acc, item: typeof items[number]) => {\n    const [itemHeaders, payload] = item;\n    // We do not serialize payloads that are primitives\n    const serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return `${acc}\\n${JSON.stringify(itemHeaders)}\\n${serializedPayload}`;\n  }, serializedHeaders);\n}\n","// Keeping the key broad until we add the new transports\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  headers: Record<string, string | null | undefined>,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const parameters = limit.split(':', 2);\n      const headerDelay = parseInt(parameters[0], 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!parameters[1]) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of parameters[1].split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  }\n\n  return updatedRateLimits;\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata?: { [key: string]: unknown } = {};\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = this._sdkProcessingMetadata;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          void (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = 'ok';\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, 'ok'>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === 'ok') {\n      this.update({ status: 'exited' });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: {\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      },\n    });\n  }\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  SessionContext,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalObject,\n  isDebugBuild,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { Session } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @hidden\n * @deprecated Can be removed once `Hub.getActiveDomain` is removed.\n */\nexport interface DomainAsCarrier extends Carrier {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  members: { [key: string]: any }[];\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      isDebugBuild() && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      session.close();\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = new Session({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        currentSession.update({ status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession && scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const { scope, client } = this.getStackTop();\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (client as any)[method](...args, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    isDebugBuild() && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n * @deprecated No longer used; remove in v7\n * @returns The domain, or undefined if there is no active domain\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  isDebugBuild() && logger.warn('Function `getActiveDomain` is deprecated and will be removed in a future version.');\n\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  const syntheticException = new Error('Sentry syntheticException');\n\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  const syntheticException = new Error(message);\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { addNonEnumerableProperty, isDebugBuild, logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  isDebugBuild() && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  addNonEnumerableProperty(integrations, 'initialized', true);\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  DsnComponents,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  isDebugBuild,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      isDebugBuild() && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      isDebugBuild() && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      isDebugBuild() && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      isDebugBuild() && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      isDebugBuild() && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (evt) {\n        // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809\n        // it is only attached as extra data to the event if the event somehow skips being normalized\n        evt.sdkProcessingMetadata = { ...evt.sdkProcessingMetadata, normalizeDepth: normalize(normalizeDepth) };\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, baseClientNormalized: true };\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        isDebugBuild() && logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    type RecordLostEvent = NonNullable<Transport['recordLostEvent']>;\n    type RecordLostEventParams = Parameters<RecordLostEvent>;\n\n    function recordLostEvent(outcome: RecordLostEventParams[0], category: RecordLostEventParams[1]): void {\n      if (transport.recordLostEvent) {\n        transport.recordLostEvent(outcome, category);\n      }\n    }\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      recordLostEvent('sample_rate', 'event');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          recordLostEvent('event_processor', event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          recordLostEvent('before_send', event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n","import { Event, Response, Transport } from '@sentry/types';\nimport { resolvedSyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return resolvedSyncPromise({\n      reason: 'NoopTransport: Event has been skipped because no Dsn is configured.',\n      status: 'skipped',\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return resolvedSyncPromise(true);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { isDebugBuild, logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates an {@link Event} from primitive inputs to `captureMessage`. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      isDebugBuild() && logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    void this._transport.sendEvent(event).then(null, reason => {\n      isDebugBuild() && logger.error('Error while sending event:', reason);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      isDebugBuild() && logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    void this._transport.sendSession(session).then(null, reason => {\n      isDebugBuild() && logger.error('Error while sending session:', reason);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","export const SDK_VERSION = '6.19.1';\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isDebugBuild, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        // This checks prevents most of the occurrences of the bug linked below:\n        // https://github.com/getsentry/sentry-javascript/issues/2622\n        // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.\n        // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),\n        // as we cannot force people using multiple instances in their apps to sync SDK versions.\n        const options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};\n        if (typeof self._shouldDropEvent !== 'function') {\n          return event;\n        }\n        return self._shouldDropEvent(event, options) ? null : event;\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      isDebugBuild() &&\n        logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      isDebugBuild() &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      isDebugBuild() &&\n        logger.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      isDebugBuild() &&\n        logger.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      // @ts-ignore can't be a sentry error if undefined\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return event.exception.values[0].type === 'SentryError';\n    } catch (e) {\n      // ignore\n    }\n\n    return false;\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        isDebugBuild() && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getLastValidUrl(frames: StackFrame[] = []): string | null {\n    for (let i = frames.length - 1; i >= 0; i--) {\n      const frame = frames[i];\n\n      if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n        return frame.filename || null;\n      }\n    }\n\n    return null;\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        return this._getLastValidUrl(event.stacktrace.frames);\n      }\n      let frames;\n      try {\n        // @ts-ignore we only care about frames if the whole thing here is defined\n        frames = event.exception.values[0].stacktrace.frames;\n      } catch (e) {\n        // ignore\n      }\n      return frames ? this._getLastValidUrl(frames) : null;\n    } catch (oO) {\n      isDebugBuild() && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","import { StackFrame } from '@sentry/types';\nimport { StackLineParser, StackLineParserFn } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import { Event, EventHint, Exception, Severity, StackFrame } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  createStackParser,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport {\n  chromeStackParser,\n  geckoStackParser,\n  opera10StackParser,\n  opera11StackParser,\n  winjsStackParser,\n} from './stack-parsers';\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromError(ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return createStackParser(\n      opera10StackParser,\n      opera11StackParser,\n      chromeStackParser,\n      winjsStackParser,\n      geckoStackParser,\n    )(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    return eventFromError(exception as Error);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(input: string, syntheticException?: Error, attachStacktrace?: boolean): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n","import { forget, getGlobalObject, isDebugBuild, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      isDebugBuild() &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    return sendBeacon(url, body);\n  }\n\n  if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    return forget(\n      fetch(url, {\n        body,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      }),\n    );\n  }\n}\n","/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function forget(promise: PromiseLike<any>): void {\n  void promise.then(null, e => {\n    // TODO: Use a better logging mechanism\n    // eslint-disable-next-line no-console\n    console.error(e);\n  });\n}\n","import {\n  APIDetails,\n  eventToSentryRequest,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n  initAPIDetails,\n  sessionToSentryRequest,\n} from '@sentry/core';\nimport {\n  ClientReport,\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  disabledUntil,\n  dsnToString,\n  eventStatusFromHttpCode,\n  getGlobalObject,\n  isDebugBuild,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { sendReport } from './utils';\n\nfunction requestTypeToCategory(ty: SentryRequestType): string {\n  const tyStr = ty as string;\n  return tyStr === 'event' ? 'error' : tyStr;\n}\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: APIDetails;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = makePromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected _rateLimits: RateLimits = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<SentryResponse> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<SentryResponse> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${requestTypeToCategory(category)}:${reason}`;\n    isDebugBuild() && logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      isDebugBuild() && logger.log('No outcomes to flush');\n      return;\n    }\n\n    isDebugBuild() && logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);\n\n    const discardedEvents = Object.keys(outcomes).map(key => {\n      const [category, reason] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n      // TODO: Improve types on discarded_events to get rid of cast\n    }) as ClientReport['discarded_events'];\n    const envelope = createClientReportEnvelope(discardedEvents, this._api.tunnel && dsnToString(this._api.dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      isDebugBuild() && logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = eventStatusFromHttpCode(response.status);\n\n    this._rateLimits = updateRateLimits(this._rateLimits, headers);\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(requestType) && isDebugBuild()) {\n      isDebugBuild() &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n    }\n\n    if (status === 'success') {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   *\n   * @deprecated Please use `disabledUntil` from @sentry/utils\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = requestTypeToCategory(requestType);\n    return new Date(disabledUntil(this._rateLimits, category));\n  }\n\n  /**\n   * Checks if a category is rate limited\n   *\n   * @deprecated Please use `isRateLimited` from @sentry/utils\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    const category = requestTypeToCategory(requestType);\n    return isRateLimited(this._rateLimits, category);\n  }\n\n  protected abstract _sendRequest(\n    sentryRequest: SentryRequest,\n    originalPayload: Event | Session,\n  ): PromiseLike<SentryResponse>;\n}\n","import { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import { EventStatus } from '@sentry/types';\n/**\n * Converts an HTTP status code to sentry status {@link EventStatus}.\n *\n * @param code number HTTP status code\n * @returns EventStatus\n */\nexport function eventStatusFromHttpCode(code: number): EventStatus {\n  if (code >= 200 && code < 300) {\n    return 'success';\n  }\n\n  if (code === 429) {\n    return 'rate_limit';\n  }\n\n  if (code >= 400 && code < 500) {\n    return 'invalid';\n  }\n\n  if (code >= 500) {\n    return 'failed';\n  }\n\n  return 'unknown';\n}\n","import { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n      // (see https://caniuse.com/#feat=referrer-policy),\n      // it doesn't. And it throws an exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(exception, hint, this._options.attachStacktrace);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { captureException, getReportDialogEndpoint, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getGlobalObject,\n  getOriginalFunction,\n  isDebugBuild,\n  logger,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function (this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!global.document) {\n    return;\n  }\n\n  if (!options.eventId) {\n    isDebugBuild() && logger.error('Missing eventId option in showReportDialog call');\n    return;\n  }\n\n  if (!options.dsn) {\n    isDebugBuild() && logger.error('Missing dsn option in showReportDialog call');\n    return;\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(options.dsn, options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isDebugBuild,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  isDebugBuild() && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject, getOriginalFunction } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const global = getGlobalObject() as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = global[target] && global[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (global.location && global.location.href);\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { isDebugBuild, logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            isDebugBuild() && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n","import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, isDebugBuild, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      isDebugBuild() && logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { Hub } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, isDebugBuild, logger, resolvedSyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  isDebugBuild() && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  isDebugBuild() && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    isDebugBuild() && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, Transaction } from '@sentry/types';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(maybeOptions?: Options | undefined): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { addInstrumentationHandler, isDebugBuild, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    isDebugBuild() && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n","// Store finish reasons in tuple to save on bundle size\n// Readonly type should enforce that this is not mutated.\nexport const FINISH_REASON_TAG = 'finishReason';\n\nexport const IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden'] as const;\n","/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport {\n  Event,\n  Measurements,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, isDebugBuild, isInstanceOf, logger } from '@sentry/utils';\n\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public name: string;\n\n  public metadata: TransactionMetadata;\n\n  private _measurements: Measurements = {};\n\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = getCurrentHub() as unknown as Hub;\n\n  private _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    this.name = transactionContext.name || '';\n\n    this.metadata = transactionContext.metadata || {};\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n  public setMeasurements(measurements: Measurements): void {\n    this._measurements = { ...measurements };\n  }\n\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n  public setMetadata(newMetadata: TransactionMetadata): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      isDebugBuild() && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      isDebugBuild() && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      const client = this._hub.getClient();\n      const transport = client && client.getTransport && client.getTransport();\n      if (transport && transport.recordLostEvent) {\n        transport.recordLostEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const transaction: Event = {\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: this.metadata,\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      isDebugBuild() &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    isDebugBuild() && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name ?? '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { isDebugBuild, logger, timestampWithMs } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from './constants';\nimport { Span, SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * If a transaction is created and no activities are added, we want to make sure that\n   * it times out properly. This is cleared and not used when activities are added.\n   */\n  private _initTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished.\n     * @default 1000\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      isDebugBuild() && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._initTimeout = setTimeout(() => {\n      if (!this._finished) {\n        this.finish();\n      }\n    }, this._idleTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      isDebugBuild() &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          isDebugBuild() &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          isDebugBuild() &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      isDebugBuild() && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      isDebugBuild() && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      isDebugBuild() && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    isDebugBuild() && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    isDebugBuild() && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      isDebugBuild() && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      isDebugBuild() && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      isDebugBuild() && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    isDebugBuild() && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n","import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isDebugBuild, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    isDebugBuild() && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    isDebugBuild() &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    isDebugBuild() &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  isDebugBuild() && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    isDebugBuild() &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    isDebugBuild() &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { getGlobalObject, isDebugBuild, logger } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from '../constants';\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatusType } from '../span';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        isDebugBuild() &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[2]);\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    isDebugBuild() && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  return {\n    name,\n    value: value ?? -1,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || getGlobalObject<Window>().document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport {\n  browserPerformanceTimeOrigin,\n  getGlobalObject,\n  htmlTreeAsString,\n  isDebugBuild,\n  isNodeEnv,\n  logger,\n} from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS, LayoutShift } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n  private _lcpEntry: LargestContentfulPaint | undefined;\n  private _clsEntry: LayoutShift | undefined;\n\n  public constructor(private _reportAllChanges: boolean = false) {\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    isDebugBuild() && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n    let responseStartTimestamp: number | undefined;\n    let requestStartTimestamp: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation': {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n            break;\n          }\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n\n            const firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              isDebugBuild() && logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              isDebugBuild() && logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        isDebugBuild() && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        isDebugBuild() &&\n          logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      isDebugBuild() && logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n      this._clsEntry = entry as LayoutShift;\n    });\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime as number);\n      isDebugBuild() && logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n      this._lcpEntry = entry as LargestContentfulPaint;\n    }, this._reportAllChanges);\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime as number);\n      isDebugBuild() && logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(\n  transaction: Transaction,\n  lcpEntry: MetricsInstrumentation['_lcpEntry'],\n  clsEntry: MetricsInstrumentation['_clsEntry'],\n): void {\n  if (lcpEntry) {\n    isDebugBuild() && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    isDebugBuild() && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n","import { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, isDebugBuild, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    isDebugBuild() && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          isDebugBuild() && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'navigation' });\n      }\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, isDebugBuild, logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  /** Store configured idle timeout so that it can be added as a tag to transactions */\n  private _configuredIdleTimeout: BrowserTracingOptions['idleTimeout'] | undefined = undefined;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        isDebugBuild() && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      isDebugBuild() &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      isDebugBuild() &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      isDebugBuild() &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      isDebugBuild() && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    isDebugBuild() && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = getGlobalObject<Window>().document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n","export {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  Event,\n  EventStatus,\n  Exception,\n  Response,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport { SeverityLevel } from '@sentry/utils';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  startTransaction,\n  Transports,\n  withScope,\n} from '@sentry/browser';\n\nexport { BrowserOptions } from '@sentry/browser';\nexport { BrowserClient, ReportDialogOptions } from '@sentry/browser';\nexport {\n  defaultIntegrations,\n  forceLoad,\n  init,\n  lastEventId,\n  onLoad,\n  showReportDialog,\n  flush,\n  close,\n  wrap,\n} from '@sentry/browser';\nexport { SDK_NAME, SDK_VERSION } from '@sentry/browser';\n\nimport { Integrations as BrowserIntegrations } from '@sentry/browser';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { BrowserTracing } from './browser';\nimport { addExtensionMethods } from './hubextensions';\n\nexport { Span } from './span';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...BrowserIntegrations,\n  BrowserTracing,\n};\n\nexport { INTEGRATIONS as Integrations };\n// Though in this case exporting this separately in addition to exporting it as part of `Sentry.Integrations` doesn't\n// gain us any bundle size advantage (we're making the bundle here, not the user, and we can't leave anything out of\n// ours), it does bring the API for using the integration in line with that recommended for users bundling Sentry\n// themselves.\nexport { BrowserTracing };\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n","// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata\nexport const SDK_NAME = 'sentry.javascript.browser';\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { isDebugBuild, logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    if (isDebugBuild()) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["Severity","fallbackGlobalObject","getGlobalObject","window","self","objectToString","Object","prototype","toString","isError","wat","call","isInstanceOf","Error","isBuiltin","ty","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","htmlTreeAsString","elem","keyAttrs","currentElem","out","height","len","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","split","allowedAttrs","setPrototypeOf","__proto__","Array","obj","proto","prop","hasOwnProperty","message","_super","_this","name","_newTarget","constructor","__extends","DSN_REGEX","dsnToString","dsn","withPassword","host","path","pass","port","projectId","dsnFromComponents","components","publicKey","user","protocol","makeDsn","from","str","match","exec","SentryError","_a","_b","_c","slice","pop","projectMatch","dsnFromString","component","isValidProtocol","isNaN","parseInt","validateDsn","SeverityLevels","global","PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","level","__sentry_original__","result","keys","this","_enabled","Logger","_i","args","log","warn","error","sentryGlobal","__SENTRY__","logger","stripSentryFramesAndReverse","stack","localStack","firstFrameFunction","function","lastFrameFunction","indexOf","frame","filename","defaultFunctionName","getFunctionName","fn","e","truncate","max","substr","safeJoin","input","delimiter","isArray","output","value","String","isMatchingPattern","pattern","test","fill","source","replacementFactory","original","wrapped","markFunctionWrapped","_Oo","addNonEnumerableProperty","defineProperty","writable","configurable","getOriginalFunction","func","getWalkSource","err","event_1","type","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","makeSerializable","_events","document","walk","maxProperties","memo","hasWeakSet","inner","Infinity","WeakSet","has","add","delete","splice","memoize","unmemoize","serializable","serializeValue","toJSON","acc","propertyCount","innerKey","innerValue","extractExceptionKeysForMessage","exception","maxLength","sort","includedKeys","dropUndefinedKeys","val","rv","__values","supportsFetch","Headers","Request","Response","isNativeFetch","supportsReferrerPolicy","referrerPolicy","lastHref","handlers","instrumented","instrument","originalConsoleMethod","triggerHandlers","apply","instrumentConsole","triggerDOMHandler","bind","globalDOMEventHandler","makeDOMEventHandler","addEventListener","originalAddEventListener","listener","options","handlers_1","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","handlers_2","undefined","instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","xhr","url","xhrInfo","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","endTimestamp","Date","now","startTimestamp","onreadystatechange","readyStateArgs","originalSend","body","instrumentXHR","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","data","fetchArgs","debounceTimerID","lastCapturedEvent","globalListener","event","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","setTimeout","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","query","fragment","relative","getFirstException","values","getEventDescription","eventId","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","checkOrSetAlreadyCaught","__sentry_captured__","resolvedSyncPromise","SyncPromise","resolve","rejectedSyncPromise","reason","_","reject","executor","_setResult","state","_state","_resolve","_reject","_value","_executeHandlers","cachedHandlers","_handlers","onfulfilled","onrejected","onfinally","isRejected","makePromiseBuffer","limit","buffer","remove","task","$","taskProducer","drain","timeout","counter","capturedSetTimeout","item","severityFromString","Warning","isSupportedSeverity","Log","dateTimestampSource","nowSeconds","platformPerformance","performance","timeOrigin","getBrowserPerformance","timestampSource","dateTimestampInSeconds","timestampInSeconds","timestampWithMs","browserPerformanceTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","TRACEPARENT_REGEXP","RegExp","createEnvelope","headers","items","serializeEnvelope","envelope","serializedHeaders","reduce","itemHeaders","payload","serializedPayload","disabledUntil","limits","category","all","updateRateLimits","updatedRateLimits","rateLimitHeader","retryAfterHeader","trim","parameters","headerDelay","delay","header","headerDate","parse","parseRetryAfterHeader","Scope","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","_requestSession","_scopeListeners","update","_notifyScopeListeners","requestSession","tags","extras","extra","fingerprint","setTransactionName","context","span","getSpan","transaction","session","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","maxCrumbs","min","mergedBreadcrumb","timestamp","__spread","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","sdkProcessingMetadata","_sdkProcessingMetadata","_notifyEventProcessors","getGlobalEventProcessors","newData","processors","index","processor","final","_notifyingListeners","concat","globalEventProcessors","addGlobalEventProcessor","startingTime","started","Session","ipAddress","ip_address","did","email","username","ignoreDuration","sid","init","duration","release","environment","userAgent","errors","toISOString","attrs","user_agent","client","_version","getStackTop","bindClient","Hub","version","setupIntegrations","clone","getScope","getStack","getClient","pushScope","popScope","_stack","_lastEventId","event_id","finalHint","syntheticException","originalException","_invokeClient","beforeBreadcrumb","_d","finalBreadcrumb","addBreadcrumb","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","_callExtensionMethod","customSamplingContext","endSession","_sendSessionUpdate","layer","getSession","close","setSession","getUser","currentSession","captureSession","carrier","getMainCarrier","sentry","extensions","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","isOlderThan","callOnHub","captureException","withScope","getBaseApiEndpoint","_getIngestEndpoint","_encodedAuth","sentry_key","sentry_version","encodeURIComponent","getStoreEndpointWithUrlEncodedAuth","getStoreEndpoint","getEnvelopeEndpointWithUrlEncodedAuth","tunnel","_getEnvelopeEndpoint","installedIntegrations","filterDuplicates","integrations","every","accIntegration","defaultIntegrations","userIntegrations","userIntegration","integrationsNames","alwaysLastToRun","getIntegrationsToSetup","setupOnce","setupIntegration","ALREADY_SEEN_ERROR","backendClass","_backend","_options","_dsn","BaseClient","_process","_getBackend","eventFromException","_captureEvent","promisedEvent","eventFromMessage","_isEnabled","_sendSession","getTransport","_isClientDoneProcessing","clientFinished","transportFlushed","flush","getOptions","enabled","_integrations","initialized","crashed","errored","exceptions","exceptions_1","sessionNonTerminal","Number","sendSession","ticked","interval","setInterval","_numProcessing","clearInterval","normalizeDepth","normalizeMaxBreadth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","applyToEvent","evt","_normalizeEvent","maxBreadth","normalized","b","baseClientNormalized","dist","maxValueLength","request","integrationsArray","sdk","sendEvent","_processEvent","finalEvent","beforeSend","sampleRate","transport","recordLostEvent","outcome","isTransaction","_prepareEvent","__sentry__","nullErr","_ensureBeforeSendRv","processedEvent","_updateSessionFromEvent","_sendEvent","promise","NoopTransport","_transport","_setupTransport","BaseBackend","_exception","_hint","_message","getSdkMetadataForEnvelopeHeader","api","metadata","eventToSentryRequest","sdkInfo","eventType","useEnvelope","samplingMethod","packages","enhanceEventWithSdkInfo","skippedNormalization","JSONStringifyError","newErr","innerErr","req","sent_at","sample_rates","rate","originalFunctionToString","SDK_VERSION","FunctionToString","Function","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","frames","stacktrace","_getLastValidUrl","frames_1","UNKNOWN_FUNCTION","createFrame","lineno","colno","in_app","chromeRegex","chromeEvalRegex","chromeStackParser","parts","subMatch","geckoREgex","geckoEvalRegex","geckoStackParser","winjsRegex","winjsStackParser","opera10Regex","opera10StackParser","opera11Regex","opera11StackParser","extractSafariExtensionDetails","isSafariExtension","isSafariWebExtension","exceptionFromError","ex","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","parsers","sortedParsers","a","p","skipFirst","sortedParsers_1","parser","createStackParser","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","name_1","eventFromString","code","__serialized__","eventFromPlainObject","synthetic","frames_2","cachedFetchImpl","getNativeFetchImplementation","fetchImpl","sendReport","navigator","sendBeacon","fetch_1","credentials","keepalive","requestTypeToCategory","_api","_metadata","initDsn","sendClientReports","visibilityState","_flushOutcomes","BaseTransport","_sendRequest","sessionToSentryRequest","_buffer","_outcomes","outcomes","discarded_events","discardedEvents","quantity","requestType","_rateLimits","_isRateLimited","_disabledUntil","isRateLimited","_fetch","FetchTransport","sentryRequest","originalPayload","Promise","fetchParameters","assign","get","_handleResponse","catch","XHRTransport","getResponseHeader","open","setRequestHeader","send","BrowserBackend","Info","transportOptions","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","addEventProcessor","property","getOwnPropertyDescriptor","injectReportDialog","script","async","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","injectionPoint","GlobalHandlers","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","_installFunc","ERROR_TYPES_RE","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","addMechanismAndCapture","ev","ev0","ev0s","ev0sf","getLocationHref","captureEvent","getHubAndAttachStacktrace","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","originalCallback","xmlHttpRequestProps","wrapOptions","originalFunction","eventName","handleEvent","wrappedEventHandler","originalEventHandler","Breadcrumbs","dom","_consoleBreadcrumb","_innerDomBreadcrumb","serializeAttribute","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","parsedLoc","parsedFrom","parsedTo","LinkedErrors","_key","_limit","linkedErrors","_walkErrorTree","_handler","UserAgent","referrer","Referer","Dedupe","currentEvent","previousEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","_previousEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","BrowserClient","getDsn","platform","addSentryBreadcrumb","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","startSessionOnHub","startSession","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","hasTracingEnabled","maybeOptions","getActiveTransaction","maybeHub","getTransaction","msToSec","time","errorCallback","activeTransaction","status_1","setStatus","FINISH_REASON_TAG","IDLE_TRANSACTION_FINISH_REASONS","maxlen","_maxlen","SpanRecorder","spans","spanRecorder","spanContext","substring","traceId","spanId","parentSpanId","sampled","op","description","Span","startChild","childSpan","httpStatus","spanStatus","spanStatusfromHttpCode","sampledString","parent_span_id","span_id","trace_id","start_timestamp","transactionContext","_hub","_trimEnd","trimEnd","Transaction","measurements","_measurements","newMetadata","finish","finishedSpans","s","prev","toContext","updateWithContext","SpanClass","_pushActivity","_popActivity","transactionSpanId","IdleTransactionSpanRecorder","_idleHub","_idleTimeout","_onScope","clearActiveTransaction","configureScope","setSpan","_initTimeout","_finished","IdleTransaction","activities","_beforeFinishCallbacks","keepSpan","_pingHeartbeat","end_1","heartbeatString","_prevHeartbeatString","_heartbeatCounter","_beat","traceHeaders","toTraceparent","sample","samplingContext","setMetadata","transactionSampling","tracesSampler","parentSampled","tracesSampleRate","isValidSampleRate","_startTransaction","initSpanRecorder","_experiments","maxSpans","addExtensionMethods","startTransaction","bindReporter","metric","reportAllChanges","prevValue","forceReport","delta","initMetric","entries","floor","observe","PerformanceObserver","supportedEntryTypes","includes","po","l","getEntries","buffered","onHidden","cb","once","onHiddenOrPageHide","removeEventListener","firstHiddenTime","getVisibilityWatcher","timeStamp","reportedMetricIDs","_reportAllChanges","mark","_trackCLS","_trackLCP","_trackFID","MetricsInstrumentation","responseStartTimestamp","requestStartTimestamp","_performanceCursor","entry","startTime","entryType","addPerformanceNavigationTiming","_startChild","requestStart","responseEnd","responseStart","addRequest","addNavigationSpans","measureStartTimestamp","measureEndTimestamp","addMeasureSpans","firstHidden","shouldRecord","resourceName","origin","initiatorType","transferSize","encodedBodySize","decodedBodySize","addResourceSpans","_trackNavigator","timeOrigin_1","oldValue","measurementTimestamp","normalizedValue","cls","setMeasurements","lcpEntry","clsEntry","element","size","sources","node","tagMetricInfo","_lcpEntry","_clsEntry","connection","effectiveType","isMeasurementValue","rtt","downlink","deviceMemory","hardwareConcurrency","onReport","report","sessionValue","sessionEntries","entryHandler","hadRecentInput","firstSessionEntry","lastSessionEntry","takeRecords","visibilityWatcher","stopListening_1","disconnect","capture","getLCP","processingStart","eventEnd","end","start","ctx","isFinite","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","instrumentOutgoingRequests","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","origins","shouldCreateSpan","__span","setHttpStatus","append","fetchCallback","__sentry_xhr_span_id__","xhrCallback","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","BrowserTracing","_configuredIdleTimeout","_emitOptionsWarning","_metricOptions","_metrics","_getCurrentHub","instrumentRouting","_createRouteTransaction","statusType","beforeNavigate","parentContextFromHeader","metaName","querySelector","traceparent","matches","extractTraceparentData","getHeaderContext","expandedContext","modifiedContext","finalContext","idleTransaction","onScope","startIdleTransaction","registerBeforeFinishCallback","addPerformanceEntries","maxDuration","diff","adjustTransactionDuration","window_1","SENTRY_RELEASE","autoSessionTracking","clientClass","debug","enable","initialScope","initAndBind","startSessionTracking","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}