{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/router.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/chains.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  FUJI = 43113,\n  AVALANCHE = 43114,\n  WAGMI = 11111\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.FUJI]: '0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd',\n  [ChainId.AVALANCHE]: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n  [ChainId.WAGMI]: '0xf7D180bE35be07fA5B2EC584aB7bF2B701e6EB45'\n}\n\nexport const INIT_CODE_HASH = '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, CAVAX, Percent, Trade } from './entities'\nimport { ChainId } from '.'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline, chainId: ChainId = ChainId.AVALANCHE): SwapParameters {\n    const etherIn = trade.inputAmount.currency === CAVAX[chainId]\n    const etherOut = trade.outputAmount.currency === CAVAX[chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage, chainId))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage, chainId))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens' : 'swapExactAVAXForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens' : 'swapExactTokensForAVAX'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapAVAXForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactAVAX'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, CAVAX } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   * @param chainId\n   */\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    return new CurrencyAmount(CAVAX[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN, ChainId } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\n\nexport class Price extends Fraction {\n  /**\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n     * @param chainId\n     */\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.AVALANCHE): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.AVALANCHE) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\n      18,\n      'AXP',\n      'avaXwap'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId = ChainId.AVALANCHE): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId = ChainId.AVALANCHE): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPangolinPair from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/PangolinPair.sol/PangolinPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  \n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\n    const [reserves0, reserves1] = await new Contract(address, IPangolinPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\n  }\n}\n","import { ChainId } from \"./constants\";\n\ninterface StakingContract {\n  address: string;\n  active: boolean;\n  reward_token: string;\n}\n\nexport interface Chain {\n  id: string;\n  name: string;\n  chain_id: number;\n  mainnet: boolean;\n  pangolin_is_live: boolean;\n  tracked_by_debank: boolean;\n  supported_by_gelato: boolean;\n  rpc_uri: string;\n  symbol: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  }\n  blockExplorerUrls?: string[]\n  png_symbol?: string;\n  logo?: string;\n  coingecko_id?: string;\n  debank_pangolin_id?: string;\n  contracts?: {\n    png: string;\n    factory: string;\n    router: string;\n    wrapped_native_token: string;\n    local_multisig?: string;\n    community_treasury?: string;\n    treasury_vester?: string;\n    mini_chef?: string;\n    timelock?: string;\n    migrator?: string;\n    airdrop?: string;\n    foundation_multisig?: string;\n    joint_multisig?: string;\n    revenue_distributor?: string;\n    governor?: string;\n    fee_collector?: string;\n    staking?: StakingContract[];\n  }\n}\n\nexport const ETHEREUM_MAINNET: Chain = {\n  id: 'ethereum_mainnet',\n  chain_id: 1,\n  name: 'Ethereum',\n  symbol: 'ETH',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/eth.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n  coingecko_id: 'ethereum',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://etherscan.io'],\n}\n\nexport const ARBITRUM_MAINNET: Chain = {\n  id: 'arbitrum_mainnet',\n  chain_id: 42161,\n  name: 'Arbitrum',\n  symbol: 'ARB',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://arb1.arbitrum.io/rpc',\n  coingecko_id: 'arbitrum-one',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://arbiscan.io'],\n}\n\nexport const ARBITRUM_RINKEBY: Chain = {\n  id: 'arbitrum_rinkeby',\n  chain_id: 421611,\n  name: 'Arbitrum Rinkbey',\n  symbol: 'ARB',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rinkeby.arbitrum.io/rpc',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://rinkeby-explorer.arbitrum.io'],\n}\n\nexport const AURORA_MAINNET: Chain = {\n  id: 'aurora_mainnet',\n  chain_id: 1313161554,\n  name: 'Aurora',\n  symbol: 'AURORA',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.aurora.dev',\n  coingecko_id: 'aurora',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://aurorascan.dev'],\n}\n\nexport const AURORA_TESTNET: Chain = {\n  id: 'aurora_testnet',\n  chain_id: 1313161555,\n  name: 'Aurora Testnet',\n  symbol: 'AURORA',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.aurora.dev',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.aurorascan.dev'],\n}\n\nexport const AVALANCHE_MAINNET: Chain = {\n  id: 'avalanche_mainnet',\n  chain_id: 43114,\n  name: 'Avalanche',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax.network/ext/bc/C/rpc',\n  coingecko_id: 'avalanche',\n  debank_pangolin_id: 'avax_pangolin',\n  contracts: {\n    png: '0x60781C2586D68229fde47564546784ab3fACA982',\n    factory: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n    router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',\n    wrapped_native_token: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    local_multisig: '0x66c048d27aFB5EE59E4C07101A483654246A4eda',\n    community_treasury: '0x650f5865541f6D68BdDFE977dB933C293EA72358',\n    treasury_vester: '0x6747AC215dAFfeE03a42F49FebB6ab448E12acEe',\n    mini_chef: '0x1f806f7C8dED893fd3caE279191ad7Aa3798E928',\n    airdrop: '0x0C58C2041da4CfCcF5818Bbe3b66DBC23B3902d9',\n    timelock: '0xEB5c91bE6Dbfd30cf616127C2EA823C64e4b1ff8',\n    governor: '0xb0Ff2b1047d9E8d294c2eD798faE3fA817F43Ee1',\n    migrator: '0x4b23Aa72A1214d0E4fd3f2c8Da7C6ba660F7483C',\n    staking: [\n      {\n        address: '0x88afdaE1a9F58Da3E68584421937E5F564A0135b',\n        active: true,\n        reward_token: '0x60781C2586D68229fde47564546784ab3fACA982',\n      }\n    ]\n  },\n  nativeCurrency:{\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://snowtrace.io'],\n}\n\nexport const AVALANCHE_FUJI: Chain = {\n  id: 'avalanche_fuji',\n  chain_id: 43113,\n  name: 'Avalanche Fuji',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax-test.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0x83080D4b5fC60e22dFFA8d14AD3BB41Dde48F199',\n    factory: '0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd',\n    router: '0x2D99ABD9008Dc933ff5c0CD271B88309593aB921',\n    wrapped_native_token: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  },\n  nativeCurrency:{\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.snowtrace.io'],\n}\n\nexport const BOBA_MAINNET: Chain = {\n  id: 'boba_mainnet',\n  chain_id: 288,\n  name: 'Boba',\n  symbol: 'BOBA',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/boba.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.boba.network',\n  coingecko_id: 'boba',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockexplorer.boba.network'],\n}\n\nexport const BITTORRENT_MAINNET: Chain = {\n  id: 'bittorrent_mainnet',\n  chain_id: 199,\n  name: 'BitTorrent',\n  symbol: 'BTT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.bt.io',\n  nativeCurrency:{\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan.bt.io'],\n}\n\nexport const BITTORRENT_TESTNET: Chain = {\n  id: 'bittorrent_testnet',\n  chain_id: 1028,\n  name: 'BitTorrent Testnet',\n  symbol: 'BTT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://test-rpc.bittorrentchain.io',\n  nativeCurrency:{\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan.bittorrentchain.io'],\n}\n\nexport const BSC_MAINNET: Chain = {\n  id: 'bsc_mainnet',\n  chain_id: 56,\n  name: 'Binance',\n  symbol: 'BSC',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://bsc-dataseed.binance.org',\n  coingecko_id: 'binance-smart-chain',\n  nativeCurrency:{\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://bscscan.com'],\n\n}\n\nexport const BSC_TESTNET: Chain = {\n  id: 'bsc_testnet',\n  chain_id: 97,\n  name: 'Binance Testnet',\n  symbol: 'BSC',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n  nativeCurrency:{\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.bscscan.com'],\n}\n\nexport const CELO_MAINNET: Chain = {\n  id: 'celo_mainnet',\n  chain_id: 42220,\n  name: 'Celo',\n  symbol: 'CELO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://forno.celo.org',\n  coingecko_id: 'celo',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.celo.org'],\n}\n\nexport const CELO_ALFAJORES_TESTNET: Chain = {\n  id: 'celo_alfadores_testnet',\n  chain_id: 44787,\n  name: 'Celo Alfajores',\n  symbol: 'CELO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://alfajores-forno.celo-testnet.org',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://alfajores-blockscout.celo-testnet.org'],\n}\n\nexport const CELO_BAKLAVA_TESTNET: Chain = {\n  id: 'celo_baklava_testnet',\n  chain_id: 62320,\n  name: 'Celo Baklava',\n  symbol: 'CELO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://baklava-forno.celo-testnet.org',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://baklava-blockscout.celo-testnet.org'],\n}\n\nexport const CRONOS_MAINNET: Chain = {\n  id: 'cronos_mainnet',\n  chain_id: 25,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://evm-cronos.crypto.org',\n  coingecko_id: 'cronos',\n  nativeCurrency:{\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer'],\n}\n\nexport const CRONOS_TESTNET: Chain = {\n  id: 'cronos_testnet',\n  chain_id: 338,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://cronos-testnet-3.crypto.org:8545',\n  nativeCurrency:{\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer/testnet3'],\n\n}\n\nexport const COSTON_TESTNET: Chain = {\n  id: 'coston_testnet',\n  chain_id: 16,\n  name: 'Coston',\n  symbol: 'cFLR',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://coston-api.flare.network/ext/bc/C/rpc',\n  nativeCurrency:{\n    name: 'CostonFlare',\n    symbol: 'CFLR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://coston-explorer.flare.network'],\n}\n\nexport const EVMOS_TESTNET: Chain = {\n  id: 'evmos_testnet',\n  chain_id: 9000,\n  name: 'EVMOS Testnet',\n  symbol: 'tEVMOS',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.dev:8545',\n  nativeCurrency:{\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://evm.evmos.dev'],\n}\n\nexport const EVMOS_MAINNET: Chain = {\n  id: 'evmos_mainnet',\n  chain_id: 9001,\n  name: 'EVMOS',\n  symbol: 'EVMOS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.org:8545',\n  nativeCurrency:{\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://evm.evmos.org'],\n}\n\nexport const FANTOM_MAINNET: Chain = {\n  id: 'fantom_mainnet',\n  chain_id: 250,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.ftm.tools',\n  coingecko_id: 'fantom',\n  nativeCurrency:{\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://ftmscan.com'],\n}\n\nexport const FANTOM_TESTNET: Chain = {\n  id: 'fantom_testnet',\n  chain_id: 4002,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.testnet.fantom.network',\n  nativeCurrency:{\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.ftmscan.com'],\n}\n\nexport const FUSE_MAINNET: Chain = {\n  id: 'fuse_mainnet',\n  chain_id: 122,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fuse.io',\n  coingecko_id: 'fuse',\n  nativeCurrency:{\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://explorer.fuse.io'],\n}\n\nexport const FUSE_TESTNET: Chain = {\n  id: 'fuse_testnet',\n  chain_id: 123,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fusespark.io',\n  nativeCurrency:{\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.fusespark.io'],\n}\n\nexport const HARMONY_MAINNET: Chain = {\n  id: 'harmony_mainnet',\n  chain_id: 1666600000,\n  name: 'Harmony',\n  symbol: 'ONE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.harmony.one',\n  coingecko_id: 'harmony-shard-0',\n  nativeCurrency:{\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.harmony.one'],\n}\n\nexport const HARMONY_TESTNET: Chain = {\n  id: 'harmony_testnet',\n  chain_id: 1666700000,\n  name: 'Harmony Testnet',\n  symbol: 'ONE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.s0.b.hmny.io',\n  nativeCurrency:{\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.pops.one'],\n}\n\nexport const HECO_MAINNET: Chain = {\n  id: 'heco_mainnet',\n  chain_id: 128,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-mainnet.hecochain.com',\n  coingecko_id: 'huobi-token',\n  nativeCurrency:{\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://hecoinfo.com'],\n}\n\nexport const HECO_TESTNET: Chain = {\n  id: 'heco_testnet',\n  chain_id: 256,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-testnet.hecochain.com',\n  nativeCurrency:{\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan-testnet.hecochain.com'],\n}\n\nexport const KLAYTN_MAINNET: Chain = {\n  id: 'klaytn_mainnet',\n  chain_id: 8217,\n  name: 'Klaytn',\n  symbol: 'KLAY',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kaikas.cypress.klaytn.net:8651',\n  coingecko_id: 'klay-token',\n  nativeCurrency:{\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scope.klaytn.com'],\n}\n\nexport const KLAYTN_BAOBAB: Chain = {\n  id: 'klaytn_baobab',\n  chain_id: 1001,\n  name: 'Klaytn Baobab',\n  symbol: 'KLAY',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.baobab.klaytn.net:8651',\n  nativeCurrency:{\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://baobab.scope.klaytn.com'],\n}\n\nexport const METIS_MAINNET: Chain = {\n  id: 'metis_mainnet',\n  chain_id: 1088,\n  name: 'Metis',\n  symbol: 'METIS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://andromeda.metis.io/?owner=1088',\n  coingecko_id: 'metis-andromeda',\n  nativeCurrency:{\n    name: 'Metis',\n    symbol: 'METIS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://andromeda-explorer.metis.io'],\n}\n\nexport const METIS_RINKEBY: Chain = {\n  id: 'metis_rinkeby',\n  chain_id: 588,\n  name: 'Metis Rinkeby',\n  symbol: 'METIS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://stardust.metis.io/?owner=588',\n  nativeCurrency:{\n    name: 'Metis',\n    symbol: 'tMETIS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://stardust-explorer.metis.io'],\n}\n\nexport const MOONRIVER_MAINNET: Chain = {\n  id: 'moonriver_mainnet',\n  chain_id: 1285,\n  name: 'Moonriver',\n  symbol: 'MOVR',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/movr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.moonriver.moonbeam.network',\n  coingecko_id: 'moonriver',\n  nativeCurrency:{\n    name: 'Moonriver',\n    symbol: 'MOVR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonriver.moonscan.io'],\n}\n\nexport const MOONBEAM_MAINNET: Chain = {\n  id: 'moonbeam_mainnet',\n  chain_id: 1284,\n  name: 'Moonbeam',\n  symbol: 'MOBM',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbeam.network',\n  coingecko_id: 'moonbeam',\n  nativeCurrency:{\n    name: 'Moonbeam',\n    symbol: 'GLMR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonscan.io'],\n}\n\nexport const MOONBEAM_MOONBASE: Chain = {\n  id: 'moonbeam_moonbase',\n  chain_id: 1287,\n  name: 'Moonbase',\n  symbol: 'MOONBASE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbase.moonbeam.network',\n  nativeCurrency:{\n    name: 'Moonbase',\n    symbol: 'DEV',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonbase.moonscan.io'],\n}\n\nexport const OEC_MAINNET: Chain = {\n  id: 'oec_mainnet',\n  chain_id: 66,\n  name: 'OEC',\n  symbol: 'OKT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchainrpc.okex.org',\n  coingecko_id: 'okex-chain',\n  nativeCurrency:{\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.oklink.com/okexchain'],\n}\n\nexport const OEC_TESTNET: Chain = {\n  id: 'oec_testnet',\n  chain_id: 65,\n  name: 'OEC Testnet',\n  symbol: 'OKT',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchaintestrpc.okex.org',\n  nativeCurrency:{\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.oklink.com/oec-test'],\n}\n\nexport const OP_MAINNET: Chain = {\n  id: 'op_mainnet',\n  chain_id: 10,\n  name: 'Optimism',\n  symbol: 'OP',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.optimism.io',\n  coingecko_id: 'optimistic-ethereum',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://optimistic.etherscan.io'],\n}\n\nexport const OP_KOVAN: Chain = {\n  id: 'op_kovan',\n  chain_id: 69,\n  name: 'Optimism Kovan',\n  symbol: 'OP',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kovan.optimism.io',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://kovan-optimistic.etherscan.io'],\n}\n\nexport const POLYGON_MAINNET: Chain = {\n  id: 'polygon_mainnet',\n  chain_id: 137,\n  name: 'Polygon',\n  symbol: 'MATIC',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://polygon-rpc.com',\n  coingecko_id: 'polygon-pos',\n  nativeCurrency:{\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://polygonscan.com'],\n}\n\nexport const POLYGON_MUMBAI: Chain = {\n  id: 'polygon_mumbai',\n  chain_id: 80001,\n  name: 'Polygon Mumbai',\n  symbol: 'MATIC',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc-mumbai.maticvigil.com',\n  nativeCurrency:{\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://mumbai.polygonscan.com'],\n}\n\nexport const SONGBIRD_MAINNET: Chain = {\n  id: 'songbird_mainnet',\n  chain_id: 19,\n  name: 'Songbird',\n  symbol: 'SGB',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/sgb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://sgb.ftso.com.au/ext/bc/C/rpc',\n  nativeCurrency:{\n    name: 'Songbird',\n    symbol: 'SGB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://songbird-explorer.flare.network'],\n}\n\nexport const WAGMI_FUJI_SUBNET: Chain = {\n  id: 'wagmi_fuji_subnet',\n  chain_id: 11111,\n  name: 'Wagmi',\n  symbol: 'WGMI',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/wgmi.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc',\n  contracts: {\n    png: '0x25dbCAb8709E6222d74a56bD0184fc41439806CE',\n    factory: '0xAf94E75C94B44f21A65c4FDA09970aD6897172dB',\n    router: '0x2F99E88888ee24cbf1623FB7af7FD2e508123eb3',\n    wrapped_native_token: '0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',\n    local_multisig: '0x0000000000000000000000000000000000000000',\n    community_treasury: '0xd58Be8F6C782D6a50B8D7D8cc238735cA47fa5Cd',\n    treasury_vester: '0xE9c17Fd079F008146871cEECF77100527B26005b',\n    mini_chef: '0x08B7fAC01886858CE741bfA7573D281F05730bF1',\n    airdrop: '0xFf3A1Fbc721C9c1E92835b551e9A795FCdBa83e8',\n    timelock: '0x0A4731C721237C698e988e28de3f629b2367B8Ea',\n    governor: '0x0000000000000000000000000000000000000000',\n    migrator: '0x0000000000000000000000000000000000000000',\n    staking: [\n      {\n        address: '0x7101f9e7A21cF6b94859A27077F582B4002771e0',\n        active: true,\n        reward_token: '0x25dbCAb8709E6222d74a56bD0184fc41439806CE',\n      }\n    ]\n  },\n  nativeCurrency:{\n    name: 'Wagmi',\n    symbol: 'WGMI',\n    decimals: 18,\n  }\n}\n\nexport const XDAI_MAINNET: Chain = {\n  id: 'xdai_mainnet',\n  chain_id: 100,\n  name: 'Gnosis',\n  symbol: 'XDAI',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/xdai.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.xdaichain.com',\n  coingecko_id: 'xdai',\n  nativeCurrency:{\n    name: 'Gnosis',\n    symbol: 'xDAI',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/xdai/mainnet'],\n}\n\nexport const EWC_MAINNET: Chain = {\n  id: 'ewc_mainnet',\n  chain_id: 246,\n  name: 'Energy Web Chain',\n  symbol: 'EWT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.energyweb.org',\n  nativeCurrency:{\n    name: 'Energy Web Token',\n    symbol: 'EWT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://explorer.energyweb.org'],\n}\n\nexport const EWC_TESTNET: Chain = {\n  id: 'ewc_testnet',\n  chain_id: 73799,\n  name: 'Volta',\n  symbol: 'VT',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://volta-rpc.energyweb.org',\n  nativeCurrency:{\n    name: 'Volta',\n    symbol: 'VT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://volta-aexplorer.energyweb.org'],\n}\n\nexport const IOTEX_MAINNET: Chain = {\n  id: 'iotex_mainnet',\n  chain_id: 4689,\n  name: 'IoTex Mainnet',\n  symbol: 'IOTX',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.mainnet.iotex.io',\n  coingecko_id: 'iotex',\n  nativeCurrency:{\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://iotexscan.io'],\n}\n\nexport const IOTEX_TESTNET: Chain = {\n  id: 'iotex_testnet',\n  chain_id: 4690,\n  name: 'IoTex Testnet',\n  symbol: 'IOTX',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.testnet.iotex.io',\n  nativeCurrency:{\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.iotexscan.io'],\n}\n\nexport const ASTAR_MAINNET: Chain = {\n  id: 'astar_mainnet',\n  chain_id: 592,\n  name: 'Astar Network',\n  symbol: 'ASTR',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://astar.api.onfinality.io/public',\n  nativeCurrency:{\n    name: 'Astar',\n    symbol: 'ASTL',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/astar'],\n}\n\nexport const SHIDEN_TESTNET: Chain = {\n  id: 'astar_shiden_testnet',\n  chain_id: 336,\n  name: 'Shiden Network',\n  symbol: 'SDN',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://shiden.api.onfinality.io/public',\n  nativeCurrency:{\n    name: 'Shiden',\n    symbol: 'SDN',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/shiden'],\n}\n\nexport const SHIBUYA_TESTNET: Chain = {\n  id: 'astar_shibuya_testnet',\n  chain_id: 81,\n  name: 'Shibuya Network',\n  symbol: 'SBY',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.shibuya.astar.network:8545',\n  nativeCurrency:{\n    name: 'Shibuya',\n    symbol: 'SBY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/shibuya'],\n}\n\nexport const TELOS_MAINNET: Chain = {\n  id: 'telos_mainnet',\n  chain_id: 40,\n  name: 'Telos',\n  symbol: 'TLOS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.telos.net/evm',\n  coingecko_id: 'telos',\n  nativeCurrency:{\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.teloscan.io'],\n}\n\nexport const TELOS_TESTNET: Chain = {\n  id: 'telos_testnet',\n  chain_id: 41,\n  name: 'Telos Testnet',\n  symbol: 'TLOS',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.telos.net/evm',\n  nativeCurrency:{\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.telos.net/v2/explore'],\n}\n\nexport const OASIS_MAINNET: Chain = {\n  id: 'oasis_mainnet',\n  chain_id: 42262,\n  name: 'Oasis Emerald',\n  symbol: 'ROSE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://emerald.oasis.dev',\n  coingecko_id: 'oasis',\n  nativeCurrency:{\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.emerald.oasis.dev'],\n}\n\nexport const OASIS_TESTNET: Chain = {\n  id: 'oasis_testnet',\n  chain_id: 42261,\n  name: 'Oasis Emerald Testnet',\n  symbol: 'ROSE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.emerald.oasis.dev',\n  nativeCurrency:{\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.explorer.emerald.oasis.dev'],\n}\nexport const CHAINS: { [chainId in ChainId ]: Chain } = {\n  [ChainId.FUJI]: AVALANCHE_FUJI,\n  [ChainId.AVALANCHE]: AVALANCHE_MAINNET,\n  [ChainId.WAGMI]: WAGMI_FUJI_SUBNET,\n}\n\nexport const ALL_CHAINS: Chain[] = [\n  ETHEREUM_MAINNET,\n  ARBITRUM_MAINNET,\n  ARBITRUM_RINKEBY,\n  AURORA_MAINNET,\n  AURORA_TESTNET,\n  AVALANCHE_MAINNET,\n  AVALANCHE_FUJI,\n  BOBA_MAINNET,\n  BITTORRENT_MAINNET,\n  BSC_MAINNET,\n  BSC_TESTNET,\n  CELO_MAINNET,\n  CELO_ALFAJORES_TESTNET,\n  CELO_BAKLAVA_TESTNET,\n  COSTON_TESTNET,\n  CRONOS_MAINNET,\n  CRONOS_TESTNET,\n  EVMOS_MAINNET,\n  EVMOS_TESTNET,\n  FANTOM_MAINNET,\n  FANTOM_TESTNET,\n  FUSE_MAINNET,\n  FUSE_TESTNET,\n  HARMONY_MAINNET,\n  HARMONY_TESTNET,\n  HECO_MAINNET,\n  HECO_TESTNET,\n  KLAYTN_MAINNET,\n  KLAYTN_BAOBAB,\n  METIS_MAINNET,\n  METIS_RINKEBY,\n  MOONRIVER_MAINNET,\n  MOONBEAM_MAINNET,\n  MOONBEAM_MOONBASE,\n  OEC_MAINNET,\n  OEC_TESTNET,\n  OP_MAINNET,\n  OP_KOVAN,\n  POLYGON_MAINNET,\n  POLYGON_MUMBAI,\n  SONGBIRD_MAINNET,\n  WAGMI_FUJI_SUBNET,\n  XDAI_MAINNET,\n  EWC_MAINNET,\n  EWC_TESTNET,\n  IOTEX_MAINNET,\n  IOTEX_TESTNET,\n  ASTAR_MAINNET,\n  SHIDEN_TESTNET,\n  SHIBUYA_TESTNET,\n  TELOS_MAINNET,\n  TELOS_TESTNET,\n  OASIS_MAINNET,\n  OASIS_TESTNET\n]\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n\n  //$ public static readonly CAVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly CURRENCY = {\n    [ChainId.FUJI]: new Currency(18, 'AVAX', 'Avalanche'),\n    [ChainId.AVALANCHE]: new Currency(18, 'AVAX', 'Avalanche'),\n    [ChainId.WAGMI]: new Currency(18, 'WGM', 'Wagmi'),\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\n//$ const CAVAX = Currency.CAVAX\nconst CAVAX = Currency.CURRENCY\nexport { CAVAX }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n  public readonly address: string\n\n  public constructor(chainId: ChainId = ChainId.AVALANCHE, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WAVAX = {\n  [ChainId.FUJI]: new Token(ChainId.FUJI,'0xd00ae08403B9bbb9124bB305C09058E32C39A48c',18,'WAVAX','Wrapped AVAX'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE,'0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',18,'WAVAX','Wrapped AVAX'),\n  [ChainId.WAGMI]: new Token(ChainId.WAGMI,'0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',18,'wWAGMI','Wrapped WAGMI')\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\nimport { Currency, CAVAX } from './currency'\nimport { Token, WAVAX } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === CAVAX[pairs[0].chainId] && pairs[0].involvesToken(WAVAX[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === CAVAX[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WAVAX[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WAVAX[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, CAVAX } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WAVAX } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === CAVAX[chainId]) return new TokenAmount(WAVAX[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.AVALANCHE): Token {\n  if (currency instanceof Token) return currency\n  if (currency === CAVAX[chainId]) return WAVAX[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, chainId: ChainId = ChainId.AVALANCHE) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], chainId)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.chainId = chainId\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n            chainId\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            chainId\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","FUJI","AVALANCHE","WAGMI","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","toHex","currencyAmount","raw","ZERO_HEX","Router","swapCallParameters","trade","options","chainId","etherIn","inputAmount","currency","CAVAX","etherOut","outputAmount","ttl","to","recipient","amountIn","maximumAmountIn","allowedSlippage","amountOut","minimumAmountOut","path","route","map","token","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","tradeType","EXACT_INPUT","EXACT_OUTPUT","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","decimals","ether","currencyEquals","toExact","TokenAmount","equals","Price","baseCurrency","quoteCurrency","scalar","fromRoute","prices","pairs","entries","i","pair","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","Token","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPangolinPair","abi","getReserves","reserves0","reserves1","balances","ETHEREUM_MAINNET","id","chain_id","mainnet","logo","pangolin_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","blockExplorerUrls","ARBITRUM_MAINNET","ARBITRUM_RINKEBY","AURORA_MAINNET","AURORA_TESTNET","AVALANCHE_MAINNET","png_symbol","debank_pangolin_id","contracts","png","factory","router","wrapped_native_token","local_multisig","community_treasury","treasury_vester","mini_chef","airdrop","timelock","governor","migrator","staking","active","reward_token","AVALANCHE_FUJI","BOBA_MAINNET","BITTORRENT_MAINNET","BITTORRENT_TESTNET","BSC_MAINNET","BSC_TESTNET","CELO_MAINNET","CELO_ALFAJORES_TESTNET","CELO_BAKLAVA_TESTNET","CRONOS_MAINNET","CRONOS_TESTNET","COSTON_TESTNET","EVMOS_TESTNET","EVMOS_MAINNET","FANTOM_MAINNET","FANTOM_TESTNET","FUSE_MAINNET","FUSE_TESTNET","HARMONY_MAINNET","HARMONY_TESTNET","HECO_MAINNET","HECO_TESTNET","KLAYTN_MAINNET","KLAYTN_BAOBAB","METIS_MAINNET","METIS_RINKEBY","MOONRIVER_MAINNET","MOONBEAM_MAINNET","MOONBEAM_MOONBASE","OEC_MAINNET","OEC_TESTNET","OP_MAINNET","OP_KOVAN","POLYGON_MAINNET","POLYGON_MUMBAI","SONGBIRD_MAINNET","WAGMI_FUJI_SUBNET","XDAI_MAINNET","EWC_MAINNET","EWC_TESTNET","IOTEX_MAINNET","IOTEX_TESTNET","ASTAR_MAINNET","SHIDEN_TESTNET","SHIBUYA_TESTNET","TELOS_MAINNET","TELOS_TESTNET","OASIS_MAINNET","OASIS_TESTNET","CHAINS","ALL_CHAINS","Currency","CURRENCY","toLowerCase","currencyA","currencyB","WAVAX","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","exactIn","exactOut","slippageTolerance","slippageAdjustedAmountOut","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError"],"mappings":"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"}