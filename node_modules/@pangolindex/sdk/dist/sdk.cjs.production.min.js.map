{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/router.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/chains.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  FUJI = 43113,\n  AVALANCHE = 43114,\n  WAGMI = 11111\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.FUJI]: '0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd',\n  [ChainId.AVALANCHE]: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n  [ChainId.WAGMI]: '0xf7D180bE35be07fA5B2EC584aB7bF2B701e6EB45'\n}\n\nexport const INIT_CODE_HASH = '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, CAVAX, Percent, Trade } from './entities'\nimport { ChainId } from '.'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline, chainId: ChainId = ChainId.AVALANCHE): SwapParameters {\n    const etherIn = trade.inputAmount.currency === CAVAX[chainId]\n    const etherOut = trade.outputAmount.currency === CAVAX[chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage, chainId))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage, chainId))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactAVAXForTokensSupportingFeeOnTransferTokens' : 'swapExactAVAXForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForAVAXSupportingFeeOnTransferTokens' : 'swapExactTokensForAVAX'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapAVAXForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactAVAX'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, CAVAX } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   * @param chainId\n   */\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    return new CurrencyAmount(CAVAX[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN, ChainId } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\n\nexport class Price extends Fraction {\n  /**\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n     * @param chainId\n     */\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.AVALANCHE): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.AVALANCHE) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\n      18,\n      'AXP',\n      'avaXwap'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId = ChainId.AVALANCHE): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId = ChainId.AVALANCHE): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPangolinPair from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/PangolinPair.sol/PangolinPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  \n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId = ChainId.AVALANCHE,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\n    const [reserves0, reserves1] = await new Contract(address, IPangolinPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\n  }\n}\n","import { ChainId } from \"./constants\";\n\ninterface StakingContract {\n  address: string;\n  active: boolean;\n  reward_token: string;\n}\n\nexport interface Chain {\n  id: string;\n  name: string;\n  chain_id: number;\n  mainnet: boolean;\n  pangolin_is_live: boolean;\n  tracked_by_debank: boolean;\n  supported_by_gelato: boolean;\n  rpc_uri: string;\n  symbol: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  }\n  blockExplorerUrls?: string[]\n  png_symbol?: string;\n  logo?: string;\n  coingecko_id?: string;\n  debank_pangolin_id?: string;\n  contracts?: {\n    png: string;\n    factory: string;\n    router: string;\n    wrapped_native_token: string;\n    local_multisig?: string;\n    community_treasury?: string;\n    treasury_vester?: string;\n    mini_chef?: string;\n    timelock?: string;\n    migrator?: string;\n    airdrop?: string;\n    foundation_multisig?: string;\n    joint_multisig?: string;\n    revenue_distributor?: string;\n    governor?: string;\n    fee_collector?: string;\n    staking?: StakingContract[];\n  }\n}\n\nexport const ETHEREUM_MAINNET: Chain = {\n  id: 'ethereum_mainnet',\n  chain_id: 1,\n  name: 'Ethereum',\n  symbol: 'ETH',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/eth.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n  coingecko_id: 'ethereum',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://etherscan.io'],\n}\n\nexport const ARBITRUM_MAINNET: Chain = {\n  id: 'arbitrum_mainnet',\n  chain_id: 42161,\n  name: 'Arbitrum',\n  symbol: 'ARB',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://arb1.arbitrum.io/rpc',\n  coingecko_id: 'arbitrum-one',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://arbiscan.io'],\n}\n\nexport const ARBITRUM_RINKEBY: Chain = {\n  id: 'arbitrum_rinkeby',\n  chain_id: 421611,\n  name: 'Arbitrum Rinkbey',\n  symbol: 'ARB',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/arb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rinkeby.arbitrum.io/rpc',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://rinkeby-explorer.arbitrum.io'],\n}\n\nexport const AURORA_MAINNET: Chain = {\n  id: 'aurora_mainnet',\n  chain_id: 1313161554,\n  name: 'Aurora',\n  symbol: 'AURORA',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.aurora.dev',\n  coingecko_id: 'aurora',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://aurorascan.dev'],\n}\n\nexport const AURORA_TESTNET: Chain = {\n  id: 'aurora_testnet',\n  chain_id: 1313161555,\n  name: 'Aurora Testnet',\n  symbol: 'AURORA',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/aurora.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.aurora.dev',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.aurorascan.dev'],\n}\n\nexport const AVALANCHE_MAINNET: Chain = {\n  id: 'avalanche_mainnet',\n  chain_id: 43114,\n  name: 'Avalanche',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax.network/ext/bc/C/rpc',\n  coingecko_id: 'avalanche',\n  debank_pangolin_id: 'avax_pangolin',\n  contracts: {\n    png: '0x60781C2586D68229fde47564546784ab3fACA982',\n    factory: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n    router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',\n    wrapped_native_token: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    local_multisig: '0x66c048d27aFB5EE59E4C07101A483654246A4eda',\n    community_treasury: '0x650f5865541f6D68BdDFE977dB933C293EA72358',\n    treasury_vester: '0x6747AC215dAFfeE03a42F49FebB6ab448E12acEe',\n    mini_chef: '0x1f806f7C8dED893fd3caE279191ad7Aa3798E928',\n    airdrop: '0x0C58C2041da4CfCcF5818Bbe3b66DBC23B3902d9',\n    timelock: '0xEB5c91bE6Dbfd30cf616127C2EA823C64e4b1ff8',\n    governor: '0xb0Ff2b1047d9E8d294c2eD798faE3fA817F43Ee1',\n    migrator: '0x4b23Aa72A1214d0E4fd3f2c8Da7C6ba660F7483C',\n    staking: [\n      {\n        address: '0x88afdaE1a9F58Da3E68584421937E5F564A0135b',\n        active: true,\n        reward_token: '0x60781C2586D68229fde47564546784ab3fACA982',\n      }\n    ]\n  },\n  nativeCurrency:{\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://snowtrace.io'],\n}\n\nexport const AVALANCHE_FUJI: Chain = {\n  id: 'avalanche_fuji',\n  chain_id: 43113,\n  name: 'Avalanche Fuji',\n  symbol: 'AVAX',\n  png_symbol: 'PNG',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/avax.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://api.avax-test.network/ext/bc/C/rpc',\n  contracts: {\n    png: '0x83080D4b5fC60e22dFFA8d14AD3BB41Dde48F199',\n    factory: '0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd',\n    router: '0x2D99ABD9008Dc933ff5c0CD271B88309593aB921',\n    wrapped_native_token: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  },\n  nativeCurrency:{\n    name: 'Avalanche',\n    symbol: 'AVAX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.snowtrace.io'],\n}\n\nexport const BOBA_MAINNET: Chain = {\n  id: 'boba_mainnet',\n  chain_id: 288,\n  name: 'Boba',\n  symbol: 'BOBA',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/boba.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.boba.network',\n  coingecko_id: 'boba',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockexplorer.boba.network'],\n}\n\nexport const BITTORRENT_MAINNET: Chain = {\n  id: 'bittorrent_mainnet',\n  chain_id: 199,\n  name: 'BitTorrent',\n  symbol: 'BTT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.bt.io',\n  nativeCurrency:{\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan.bt.io'],\n}\n\nexport const BITTORRENT_TESTNET: Chain = {\n  id: 'bittorrent_testnet',\n  chain_id: 1028,\n  name: 'BitTorrent Testnet',\n  symbol: 'BTT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/btt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://test-rpc.bittorrentchain.io',\n  nativeCurrency:{\n    name: 'BitTorrent',\n    symbol: 'BTT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan.bittorrentchain.io'],\n}\n\nexport const BSC_MAINNET: Chain = {\n  id: 'bsc_mainnet',\n  chain_id: 56,\n  name: 'Binance',\n  symbol: 'BSC',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://bsc-dataseed.binance.org',\n  coingecko_id: 'binance-smart-chain',\n  nativeCurrency:{\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://bscscan.com'],\n\n}\n\nexport const BSC_TESTNET: Chain = {\n  id: 'bsc_testnet',\n  chain_id: 97,\n  name: 'Binance Testnet',\n  symbol: 'BSC',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/bsc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n  nativeCurrency:{\n    name: 'Binance Coin',\n    symbol: 'BNB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.bscscan.com'],\n}\n\nexport const CELO_MAINNET: Chain = {\n  id: 'celo_mainnet',\n  chain_id: 42220,\n  name: 'Celo',\n  symbol: 'CELO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://forno.celo.org',\n  coingecko_id: 'celo',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.celo.org'],\n}\n\nexport const CELO_ALFAJORES_TESTNET: Chain = {\n  id: 'celo_alfadores_testnet',\n  chain_id: 44787,\n  name: 'Celo Alfajores',\n  symbol: 'CELO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://alfajores-forno.celo-testnet.org',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://alfajores-blockscout.celo-testnet.org'],\n}\n\nexport const CELO_BAKLAVA_TESTNET: Chain = {\n  id: 'celo_baklava_testnet',\n  chain_id: 62320,\n  name: 'Celo Baklava',\n  symbol: 'CELO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/celo.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://baklava-forno.celo-testnet.org',\n  nativeCurrency:{\n    name: 'Celo',\n    symbol: 'CELO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://baklava-blockscout.celo-testnet.org'],\n}\n\nexport const CRONOS_MAINNET: Chain = {\n  id: 'cronos_mainnet',\n  chain_id: 25,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://evm-cronos.crypto.org',\n  coingecko_id: 'cronos',\n  nativeCurrency:{\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer'],\n}\n\nexport const CRONOS_TESTNET: Chain = {\n  id: 'cronos_testnet',\n  chain_id: 338,\n  name: 'Cronos',\n  symbol: 'CRO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/cro.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://cronos-testnet-3.crypto.org:8545',\n  nativeCurrency:{\n    name: 'Cronos',\n    symbol: 'CRO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://cronos.org/explorer/testnet3'],\n\n}\n\nexport const COSTON_TESTNET: Chain = {\n  id: 'coston_testnet',\n  chain_id: 16,\n  name: 'Coston',\n  symbol: 'cFLR',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/flare.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://coston-api.flare.network/ext/bc/C/rpc',\n  nativeCurrency:{\n    name: 'CostonFlare',\n    symbol: 'CFLR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://coston-explorer.flare.network'],\n}\n\nexport const EVMOS_TESTNET: Chain = {\n  id: 'evmos_testnet',\n  chain_id: 9000,\n  name: 'EVMOS Testnet',\n  symbol: 'tEVMOS',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.dev:8545',\n  nativeCurrency:{\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://evm.evmos.dev'],\n}\n\nexport const EVMOS_MAINNET: Chain = {\n  id: 'evmos_mainnet',\n  chain_id: 9001,\n  name: 'EVMOS',\n  symbol: 'EVMOS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/evmos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://eth.bd.evmos.org:8545',\n  nativeCurrency:{\n    name: 'EVMOS',\n    symbol: 'EVMOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://evm.evmos.org'],\n}\n\nexport const FANTOM_MAINNET: Chain = {\n  id: 'fantom_mainnet',\n  chain_id: 250,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.ftm.tools',\n  coingecko_id: 'fantom',\n  nativeCurrency:{\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://ftmscan.com'],\n}\n\nexport const FANTOM_TESTNET: Chain = {\n  id: 'fantom_testnet',\n  chain_id: 4002,\n  name: 'Fantom',\n  symbol: 'FTM',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ftm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc.testnet.fantom.network',\n  nativeCurrency:{\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.ftmscan.com'],\n}\n\nexport const FUSE_MAINNET: Chain = {\n  id: 'fuse_mainnet',\n  chain_id: 122,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fuse.io',\n  coingecko_id: 'fuse',\n  nativeCurrency:{\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://explorer.fuse.io'],\n}\n\nexport const FUSE_TESTNET: Chain = {\n  id: 'fuse_testnet',\n  chain_id: 123,\n  name: 'Fuse',\n  symbol: 'FUSE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/fuse.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.fusespark.io',\n  nativeCurrency:{\n    name: 'Fuse',\n    symbol: 'FUSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.fusespark.io'],\n}\n\nexport const HARMONY_MAINNET: Chain = {\n  id: 'harmony_mainnet',\n  chain_id: 1666600000,\n  name: 'Harmony',\n  symbol: 'ONE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.harmony.one',\n  coingecko_id: 'harmony-shard-0',\n  nativeCurrency:{\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.harmony.one'],\n}\n\nexport const HARMONY_TESTNET: Chain = {\n  id: 'harmony_testnet',\n  chain_id: 1666700000,\n  name: 'Harmony Testnet',\n  symbol: 'ONE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/one.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.s0.b.hmny.io',\n  nativeCurrency:{\n    name: 'Harmony',\n    symbol: 'ONE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.pops.one'],\n}\n\nexport const HECO_MAINNET: Chain = {\n  id: 'heco_mainnet',\n  chain_id: 128,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-mainnet.hecochain.com',\n  coingecko_id: 'huobi-token',\n  nativeCurrency:{\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://hecoinfo.com'],\n}\n\nexport const HECO_TESTNET: Chain = {\n  id: 'heco_testnet',\n  chain_id: 256,\n  name: 'Heco',\n  symbol: 'HECO',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/heco.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://http-testnet.hecochain.com',\n  nativeCurrency:{\n    name: 'Heco',\n    symbol: 'HECO',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scan-testnet.hecochain.com'],\n}\n\nexport const KLAYTN_MAINNET: Chain = {\n  id: 'klaytn_mainnet',\n  chain_id: 8217,\n  name: 'Klaytn',\n  symbol: 'KLAY',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kaikas.cypress.klaytn.net:8651',\n  coingecko_id: 'klay-token',\n  nativeCurrency:{\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://scope.klaytn.com'],\n}\n\nexport const KLAYTN_BAOBAB: Chain = {\n  id: 'klaytn_baobab',\n  chain_id: 1001,\n  name: 'Klaytn Baobab',\n  symbol: 'KLAY',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/klay.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://api.baobab.klaytn.net:8651',\n  nativeCurrency:{\n    name: 'Klaytn',\n    symbol: 'KLAY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://baobab.scope.klaytn.com'],\n}\n\nexport const METIS_MAINNET: Chain = {\n  id: 'metis_mainnet',\n  chain_id: 1088,\n  name: 'Metis',\n  symbol: 'METIS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://andromeda.metis.io/?owner=1088',\n  coingecko_id: 'metis-andromeda',\n  nativeCurrency:{\n    name: 'Metis',\n    symbol: 'METIS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://andromeda-explorer.metis.io'],\n}\n\nexport const METIS_RINKEBY: Chain = {\n  id: 'metis_rinkeby',\n  chain_id: 588,\n  name: 'Metis Rinkeby',\n  symbol: 'METIS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/metis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://stardust.metis.io/?owner=588',\n  nativeCurrency:{\n    name: 'Metis',\n    symbol: 'tMETIS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://stardust-explorer.metis.io'],\n}\n\nexport const MOONRIVER_MAINNET: Chain = {\n  id: 'moonriver_mainnet',\n  chain_id: 1285,\n  name: 'Moonriver',\n  symbol: 'MOVR',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/movr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.moonriver.moonbeam.network',\n  coingecko_id: 'moonriver',\n  nativeCurrency:{\n    name: 'Moonriver',\n    symbol: 'MOVR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonriver.moonscan.io'],\n}\n\nexport const MOONBEAM_MAINNET: Chain = {\n  id: 'moonbeam_mainnet',\n  chain_id: 1284,\n  name: 'Moonbeam',\n  symbol: 'MOBM',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbeam.network',\n  coingecko_id: 'moonbeam',\n  nativeCurrency:{\n    name: 'Moonbeam',\n    symbol: 'GLMR',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonscan.io'],\n}\n\nexport const MOONBEAM_MOONBASE: Chain = {\n  id: 'moonbeam_moonbase',\n  chain_id: 1287,\n  name: 'Moonbase',\n  symbol: 'MOONBASE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/mobm.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.api.moonbase.moonbeam.network',\n  nativeCurrency:{\n    name: 'Moonbase',\n    symbol: 'DEV',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://moonbase.moonscan.io'],\n}\n\nexport const OEC_MAINNET: Chain = {\n  id: 'oec_mainnet',\n  chain_id: 66,\n  name: 'OEC',\n  symbol: 'OKT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchainrpc.okex.org',\n  coingecko_id: 'okex-chain',\n  nativeCurrency:{\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.oklink.com/okexchain'],\n}\n\nexport const OEC_TESTNET: Chain = {\n  id: 'oec_testnet',\n  chain_id: 65,\n  name: 'OEC Testnet',\n  symbol: 'OKT',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/okt.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://exchaintestrpc.okex.org',\n  nativeCurrency:{\n    name: 'OEC',\n    symbol: 'OKT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.oklink.com/oec-test'],\n}\n\nexport const OP_MAINNET: Chain = {\n  id: 'op_mainnet',\n  chain_id: 10,\n  name: 'Optimism',\n  symbol: 'OP',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.optimism.io',\n  coingecko_id: 'optimistic-ethereum',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://optimistic.etherscan.io'],\n}\n\nexport const OP_KOVAN: Chain = {\n  id: 'op_kovan',\n  chain_id: 69,\n  name: 'Optimism Kovan',\n  symbol: 'OP',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/op.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://kovan.optimism.io',\n  nativeCurrency:{\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://kovan-optimistic.etherscan.io'],\n}\n\nexport const POLYGON_MAINNET: Chain = {\n  id: 'polygon_mainnet',\n  chain_id: 137,\n  name: 'Polygon',\n  symbol: 'MATIC',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: true,\n  rpc_uri: 'https://polygon-rpc.com',\n  coingecko_id: 'polygon-pos',\n  nativeCurrency:{\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://polygonscan.com'],\n}\n\nexport const POLYGON_MUMBAI: Chain = {\n  id: 'polygon_mumbai',\n  chain_id: 80001,\n  name: 'Polygon Mumbai',\n  symbol: 'MATIC',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/matic.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: true,\n  rpc_uri: 'https://rpc-mumbai.maticvigil.com',\n  nativeCurrency:{\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://mumbai.polygonscan.com'],\n}\n\nexport const SONGBIRD_MAINNET: Chain = {\n  id: 'songbird_mainnet',\n  chain_id: 19,\n  name: 'Songbird',\n  symbol: 'SGB',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/sgb.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://sgb.ftso.com.au/ext/bc/C/rpc',\n  nativeCurrency:{\n    name: 'Songbird',\n    symbol: 'SGB',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://songbird-explorer.flare.network'],\n}\n\nexport const WAGMI_FUJI_SUBNET: Chain = {\n  id: 'wagmi_fuji_subnet',\n  chain_id: 11111,\n  name: 'Wagmi',\n  symbol: 'WGMI',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/wgmi.png',\n  pangolin_is_live: true,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc',\n  contracts: {\n    png: '0x25dbCAb8709E6222d74a56bD0184fc41439806CE',\n    factory: '0xAf94E75C94B44f21A65c4FDA09970aD6897172dB',\n    router: '0x2F99E88888ee24cbf1623FB7af7FD2e508123eb3',\n    wrapped_native_token: '0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',\n    local_multisig: '0x0000000000000000000000000000000000000000',\n    community_treasury: '0xd58Be8F6C782D6a50B8D7D8cc238735cA47fa5Cd',\n    treasury_vester: '0xE9c17Fd079F008146871cEECF77100527B26005b',\n    mini_chef: '0x08B7fAC01886858CE741bfA7573D281F05730bF1',\n    airdrop: '0xFf3A1Fbc721C9c1E92835b551e9A795FCdBa83e8',\n    timelock: '0x0A4731C721237C698e988e28de3f629b2367B8Ea',\n    governor: '0x0000000000000000000000000000000000000000',\n    migrator: '0x0000000000000000000000000000000000000000',\n    staking: [\n      {\n        address: '0x7101f9e7A21cF6b94859A27077F582B4002771e0',\n        active: true,\n        reward_token: '0x25dbCAb8709E6222d74a56bD0184fc41439806CE',\n      }\n    ]\n  },\n  nativeCurrency:{\n    name: 'Wagmi',\n    symbol: 'WGMI',\n    decimals: 18,\n  }\n}\n\nexport const XDAI_MAINNET: Chain = {\n  id: 'xdai_mainnet',\n  chain_id: 100,\n  name: 'Gnosis',\n  symbol: 'XDAI',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/xdai.png',\n  pangolin_is_live: false,\n  tracked_by_debank: true,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.xdaichain.com',\n  coingecko_id: 'xdai',\n  nativeCurrency:{\n    name: 'Gnosis',\n    symbol: 'xDAI',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/xdai/mainnet'],\n}\n\nexport const EWC_MAINNET: Chain = {\n  id: 'ewc_mainnet',\n  chain_id: 246,\n  name: 'Energy Web Chain',\n  symbol: 'EWT',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.energyweb.org',\n  nativeCurrency:{\n    name: 'Energy Web Token',\n    symbol: 'EWT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://explorer.energyweb.org'],\n}\n\nexport const EWC_TESTNET: Chain = {\n  id: 'ewc_testnet',\n  chain_id: 73799,\n  name: 'Volta',\n  symbol: 'VT',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/ewc.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://volta-rpc.energyweb.org',\n  nativeCurrency:{\n    name: 'Volta',\n    symbol: 'VT',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['http://volta-aexplorer.energyweb.org'],\n}\n\nexport const IOTEX_MAINNET: Chain = {\n  id: 'iotex_mainnet',\n  chain_id: 4689,\n  name: 'IoTex Mainnet',\n  symbol: 'IOTX',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.mainnet.iotex.io',\n  coingecko_id: 'iotex',\n  nativeCurrency:{\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://iotexscan.io'],\n}\n\nexport const IOTEX_TESTNET: Chain = {\n  id: 'iotex_testnet',\n  chain_id: 4690,\n  name: 'IoTex Testnet',\n  symbol: 'IOTX',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/iotx.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://babel-api.testnet.iotex.io',\n  nativeCurrency:{\n    name: 'IoTex',\n    symbol: 'IOTX',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.iotexscan.io'],\n}\n\nexport const ASTAR_MAINNET: Chain = {\n  id: 'astar_mainnet',\n  chain_id: 592,\n  name: 'Astar Network',\n  symbol: 'ASTR',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://astar.api.onfinality.io/public',\n  nativeCurrency:{\n    name: 'Astar',\n    symbol: 'ASTL',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/astar'],\n}\n\nexport const SHIDEN_TESTNET: Chain = {\n  id: 'astar_shiden_testnet',\n  chain_id: 336,\n  name: 'Shiden Network',\n  symbol: 'SDN',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://shiden.api.onfinality.io/public',\n  nativeCurrency:{\n    name: 'Shiden',\n    symbol: 'SDN',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/shiden'],\n}\n\nexport const SHIBUYA_TESTNET: Chain = {\n  id: 'astar_shibuya_testnet',\n  chain_id: 81,\n  name: 'Shibuya Network',\n  symbol: 'SBY',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/astr.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://rpc.shibuya.astar.network:8545',\n  nativeCurrency:{\n    name: 'Shibuya',\n    symbol: 'SBY',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://blockscout.com/shibuya'],\n}\n\nexport const TELOS_MAINNET: Chain = {\n  id: 'telos_mainnet',\n  chain_id: 40,\n  name: 'Telos',\n  symbol: 'TLOS',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://mainnet.telos.net/evm',\n  coingecko_id: 'telos',\n  nativeCurrency:{\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://www.teloscan.io'],\n}\n\nexport const TELOS_TESTNET: Chain = {\n  id: 'telos_testnet',\n  chain_id: 41,\n  name: 'Telos Testnet',\n  symbol: 'TLOS',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/telos.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.telos.net/evm',\n  nativeCurrency:{\n    name: 'TELOS',\n    symbol: 'TLOS',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.telos.net/v2/explore'],\n}\n\nexport const OASIS_MAINNET: Chain = {\n  id: 'oasis_mainnet',\n  chain_id: 42262,\n  name: 'Oasis Emerald',\n  symbol: 'ROSE',\n  mainnet: true,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://emerald.oasis.dev',\n  coingecko_id: 'oasis',\n  nativeCurrency:{\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://explorer.emerald.oasis.dev'],\n}\n\nexport const OASIS_TESTNET: Chain = {\n  id: 'oasis_testnet',\n  chain_id: 42261,\n  name: 'Oasis Emerald Testnet',\n  symbol: 'ROSE',\n  mainnet: false,\n  logo: 'https://raw.githubusercontent.com/pangolindex/sdk/master/src/images/chains/oasis.png',\n  pangolin_is_live: false,\n  tracked_by_debank: false,\n  supported_by_gelato: false,\n  rpc_uri: 'https://testnet.emerald.oasis.dev',\n  nativeCurrency:{\n    name: 'Oasis Network',\n    symbol: 'ROSE',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://testnet.explorer.emerald.oasis.dev'],\n}\nexport const CHAINS: { [chainId in ChainId ]: Chain } = {\n  [ChainId.FUJI]: AVALANCHE_FUJI,\n  [ChainId.AVALANCHE]: AVALANCHE_MAINNET,\n  [ChainId.WAGMI]: WAGMI_FUJI_SUBNET,\n}\n\nexport const ALL_CHAINS: Chain[] = [\n  ETHEREUM_MAINNET,\n  ARBITRUM_MAINNET,\n  ARBITRUM_RINKEBY,\n  AURORA_MAINNET,\n  AURORA_TESTNET,\n  AVALANCHE_MAINNET,\n  AVALANCHE_FUJI,\n  BOBA_MAINNET,\n  BITTORRENT_MAINNET,\n  BSC_MAINNET,\n  BSC_TESTNET,\n  CELO_MAINNET,\n  CELO_ALFAJORES_TESTNET,\n  CELO_BAKLAVA_TESTNET,\n  COSTON_TESTNET,\n  CRONOS_MAINNET,\n  CRONOS_TESTNET,\n  EVMOS_MAINNET,\n  EVMOS_TESTNET,\n  FANTOM_MAINNET,\n  FANTOM_TESTNET,\n  FUSE_MAINNET,\n  FUSE_TESTNET,\n  HARMONY_MAINNET,\n  HARMONY_TESTNET,\n  HECO_MAINNET,\n  HECO_TESTNET,\n  KLAYTN_MAINNET,\n  KLAYTN_BAOBAB,\n  METIS_MAINNET,\n  METIS_RINKEBY,\n  MOONRIVER_MAINNET,\n  MOONBEAM_MAINNET,\n  MOONBEAM_MOONBASE,\n  OEC_MAINNET,\n  OEC_TESTNET,\n  OP_MAINNET,\n  OP_KOVAN,\n  POLYGON_MAINNET,\n  POLYGON_MUMBAI,\n  SONGBIRD_MAINNET,\n  WAGMI_FUJI_SUBNET,\n  XDAI_MAINNET,\n  EWC_MAINNET,\n  EWC_TESTNET,\n  IOTEX_MAINNET,\n  IOTEX_TESTNET,\n  ASTAR_MAINNET,\n  SHIDEN_TESTNET,\n  SHIBUYA_TESTNET,\n  TELOS_MAINNET,\n  TELOS_TESTNET,\n  OASIS_MAINNET,\n  OASIS_TESTNET\n]\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n\n  //$ public static readonly CAVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly CURRENCY = {\n    [ChainId.FUJI]: new Currency(18, 'AVAX', 'Avalanche'),\n    [ChainId.AVALANCHE]: new Currency(18, 'AVAX', 'Avalanche'),\n    [ChainId.WAGMI]: new Currency(18, 'WGM', 'Wagmi'),\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\n//$ const CAVAX = Currency.CAVAX\nconst CAVAX = Currency.CURRENCY\nexport { CAVAX }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n  public readonly address: string\n\n  public constructor(chainId: ChainId = ChainId.AVALANCHE, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WAVAX = {\n  [ChainId.FUJI]: new Token(ChainId.FUJI,'0xd00ae08403B9bbb9124bB305C09058E32C39A48c',18,'WAVAX','Wrapped AVAX'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE,'0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',18,'WAVAX','Wrapped AVAX'),\n  [ChainId.WAGMI]: new Token(ChainId.WAGMI,'0x3Ee7094DADda15810F191DD6AcF7E4FFa37571e4',18,'wWAGMI','Wrapped WAGMI')\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\nimport { Currency, CAVAX } from './currency'\nimport { Token, WAVAX } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === CAVAX[pairs[0].chainId] && pairs[0].involvesToken(WAVAX[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === CAVAX[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WAVAX[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WAVAX[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, CAVAX } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WAVAX } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === CAVAX[chainId]) return new TokenAmount(WAVAX[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.AVALANCHE): Token {\n  if (currency instanceof Token) return currency\n  if (currency === CAVAX[chainId]) return WAVAX[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public readonly chainId: ChainId = ChainId.AVALANCHE\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount, chainId: ChainId = ChainId.AVALANCHE): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, chainId: ChainId = ChainId.AVALANCHE) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], chainId)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === CAVAX[chainId]\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.chainId = chainId\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent, chainId: ChainId = ChainId.AVALANCHE): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n            chainId\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            chainId\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","FUJI","AVALANCHE","WAGMI","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","toHex","currencyAmount","raw","Router","swapCallParameters","trade","options","chainId","etherIn","inputAmount","currency","CAVAX","etherOut","outputAmount","ttl","methodName","args","to","recipient","amountIn","maximumAmountIn","allowedSlippage","amountOut","minimumAmountOut","path","route","map","token","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","tradeType","EXACT_INPUT","EXACT_OUTPUT","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","this","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","decimals","ether","currencyEquals","toExact","TokenAmount","equals","Price","baseCurrency","quoteCurrency","scalar","fromRoute","prices","pairs","entries","pair","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","Token","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE3","fetchPairData","IPangolinPair","abi","getReserves","reserves0","reserves1","balances","ETHEREUM_MAINNET","id","chain_id","mainnet","logo","pangolin_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","blockExplorerUrls","ARBITRUM_MAINNET","ARBITRUM_RINKEBY","AURORA_MAINNET","AURORA_TESTNET","AVALANCHE_MAINNET","png_symbol","debank_pangolin_id","contracts","png","factory","router","wrapped_native_token","local_multisig","community_treasury","treasury_vester","mini_chef","airdrop","timelock","governor","migrator","staking","active","reward_token","AVALANCHE_FUJI","BOBA_MAINNET","BITTORRENT_MAINNET","BSC_MAINNET","BSC_TESTNET","CELO_MAINNET","CELO_ALFAJORES_TESTNET","CELO_BAKLAVA_TESTNET","CRONOS_MAINNET","CRONOS_TESTNET","COSTON_TESTNET","EVMOS_TESTNET","EVMOS_MAINNET","FANTOM_MAINNET","FANTOM_TESTNET","FUSE_MAINNET","FUSE_TESTNET","HARMONY_MAINNET","HARMONY_TESTNET","HECO_MAINNET","HECO_TESTNET","KLAYTN_MAINNET","KLAYTN_BAOBAB","METIS_MAINNET","METIS_RINKEBY","MOONRIVER_MAINNET","MOONBEAM_MAINNET","MOONBEAM_MOONBASE","OEC_MAINNET","OEC_TESTNET","OP_MAINNET","OP_KOVAN","POLYGON_MAINNET","POLYGON_MUMBAI","SONGBIRD_MAINNET","WAGMI_FUJI_SUBNET","XDAI_MAINNET","EWC_MAINNET","EWC_TESTNET","IOTEX_MAINNET","IOTEX_TESTNET","ASTAR_MAINNET","SHIDEN_TESTNET","SHIBUYA_TESTNET","TELOS_MAINNET","TELOS_TESTNET","OASIS_MAINNET","OASIS_TESTNET","CHAINS","ALL_CHAINS","Currency","toLowerCase","currencyA","currencyB","WAVAX","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","exactQuote","slippage","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","exactIn","exactOut","slippageTolerance","slippageAdjustedAmountOut","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError"],"mappings":"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"}